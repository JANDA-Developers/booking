type Booking {
  _id: ID!
  house: House!
  booker: User!
  roomTypes: [RoomType!]!
  dateRange: DateRange!
  price: Float!
  bookingStatus: BookingStatus!
  guests: [String!]
  memo: String!
}

enum BookingStatus {
  WAIT_DEPOSIT
  COMPLETE
  CANCEL
  REFUND_WAIT
  PAY_WHEN_CHK_IN
}

scalar Date

scalar DateTime

scalar EmailAddress

scalar Name

scalar PhoneNumber

scalar URL

# DB에 저장할 떄는 0101010의 형태로 저장하도록 Resolver에서 처리한다.
enum Day {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

type Location {
  address: String!
  lat: Float!
  lng: Float!
}

input LocationInput {
  address: String!
  lat: Float!
  lng: Float!
}

type DateRange {
  startDate: String!
  endDate: String!
  isPast: Boolean!
}

input DateRangeInput {
  startDate: String!
  endDate: String!
}

type Tag {
  name: String!
  content: String!
  icon: String!
}

input TagInput {
  name: String!
  content: String!
  icon: String
}

type Guest {
  _id: ID!
  house: House!
  booker: User!
  roomType: String!
  guestType: String!
  allocatedRoom: Room!
  stay: String!
  price: Int!
  isChkIn: Boolean!
  bookingId: String!
  createdAt: String!
  updatedAt: String
}

type CreateHouseResponse {
  ok: Boolean!
  error: String
  house: House
}

type Mutation {
  CreateHouse(name: String!, houseType: HouseType!, location: LocationInput!): CreateHouseResponse!
  CreateRoomType(name: String!, house: String!, pricingType: PricingType!, people_count_std: Int!, people_count_max: Int!, sort: Int!, roomCount: Int!, isEnable: Boolean!, description: String!, tags: [TagInput!]): CreateRoomTypeResponse!
  CompletePhoneVerification(key: String!): CompletePhoneVerificationResponse!
  EmailSignUp(name: String!, email: String!, password: String!, phoneNumber: String!): EmailSignUpResponse!
  GmailConnect(firstName: String!, lastName: String!, gmail: String!): GmailConnectionResponse!
  StartPhoneVerification: StartPhoneVerificationResponse!
}

type House {
  _id: ID!
  name: String!
  houseType: HouseType!
  user: User
  location: Location!
  termsOfBooking: TermsOfBooking!
  createdAt: DateTime!
  updatedAt: DateTime
}

enum HouseType {
  GUEST_HOUSE
  HOSTEL
  HOTEL
  MOTEL
  PENSION
  YOUTH_HOSTEL
}

# 예약 가능한 조건. 
type TermsOfBooking {
  # 선택 가능한 '숙박 시작일자'
  limitSelectStartDate: Int!
  minSelectStartDate: Int!
  # 숙박 가능 날짜 범위
  availableDateRange: Int!
}

type RefundPolicy {
  id: ID!
  name: String!
  dateRange: DateRange!
  rate: Float!
  description: String!
}

type SeasonPrice {
  _id: ID!
  house: House!
  roomType: RoomType!
  season: Season!
  price: Float!
  applyDays: [Day]!
}

type Season {
  _id: ID!
  house: House!
  name: String!
  dateRange: DateRange!
  color: String!
  description: String!
}

input SeasonPriceInput {
  price: Float!
  applyDays: Int!
}

type RoomPrice {
  _id: ID!
  house: House!
  roomType: RoomType!
  price: Float!
  date: String!
}

type CreateRoomTypeResponse {
  ok: Boolean!
  error: String!
}

type RoomType {
  _id: ID!
  name: String!
  house: House!
  pricingType: PricingType!
  people_count_std: Int!
  people_count_max: Int!
  sort: Int!
  roomCount: Int!
  isEnable: Boolean!
  description: String!
  # 예전에 Facilities 랑 같은 아이임...
  tags: [Tag!]!
  rooms: [Room!]!
  createdAt: String!
  updatedAt: String
}

type Room {
  _id: ID!
  name: String!
  roomType: RoomType!
  isEnable: Boolean!
}

enum PricingType {
  DOMITORY
  ROOM
}

type Query {
  getRoomTypes(types: String!): RoomType
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  GetMyProfile: GetMyProfileResponse!
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type EmailSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  ok: Boolean!
  error: String
  token: String
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type GmailConnectionResponse {
  ok: Boolean!
  error: String
  token: String
}

type User {
  _id: ID!
  name: String!
  phoneNumber: String!
  password: String
  email: String!
  verifiedPhone: Boolean!
  verifiedEmail: Boolean!
  userRole: UserRole!
  checkPrivacyPolicy: Boolean!
  houses: [House!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

enum UserRole {
  ADMIN
  HOST
  BOOKER
  GHOST
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type Verification {
  _id: ID!
  target: VerificationTarget!
  payload: String!
  verified: Boolean!
  key: String!
  user: User!
  createdAt: String!
  updatedAt: String
}

enum VerificationTarget {
  PHONE
  EMAIL
}
