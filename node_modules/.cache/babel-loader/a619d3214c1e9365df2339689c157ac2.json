{"ast":null,"code":"// 빈 문자열이면 중립을 반환합니다.\nimport { NEUTRAL } from \"../types/enum\";\n\nvar isUrl = function isUrl(string) {\n  if (string === \"\") return NEUTRAL;\n  var regExp = /^http(s)?:\\/\\/(www\\.)?[a-z0-9]+([-.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/;\n  return regExp.test(string);\n};\n\nvar isPhone = function isPhone(string) {\n  if (string === \"\") return NEUTRAL;\n  var result = string.replace(/[\\s-]+/g, \"\");\n  var validation = result.length >= 10 && result.length < 14 && /^[0-9+]+\\w$/g.test(result);\n  return validation;\n};\n\nvar isHaveScharacter = function isHaveScharacter(string) {\n  var regExp = /[~!@#$%^&*()_+|<>?:{}]/;\n  return regExp.test(string);\n};\n\nvar isLengthIn = function isLengthIn(string, max, min) {\n  return string.length <= max && min < string.length;\n};\n\nvar isName = function isName(string) {\n  if (string === \"\") return NEUTRAL;\n  var regExp = /[가-힣ㄱ-ㅎㅏ-ㅣa-zA-Z0-9 .'_]+$/gi;\n  var maxLen = 60;\n  var validation = string.length <= maxLen && regExp.test(string);\n  return validation;\n};\n\nvar isYYYYMMDD = function isYYYYMMDD(string) {\n  if (string === \"\") return NEUTRAL;\n  var regExp = /^(19|20)\\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])$/; // const regExp2 = /^(19|20)\\d{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[0-1])$/;\n\n  var validation = regExp.test(string); // if (!validation) validation = regExp2.test(string);\n\n  return validation;\n};\n\nvar isEmail = function isEmail(string) {\n  if (string === \"\") return NEUTRAL;\n  var regExp = /^[-$^_=+0-9A-Za-z~]+@[-$%/0-9=?A-Z^_a-z~]+.[0-9A-Za-z~]+\\w$/;\n  return regExp.test(string);\n};\n\nvar isHaveNumber = function isHaveNumber(string) {\n  var regExp = /[0-9]/;\n  return regExp.test(string);\n};\n\nvar isMaxOver = function isMaxOver(string, max) {\n  if (string === \"\") return NEUTRAL;\n  var val = string.length;\n  return val <= max;\n};\n\nvar isPassword = function isPassword(string) {\n  if (string === \"\") return NEUTRAL; // 특수문자 1개이상 숫자 0 에서  9  7~15 자리의 숫자\n\n  var regExp = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/;\n  return regExp.test(string);\n};\n\nvar isNumberMinMax = function isNumberMinMax(string, min, max) {\n  if (string === \"\") return NEUTRAL; // 특수문자 1개이상 숫자 0 에서  9  7~15 자리의 숫자\n\n  var regExp = new RegExp(\"[0-9_-]{\".concat(min, \",\").concat(max, \"}\"));\n  return regExp.test(string);\n};\n\nexport { isEmail, isYYYYMMDD, isPhone, isName, isUrl, isMaxOver, isPassword, isNumberMinMax, isLengthIn, isHaveScharacter, isHaveNumber };","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/utils/inputValidations.jsx"],"names":["NEUTRAL","isUrl","string","regExp","test","isPhone","result","replace","validation","length","isHaveScharacter","isLengthIn","max","min","isName","maxLen","isYYYYMMDD","isEmail","isHaveNumber","isMaxOver","val","isPassword","isNumberMinMax","RegExp"],"mappings":"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","sourcesContent":["// 빈 문자열이면 중립을 반환합니다.\r\n\r\nimport {NEUTRAL} from \"../types/enum\";\r\n\r\nconst isUrl = string => {\r\n  if (string === \"\") return NEUTRAL;\r\n  const regExp = /^http(s)?:\\/\\/(www\\.)?[a-z0-9]+([-.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/;\r\n  return regExp.test(string);\r\n};\r\n\r\nconst isPhone = string => {\r\n  if (string === \"\") return NEUTRAL;\r\n  const result = string.replace(/[\\s-]+/g, \"\");\r\n  const validation =\r\n    result.length >= 10 && result.length < 14 && /^[0-9+]+\\w$/g.test(result);\r\n  return validation;\r\n};\r\n\r\nconst isHaveScharacter = string => {\r\n  var regExp = /[~!@#$%^&*()_+|<>?:{}]/;\r\n  return regExp.test(string);\r\n};\r\n\r\nconst isLengthIn = (string, max, min) => {\r\n  return string.length <= max && min < string.length;\r\n};\r\n\r\nconst isName = string => {\r\n  if (string === \"\") return NEUTRAL;\r\n  const regExp = /[가-힣ㄱ-ㅎㅏ-ㅣa-zA-Z0-9 .'_]+$/gi;\r\n  const maxLen = 60;\r\n  const validation = string.length <= maxLen && regExp.test(string);\r\n  return validation;\r\n};\r\n\r\nconst isYYYYMMDD = string => {\r\n  if (string === \"\") return NEUTRAL;\r\n  const regExp = /^(19|20)\\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])$/;\r\n  // const regExp2 = /^(19|20)\\d{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[0-1])$/;\r\n  let validation = regExp.test(string);\r\n  // if (!validation) validation = regExp2.test(string);\r\n  return validation;\r\n};\r\n\r\nconst isEmail = string => {\r\n  if (string === \"\") return NEUTRAL;\r\n  const regExp = /^[-$^_=+0-9A-Za-z~]+@[-$%/0-9=?A-Z^_a-z~]+.[0-9A-Za-z~]+\\w$/;\r\n  return regExp.test(string);\r\n};\r\n\r\nconst isHaveNumber = string => {\r\n  var regExp = /[0-9]/;\r\n  return regExp.test(string);\r\n};\r\n\r\nconst isMaxOver = (string, max) => {\r\n  if (string === \"\") return NEUTRAL;\r\n  const val = string.length;\r\n  return val <= max;\r\n};\r\n\r\nconst isPassword = string => {\r\n  if (string === \"\") return NEUTRAL;\r\n  // 특수문자 1개이상 숫자 0 에서  9  7~15 자리의 숫자\r\n  const regExp = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/;\r\n  return regExp.test(string);\r\n};\r\n\r\nconst isNumberMinMax = (string, min, max) => {\r\n  if (string === \"\") return NEUTRAL;\r\n  // 특수문자 1개이상 숫자 0 에서  9  7~15 자리의 숫자\r\n  const regExp = new RegExp(`[0-9_-]{${min},${max}}`);\r\n  return regExp.test(string);\r\n};\r\n\r\nexport {\r\n  isEmail,\r\n  isYYYYMMDD,\r\n  isPhone,\r\n  isName,\r\n  isUrl,\r\n  isMaxOver,\r\n  isPassword,\r\n  isNumberMinMax,\r\n  isLengthIn,\r\n  isHaveScharacter,\r\n  isHaveNumber\r\n};\r\n"]},"metadata":{},"sourceType":"module"}