{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _ from \"lodash\";\nimport { GuestTypeAdd } from \"./assigIntrerface\";\nimport { onCompletedMessage, muResult, targetBlink, JDscrollTo, s4, isEmpty } from \"../../../../utils/utils\";\nimport { ReactTooltip } from \"../../../../atoms/tooltipList/TooltipList\";\nimport { RoomGender, Gender, PricingType } from \"../../../../types/enum\";\nimport { DEFAULT_ASSIG_ITEM, DEFAULT_ROOMTYPE, DEFAULT_BOOKING } from \"../../../../types/defaults\";\nimport $ from \"jquery\";\nimport JDisNetworkRequestInFlight from \"../../../../utils/netWorkStatusToast\";\nimport { LANG } from \"../../../../hooks/hook\";\nexport function getAssigUtils(_ref, _ref2, _ref3) {\n  var setGuestValue = _ref.setGuestValue,\n      guestValue = _ref.guestValue,\n      setBlockMenuProps = _ref.setBlockMenuProps,\n      bookingModal = _ref.bookingModal,\n      confirmModalHook = _ref.confirmModalHook;\n  var allocateMu = _ref2.allocateMu,\n      deleteGuestsMu = _ref2.deleteGuestsMu,\n      createBlockMu = _ref2.createBlockMu,\n      deleteBlockMu = _ref2.deleteBlockMu,\n      deleteBookingMu = _ref2.deleteBookingMu,\n      updateBookingMu = _ref2.updateBookingMu,\n      networkStatus = _ref2.networkStatus,\n      refetch = _ref2.refetch;\n  var houseId = _ref3.houseId,\n      groupData = _ref3.groupData;\n\n  // 마크제거 MARK REMOVE 마커 제거\n  var removeMark = function removeMark() {\n    console.info(\"removeMark\");\n    setGuestValue(_toConsumableArray(guestValue.filter(function (item) {\n      return item.type !== GuestTypeAdd.MARK;\n    })));\n  };\n\n  var deleteGhost = function deleteGhost() {\n    console.info(\"deleteGhost\");\n    setGuestValue(_toConsumableArray(guestValue.filter(function (item) {\n      return item.type !== GuestTypeAdd.GHOST;\n    })));\n  }; // TODO\n  // const getItemByTypes\n\n\n  var getItemById = function getItemById(guestId) {\n    var targetGuest = guestValue.find(function (guest) {\n      return guest.id === guestId;\n    });\n    if (!targetGuest) throw new Error(\"해당하는 게스트를 찾을수 없습니다. <<getItemById>>\");\n    return targetGuest;\n  };\n\n  var getAssigInfoFromItems = function getAssigInfoFromItems(items) {\n    var temp = items.map(function (item) {\n      var group = getGroupById(item.group);\n      return {\n        bedIndex: group.bedIndex,\n        roomId: group.roomId,\n        gender: item.gender\n      };\n    }).filter(function (group) {\n      return group.bedIndex !== -1;\n    });\n    return temp;\n  };\n\n  var getGroupById = function getGroupById(groupId) {\n    var targetGroup = groupData.find(function (group) {\n      return group.id === groupId;\n    });\n    if (!targetGroup) throw new Error(\"해당하는 그룹을 찾을수 없습니다. <<getGroupById>>\");\n    return targetGroup;\n  };\n\n  var bookingCheckedNew = function bookingCheckedNew(bookingId) {\n    var targets = getGuestsByBookingId(bookingId);\n    targets.forEach(function (target) {\n      return target.showNewBadge = false;\n    });\n    setGuestValue(_toConsumableArray(guestValue));\n  };\n\n  var popUpItemMenuTooltip =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(location, target) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return allTooltipsHide();\n\n            case 2:\n              _context.next = 4;\n              return removeMark();\n\n            case 4:\n              if (!(target.type === GuestTypeAdd.BLOCK)) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 7;\n              return openBlockMenu(location, {\n                item: target\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function popUpItemMenuTooltip(_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // 추가되는 블록을 하일라이팅 해줍니다.\n  // 아이템 아이디 또는 부킹아이디로 지정가능합니다.\n\n\n  var hilightGuestBlock = function hilightGuestBlock(_ref5) {\n    var itemId = _ref5.itemId,\n        bookingId = _ref5.bookingId,\n        scrollMove = _ref5.scrollMove;\n    var targetDom;\n\n    if (itemId) {\n      targetDom = $(\"#assigItem--item\".concat(itemId));\n    } else {\n      targetDom = $(\".assigItem--booking\".concat(bookingId));\n    }\n\n    if (!targetDom || targetDom.length === 0) {\n      setTimeout(function () {\n        hilightGuestBlock({\n          itemId: itemId,\n          bookingId: bookingId\n        });\n      }, 1000);\n      return;\n    }\n\n    targetBlink(targetDom);\n\n    if (scrollMove) {\n      JDscrollTo(targetDom, $(\".rct-scroll\"));\n    }\n  }; // 유틸 사람이 그장소에 그시간대에 있다면 충돌시간을 주고 아니면 false를 줌\n\n\n  var isTherePerson = function isTherePerson(startTime, endTime, groupId, guest) {\n    var atTimeGuests = filterTimeZone(startTime, endTime);\n    var atTimePlaceGuests = atTimeGuests.filter(function (inGuest) {\n      return inGuest.group === groupId;\n    }); // 자기자신이 포함됨니다..\n\n    if (atTimePlaceGuests.length > 1) {\n      return true;\n    }\n\n    return false;\n  }; // 유틸 from 과 to 사이에 있는 모든 아이템을 찾습니다.\n  // 옵션으로 roomId 까지 필터가능\n\n\n  var filterTimeZone = function filterTimeZone(from, to, roomId) {\n    if (!roomId) {\n      return guestValue.filter(function (guest) {\n        return guest.start >= from && guest.start < to || guest.end > from && guest.end <= to || guest.end === from && guest.end === to;\n      });\n    }\n\n    return guestValue.filter(function (guest) {\n      return guest.start >= from && guest.start < to || guest.end > from && guest.end <= to || guest.end === from && guest.end === to;\n    });\n  }; // 체크인 투글함수\n  // 게스트인덱스는 쓰지않는게 좋음\n\n\n  var toogleCheckInOut =\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(guestId, itemIndex) {\n      var target, temp, result, message, updateGuests;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!JDisNetworkRequestInFlight(networkStatus)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              target = DEFAULT_ASSIG_ITEM;\n\n              if (itemIndex !== undefined) {\n                target = guestValue[itemIndex];\n              } else if (guestId) {\n                temp = guestValue.find(function (guest) {\n                  return guest.id === guestId;\n                });\n                if (temp) target = temp;\n              }\n\n              _context2.next = 6;\n              return updateBookingMu({\n                variables: {\n                  bookingId: target.bookingId,\n                  params: {\n                    checkInInfo: {\n                      isIn: !guestValue[target.itemIndex].checkInInfo\n                    }\n                  }\n                }\n              });\n\n            case 6:\n              result = _context2.sent;\n\n              // 아폴로 통신 성공\n              if (result && result.data) {\n                message = guestValue[target.itemIndex].checkInInfo ? LANG(\"checkOut\") : LANG(\"checkIn\");\n                onCompletedMessage(result.data.UpdateBooking, message, LANG(\"checkin_change_fail\"));\n\n                if (result.data.UpdateBooking.ok) {\n                  // 뮤테이션 성공시\n                  updateGuests = guestValue.map(function (guest) {\n                    if (guest.bookingId === target.bookingId) {\n                      guest.checkInInfo = !guest.checkInInfo;\n                    }\n\n                    return guest;\n                  });\n                  setGuestValue(_toConsumableArray(updateGuests));\n                } else {// 뮤테이션 실패시\n                }\n              }\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function toogleCheckInOut(_x3, _x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }(); // 모든 툴팁을 팝업에서 제거\n\n\n  var allTooltipsHide = function allTooltipsHide(except) {\n    ReactTooltip.hide();\n    if (except !== \"blockMenu\") $(\"#blockMenu\").removeClass(\"assig__tooltips--show\");\n    if (except !== \"canvasMenu\") $(\"#canvasMenu\").removeClass(\"assig__tooltips--show\");\n    if (except !== \"createMenu\") $(\"#createMenu\").removeClass(\"assig__tooltips--show\");\n    if (except !== \"itemTooltip\") $(\"#itemTooltip\").removeClass(\"assig__tooltips--show\");\n  }; // 유틸 두게스트의 충돌시간 구해줌 없다면 false를 반환함\n  // const getCrushTimeByTwoGuest: TGetCrushTimeByTwoGuest = (guest, guest2) => {\n  //   const minEnd = guest.end < guest2.end ? guest.end : guest2.end;\n  //   const minStart = guest.start < guest2.start ? guest.start : guest2.start;\n  //   if (minStart >= minEnd) return false;\n  //   return {\n  //     crushGuest: guest.id,\n  //     crushGuest2: guest2.id,\n  //     itemIndex: guest.itemIndex,\n  //     start: minStart,\n  //     end: minEnd\n  //   };\n  // };\n  // 유틸 성별이 맞는지 검사하고 결과가 맞지않다면 CrushTime을 반환합니다.\n  // targetGroup과 start end에 이동하고자하는 위치 또는 자신의 위치를 넣어서 해당 구간및 장소에\n  // 성별이 안전한지 판별합니다.\n\n\n  var isGenderSafe = function isGenderSafe(targetGroup, item, start, end) {\n    // 성별검사\n    if (targetGroup.roomType.roomGender === RoomGender.ANY) {\n      return true;\n    }\n\n    if (targetGroup.roomType.roomGender === RoomGender.MALE) {\n      return item.gender === Gender.MALE;\n    }\n\n    if (targetGroup.roomType.roomGender === RoomGender.FEMALE) {\n      return item.gender === Gender.FEMALE;\n    }\n\n    if (targetGroup.roomType.roomGender === RoomGender.SEPARATELY) {\n      var atTimeRoomGuests = filterTimeZone(start, end, targetGroup.roomId);\n      var crushGendersGuests = atTimeRoomGuests.filter(function (guest) {\n        return guest.gender !== item.gender;\n      });\n      return crushGendersGuests ? false : true;\n    }\n\n    return true;\n  }; // 유틸 그자리에 마크를 생성\n\n\n  var createMark = function createMark(start, end, groupIds) {\n    console.info(\"createMark\"); // TODO 시프트로 할려면 특별한 장치가 필요할것같다.\n\n    var filteredGuestValue = guestValue.filter(function (guest) {\n      return guest.type !== GuestTypeAdd.MARK;\n    });\n    groupIds.forEach(function (id, i) {\n      var group = getGroupById(id);\n      filteredGuestValue.push(_objectSpread({}, DEFAULT_ASSIG_ITEM, {\n        roomTypeId: group.roomTypeId,\n        bedIndex: group.bedIndex,\n        roomId: group.roomId,\n        itemIndex: guestValue.length + i + 1,\n        id: \"mark\".concat(id).concat(start),\n        type: GuestTypeAdd.MARK,\n        start: start,\n        end: end,\n        canSelect: false,\n        group: id\n      }));\n    });\n    setGuestValue(_toConsumableArray(filteredGuestValue));\n  };\n\n  var getGuestsByBookingId = function getGuestsByBookingId(bookingId) {\n    return guestValue.filter(function (guest) {\n      return guest.bookingId === bookingId;\n    });\n  }; // 예약을 예약 아이디로 삭제\n\n\n  var deleteBookingById =\n  /*#__PURE__*/\n  function () {\n    var _ref7 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(bookingId, confirm) {\n      var callBackFn;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              // 예약 삭제 진행\n              callBackFn =\n              /*#__PURE__*/\n              function () {\n                var _ref8 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3(flag) {\n                  var result;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          if (!flag) {\n                            _context3.next = 5;\n                            break;\n                          }\n\n                          _context3.next = 3;\n                          return deleteBookingMu({\n                            variables: {\n                              bookingId: bookingId\n                            }\n                          });\n\n                        case 3:\n                          result = _context3.sent;\n\n                          if (result && result.data && result.data.DeleteBooking.ok) {\n                            setGuestValue(guestValue.filter(function (guest) {\n                              return guest.bookingId !== bookingId;\n                            }));\n                          }\n\n                        case 5:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function callBackFn(_x7) {\n                  return _ref8.apply(this, arguments);\n                };\n              }(); // 확인메시지 출력여부\n\n\n              if (!confirm) callBackFn(true);else {\n                confirmModalHook.openModal({\n                  txt: LANG(\"are_you_sure_you_want_to_delete_the_reservation\"),\n                  callBack: callBackFn\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function deleteBookingById(_x5, _x6) {\n      return _ref7.apply(this, arguments);\n    };\n  }(); //  예약아이디를 게스트아이디로 찾음\n\n\n  var getBookingIdByGuestId = function getBookingIdByGuestId(guestId) {\n    var target = guestValue.find(function (guest) {\n      return guest.id === guestId;\n    });\n\n    if (!target) {\n      throw Error(\"guestId not exist :: getBookingByGuestId\");\n    }\n\n    return target.bookingId;\n  };\n\n  var getGuestsInGroup = function getGuestsInGroup(group) {\n    return guestValue.filter(function (guest) {\n      return guest.group === group.id;\n    });\n  }; // 게스트가 그 시간대에 그 그룹에 괺찮은지 검사함\n  // 검사한 결과를 Validation에 기입.\n\n\n  var resizeBlockBlock =\n  /*#__PURE__*/\n  function () {\n    var _ref9 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5(targetGuest, time) {\n      var guestValueOriginCopy, result, newBlock;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              guestValueOriginCopy = $.extend(true, [], guestValue);\n              targetGuest.end = time;\n              setGuestValue(_toConsumableArray(guestValue));\n              _context5.next = 5;\n              return createBlockMu({\n                variables: {\n                  bedIndex: targetGuest.bedIndex,\n                  checkOut: time,\n                  houseId: houseId,\n                  roomId: targetGuest.roomId,\n                  checkIn: targetGuest.start\n                }\n              });\n\n            case 5:\n              result = _context5.sent;\n              // 에러처리\n              newBlock = muResult(result, \"CreateBlock\", \"block\");\n\n              if (typeof newBlock !== \"boolean\") {// setGuestValue([...guestValueOriginCopy,]);\n              } else {\n                setGuestValue(_toConsumableArray(guestValueOriginCopy));\n              }\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function resizeBlockBlock(_x8, _x9) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var allocateItem =\n  /*#__PURE__*/\n  function () {\n    var _ref10 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(targetGuest, newGroupOrder) {\n      var guestValueOriginCopy;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              guestValueOriginCopy = $.extend(true, [], guestValue);\n              targetGuest.group = groupData[newGroupOrder].id;\n              setGuestValue(_toConsumableArray(guestValue)); // 배정 뮤테이션을 발생\n\n              if (targetGuest.type === GuestTypeAdd.GUEST) {\n                allocateGuest(targetGuest.id, newGroupOrder, guestValueOriginCopy);\n              }\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function allocateItem(_x10, _x11) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var allocateGuest =\n  /*#__PURE__*/\n  function () {\n    var _ref11 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(itemId, newGroupOrder, guestValueOriginCopy) {\n      var group, newGroupId, result;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!JDisNetworkRequestInFlight(networkStatus)) {\n                _context7.next = 2;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 2:\n              group = groupData[newGroupOrder];\n              newGroupId = group.roomId;\n              _context7.next = 6;\n              return allocateMu({\n                variables: {\n                  guestId: itemId,\n                  allocateInfo: {\n                    bedIndex: group.bedIndex,\n                    roomId: newGroupId\n                  }\n                }\n              });\n\n            case 6:\n              result = _context7.sent;\n              // 실패하면 전부 되돌림\n              // 👿 이반복을 함수 if 로 만들면 어떨까?\n              if (!muResult(result, \"AllocateGuestToRoom\")) if (guestValueOriginCopy) {\n                setGuestValue(_toConsumableArray(guestValueOriginCopy));\n              } else {\n                location.reload();\n              }\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function allocateGuest(_x12, _x13, _x14) {\n      return _ref11.apply(this, arguments);\n    };\n  }(); // 방막기\n\n\n  var addBlock =\n  /*#__PURE__*/\n  function () {\n    var _ref12 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8(start, end, groupIds) {\n      var guestValueOriginCopy, tempNewBlocks, withOutMarks, withTempBlocks, i, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, groupId, targetGroup, result, block;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              console.info(\"addBlock\");\n\n              if (!JDisNetworkRequestInFlight(networkStatus)) {\n                _context8.next = 3;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 3:\n              allTooltipsHide();\n              guestValueOriginCopy = $.extend(true, [], guestValue);\n              tempNewBlocks = []; // 새로운 방막기들을 생성함\n\n              groupIds.forEach(function (groupId) {\n                var targetGroup = groupData.find(function (group) {\n                  return group.id === groupId;\n                });\n                if (!targetGroup) throw Error(\"그룹 아이디가 그룹데이터안에 없습니다.\");\n                var tempId = s4();\n\n                var tempItem = _objectSpread({}, DEFAULT_ASSIG_ITEM, {\n                  bookingId: s4(),\n                  roomId: targetGroup.roomId,\n                  bedIndex: targetGroup.bedIndex,\n                  itemIndex: guestValueOriginCopy.length,\n                  type: GuestTypeAdd.GHOST,\n                  id: tempId,\n                  start: start,\n                  end: end,\n                  group: groupId,\n                  canMove: false,\n                  loading: true\n                });\n\n                tempNewBlocks.push(tempItem);\n              });\n              withOutMarks = guestValue.filter(function (item) {\n                return item.type != GuestTypeAdd.MARK;\n              });\n              withTempBlocks = [].concat(_toConsumableArray(withOutMarks), tempNewBlocks);\n              setGuestValue(_toConsumableArray(withTempBlocks));\n              i = 0;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _iteratorError = undefined;\n              _context8.prev = 14;\n              _iterator = groupIds[Symbol.iterator]();\n\n            case 16:\n              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                _context8.next = 28;\n                break;\n              }\n\n              groupId = _step.value;\n              targetGroup = getGroupById(groupId);\n              _context8.next = 21;\n              return createBlockMu({\n                variables: {\n                  checkIn: start,\n                  checkOut: end,\n                  houseId: houseId,\n                  roomId: targetGroup.roomId,\n                  bedIndex: targetGroup.bedIndex\n                }\n              });\n\n            case 21:\n              result = _context8.sent;\n              block = muResult(result, \"CreateBlock\", \"block\");\n\n              if (typeof block === \"boolean\") {\n                setGuestValue(guestValueOriginCopy);\n              } else {}\n\n              i++;\n\n            case 25:\n              _iteratorNormalCompletion = true;\n              _context8.next = 16;\n              break;\n\n            case 28:\n              _context8.next = 34;\n              break;\n\n            case 30:\n              _context8.prev = 30;\n              _context8.t0 = _context8[\"catch\"](14);\n              _didIteratorError = true;\n              _iteratorError = _context8.t0;\n\n            case 34:\n              _context8.prev = 34;\n              _context8.prev = 35;\n\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n\n            case 37:\n              _context8.prev = 37;\n\n              if (!_didIteratorError) {\n                _context8.next = 40;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 40:\n              return _context8.finish(37);\n\n            case 41:\n              return _context8.finish(34);\n\n            case 42:\n              refetch();\n\n            case 43:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, null, [[14, 30, 34, 42], [35,, 37, 41]]);\n    }));\n\n    return function addBlock(_x15, _x16, _x17) {\n      return _ref12.apply(this, arguments);\n    };\n  }(); // Id 로 게스트 찾아서 투글해주는 함수\n\n\n  var genderToggleById = function genderToggleById(guestId) {\n    var targetGuest = getItemById(guestId);\n    if (targetGuest) targetGuest.gender = targetGuest.gender === Gender.FEMALE ? Gender.MALE : Gender.FEMALE;\n    setGuestValue(_toConsumableArray(guestValue));\n  }; // 유틸 리사이즈 되었을때 벨리데이션 해줍니다.\n\n\n  var resizeValidater = function resizeValidater(item, time) {\n    var linkedGuests = guestValue.filter(function (guest) {\n      return guest.bookingId === item.bookingId;\n    });\n  }; // 같은 예약자가 예약한 게스트들을 한번에 변경\n\n\n  var resizeLinkedItems = function resizeLinkedItems(bookingId, newTime) {\n    // TODO 여기서 State를통하여 조작할수 있도록하자\n    guestValue.forEach(function (guest) {\n      var inGuest = guest;\n      if (guest.bookingId === bookingId) inGuest.end = newTime;\n    });\n    setGuestValue(_toConsumableArray(guestValue));\n  }; // 같은 예약자가 예약한 게스트들을 한번에 이동\n\n\n  var moveLinkedItems = function moveLinkedItems(bookingId, newTime) {\n    guestValue.forEach(function (guest) {\n      var inGuest = guest;\n\n      if (guest.bookingId === bookingId) {\n        inGuest.end += newTime - guest.start;\n        inGuest.start = newTime;\n      }\n    });\n    setGuestValue(_toConsumableArray(guestValue));\n  }; // block 용 메뉴오픈\n\n\n  var openBlockMenu = function openBlockMenu(location, blockMenuProps) {\n    if (blockMenuProps) {\n      setBlockMenuProps(blockMenuProps);\n    }\n\n    $(\"#blockMenu\").css(\"left\", location.clientX).css(\"top\", location.clientY).addClass(\"assig__tooltips--show\");\n  }; // 마크와함께 부킹시작\n\n\n  var startBookingModalWithMark = function startBookingModalWithMark(startBookingCallBack) {\n    var createItems = getItems(GuestTypeAdd.MARK); // 아이템들의 그룹들\n\n    var createItemTempGroups = createItems.map(function (item) {\n      return getGroupById(item.group);\n    }); // 아이템들의 룸타입들\n\n    var roomTypes = groupToRoomType(createItemTempGroups); // 모달로 보낼 게스트들집합\n\n    var createTempGuests = itemsToGuets(createItems, groupData); // 모달안에 넣어줄 새로만들 부킹정보\n\n    var createParam = _objectSpread({\n      __typename: \"Booking\"\n    }, DEFAULT_BOOKING, {\n      _id: s4(),\n      checkIn: createItems[0].start,\n      checkOut: createItems[0].end,\n      agreePrivacyPolicy: true,\n      guests: createTempGuests,\n      roomTypes: roomTypes\n    });\n\n    var modalParam = {\n      createParam: createParam,\n      startBookingCallBack: startBookingCallBack,\n      mode: \"CREATE_ASSIG\"\n    };\n    bookingModal.openModal(modalParam);\n  }; // create블러들을 ghost로 변환\n\n\n  var changeMarkToGhost = function changeMarkToGhost() {\n    var createBlock = guestValue.filter(function (guest) {\n      return guest.type === GuestTypeAdd.MARK;\n    });\n    createBlock.forEach(function (createBlock) {\n      createBlock.loading = true;\n      createBlock.type = GuestTypeAdd.GHOST;\n    });\n    setGuestValue(_toConsumableArray(guestValue));\n  };\n\n  var createCreateItem = function createCreateItem(canvasInfo, gender) {\n    allTooltipsHide();\n    var end = canvasInfo.end,\n        start = canvasInfo.start,\n        groupIds = canvasInfo.groupIds; // 시간이 같고 타입이 Create인 것들을 하나의 부킹으로 묶음\n\n    var linkedItems = guestValue.filter(function (item) {\n      return item.type === GuestTypeAdd.MARK && item.start <= start && item.end >= end;\n    }); // 생성된 Create들의 시간을 하나로 통일하기 위한 함수\n\n    var getTime = function getTime(flag) {\n      if (!linkedItems[0]) return canvasInfo[flag];\n      if (linkedItems[0].start <= start && linkedItems[0].end >= end) return linkedItems[0][flag];\n      return canvasInfo[flag];\n    };\n\n    var tempItems = []; // 그룹아이디를 토데로 새로운 아이템 목록 생성\n    // groupIds.forEach(groupId => {\n    //   const group = getGroupById(groupId);\n    //   const newItem = {\n    //     ...DEFAULT_ASSIG_ITEM,\n    //     roomTypeId: group.roomTypeId,\n    //     room: group.roomId,\n    //     bookingId: \"create\",\n    //     id: `create${groupId}${start}${s4()}`,\n    //     gender:\n    //       gender || roomGenderToGedner(group.roomGender, group.pricingType),\n    //     type: GuestTypeAdd.MAKE,\n    //     start: getTime(\"start\"),\n    //     end: getTime(\"end\"),\n    //     group: groupId\n    //   };\n    //   tempItems.push(newItem);\n    // });\n\n    linkedItems = [].concat(_toConsumableArray(linkedItems), tempItems);\n    $(\"#canvasMenu\").removeClass(\"canvasMenu--show\");\n    setGuestValue([].concat(_toConsumableArray(guestValue.filter(function (item) {\n      return item.type !== GuestTypeAdd.MARK;\n    })), _toConsumableArray(linkedItems))); // setCreateMenuProps({item: newItem});\n  }; // canvas 용 메뉴오픈\n\n\n  var openCanvasMenuTooltip = function openCanvasMenuTooltip(location) {\n    $(\"#canvasMenu\").css(\"left\", location.clientX + 10).css(\"top\", location.clientY + 5).addClass(\"assig__tooltips--show\");\n  };\n\n  var hilightHeader = function hilightHeader(date) {// if (!date) return;\n    // const time =\n    // moment(date)\n    // .local()\n    // .valueOf() -\n    // TimePerMs.H * 3;\n    // const target = $(`.timelineHeaderCell__inner[data-start=\"${time}\"]`);\n    // targetBlink(target.parent());\n  };\n\n  var getItems = function getItems(type) {\n    return guestValue.filter(function (guest) {\n      return guest.type === GuestTypeAdd[type];\n    });\n  };\n\n  var getInfoesFromMarks = function getInfoesFromMarks() {\n    var marks = getItems(GuestTypeAdd.MARK);\n    if (isEmpty(marks)) return {\n      start: 0,\n      end: 0,\n      groupIds: []\n    };\n    var groupIds = marks.map(function (mark) {\n      return mark.group;\n    });\n    var _marks$ = marks[0],\n        start = _marks$.start,\n        end = _marks$.end;\n    return {\n      start: start,\n      end: end,\n      groupIds: groupIds\n    };\n  }; // 유틸 아이템을 화면에서 삭제\n\n\n  var deleteItemById =\n  /*#__PURE__*/\n  function () {\n    var _ref13 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9(id) {\n      var targetItem, result;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              allTooltipsHide();\n              targetItem = getItemById(id);\n\n              if (!(targetItem.type === GuestTypeAdd.BLOCK)) {\n                _context9.next = 9;\n                break;\n              }\n\n              _context9.next = 5;\n              return deleteBlockMu({\n                variables: {\n                  blockId: id\n                }\n              });\n\n            case 5:\n              result = _context9.sent;\n\n              if (!muResult(result, \"DeleteBlock \")) {\n                setGuestValue(_toConsumableArray(guestValue.filter(function (guest) {\n                  return guest.id !== id;\n                })));\n              }\n\n              _context9.next = 10;\n              break;\n\n            case 9:\n              setGuestValue(_toConsumableArray(guestValue.filter(function (guest) {\n                return guest.id !== id;\n              })));\n\n            case 10:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function deleteItemById(_x18) {\n      return _ref13.apply(this, arguments);\n    };\n  }(); // create 툴팁 오픈\n  // const openCreateMenu: TOpenCreateMenu = (e, createMenuProp) => {\n  // if (createMenuProp) setCreateMenuProps(createMenuProp);\n  // $(\"#createMenu\")\n  // .css(\"left\", e.clientX)\n  // .css(\"top\", e.clientY)\n  // .addClass(\"assig__tooltips--show\");\n  // };\n  // 배정달력에서 게스트들 정보를, GetBooking_Guest로 변환합니다.\n  // 아래작업은 createBooking을 하기위한 초석입니다.\n\n\n  var itemsToGuets = function itemsToGuets(items, groupDatas) {\n    return (// @ts-ignore\n      items.map(function (item) {\n        var itemGroup = groupDatas.find(function (group) {\n          return group.id === item.group;\n        });\n        if (!itemGroup) throw Error(\"itemsToGuests ERR 존재하지 않는 그룹 ID\");\n        return {\n          roomTypeName: \"Booking\",\n          _id: item.id,\n          room: itemGroup.room,\n          bedIndex: item.bedIndex,\n          gender: itemGroup.pricingType === PricingType.DOMITORY ? item.gender : undefined,\n          pricingType: itemGroup.pricingType,\n          checkIn: item.start,\n          checkOut: item.end,\n          roomType: {\n            __typename: \"RoomType\",\n            _id: item.roomTypeId,\n            name: itemGroup.roomType.name\n          }\n        };\n      })\n    );\n  }; // 게스트들 정보를, GetBooking_Guest로 변환합니다.\n  // 아래작업은 createBooking을 하기위한 초석입니다.\n\n\n  var groupToRoomType = function groupToRoomType(createItemTempGroups) {\n    var uniquRoomTypes = _.uniqBy(createItemTempGroups, function (group) {\n      return group.roomTypeId;\n    });\n\n    return uniquRoomTypes.map(function (group) {\n      return _objectSpread({}, DEFAULT_ROOMTYPE, group.roomType);\n    });\n  }; // 👼 컴포넌트들 내부에 prop를 전달하기 힘드니까 이렇게 전달하자.\n\n\n  var assigUtils = {\n    changeMarkToGhost: changeMarkToGhost,\n    getItemById: getItemById,\n    getGroupById: getGroupById,\n    removeMark: removeMark,\n    getInfoesFromMarks: getInfoesFromMarks,\n    isTherePerson: isTherePerson,\n    filterTimeZone: filterTimeZone,\n    itemsToGuets: itemsToGuets,\n    groupToRoomType: groupToRoomType,\n    allTooltipsHide: allTooltipsHide,\n    deleteItemById: deleteItemById,\n    // openCreateMenu,\n    isGenderSafe: isGenderSafe,\n    getGuestsByBookingId: getGuestsByBookingId,\n    addBlock: addBlock,\n    allocateGuest: allocateGuest,\n    allocateItem: allocateItem,\n    resizeBlockBlock: resizeBlockBlock,\n    genderToggleById: genderToggleById,\n    resizeValidater: resizeValidater,\n    bookingCheckedNew: bookingCheckedNew,\n    resizeLinkedItems: resizeLinkedItems,\n    moveLinkedItems: moveLinkedItems,\n    toogleCheckInOut: toogleCheckInOut,\n    openBlockMenu: openBlockMenu,\n    openCanvasMenuTooltip: openCanvasMenuTooltip,\n    createMark: createMark,\n    getAssigInfoFromItems: getAssigInfoFromItems,\n    deleteBookingById: deleteBookingById,\n    getGuestsInGroup: getGuestsInGroup,\n    popUpItemMenuTooltip: popUpItemMenuTooltip,\n    getBookingIdByGuestId: getBookingIdByGuestId,\n    startBookingModalWithMark: startBookingModalWithMark,\n    hilightGuestBlock: hilightGuestBlock,\n    hilightHeader: hilightHeader,\n    deleteGhost: deleteGhost,\n    createCreateItem: createCreateItem,\n    getItems: getItems\n  };\n  return assigUtils;\n}","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/bookingHost/assig/helpers/assigUtils.tsx"],"names":["_","GuestTypeAdd","onCompletedMessage","muResult","targetBlink","JDscrollTo","s4","isEmpty","ReactTooltip","RoomGender","Gender","PricingType","DEFAULT_ASSIG_ITEM","DEFAULT_ROOMTYPE","DEFAULT_BOOKING","$","JDisNetworkRequestInFlight","LANG","getAssigUtils","setGuestValue","guestValue","setBlockMenuProps","bookingModal","confirmModalHook","allocateMu","deleteGuestsMu","createBlockMu","deleteBlockMu","deleteBookingMu","updateBookingMu","networkStatus","refetch","houseId","groupData","removeMark","console","info","filter","item","type","MARK","deleteGhost","GHOST","getItemById","guestId","targetGuest","find","guest","id","Error","getAssigInfoFromItems","items","temp","map","group","getGroupById","bedIndex","roomId","gender","groupId","targetGroup","bookingCheckedNew","bookingId","targets","getGuestsByBookingId","forEach","target","showNewBadge","popUpItemMenuTooltip","location","allTooltipsHide","BLOCK","openBlockMenu","hilightGuestBlock","itemId","scrollMove","targetDom","length","setTimeout","isTherePerson","startTime","endTime","atTimeGuests","filterTimeZone","atTimePlaceGuests","inGuest","from","to","start","end","toogleCheckInOut","itemIndex","undefined","variables","params","checkInInfo","isIn","result","data","message","UpdateBooking","ok","updateGuests","except","hide","removeClass","isGenderSafe","roomType","roomGender","ANY","MALE","FEMALE","SEPARATELY","atTimeRoomGuests","crushGendersGuests","createMark","groupIds","filteredGuestValue","i","push","roomTypeId","canSelect","deleteBookingById","confirm","callBackFn","flag","DeleteBooking","openModal","txt","callBack","getBookingIdByGuestId","getGuestsInGroup","resizeBlockBlock","time","guestValueOriginCopy","extend","checkOut","checkIn","newBlock","allocateItem","newGroupOrder","GUEST","allocateGuest","newGroupId","allocateInfo","reload","addBlock","tempNewBlocks","tempId","tempItem","canMove","loading","withOutMarks","withTempBlocks","block","genderToggleById","resizeValidater","linkedGuests","resizeLinkedItems","newTime","moveLinkedItems","blockMenuProps","css","clientX","clientY","addClass","startBookingModalWithMark","startBookingCallBack","createItems","getItems","createItemTempGroups","roomTypes","groupToRoomType","createTempGuests","itemsToGuets","createParam","__typename","_id","agreePrivacyPolicy","guests","modalParam","mode","changeMarkToGhost","createBlock","createCreateItem","canvasInfo","linkedItems","getTime","tempItems","openCanvasMenuTooltip","hilightHeader","date","getInfoesFromMarks","marks","mark","deleteItemById","targetItem","blockId","groupDatas","itemGroup","roomTypeName","room","pricingType","DOMITORY","name","uniquRoomTypes","uniqBy","assigUtils"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\r\nimport {\r\n  TRemoveMark,\r\n  TGetItemById,\r\n  TGetGroupById,\r\n  TIsTherePerson,\r\n  TFilterTimeZone,\r\n  TAllTooltipsHide,\r\n  TIsGenderSafe,\r\n  TAddBlock,\r\n  TGenderToggleById,\r\n  TResizeValidater,\r\n  TResizeLinkedItems,\r\n  TMoveLinkedItems,\r\n  TDeleteItemById,\r\n  GuestTypeAdd,\r\n  IAssigTimelineUtils,\r\n  IAssigDataControl,\r\n  IAssigTimelineContext,\r\n  IAssigTimelineHooks,\r\n  IAssigItem,\r\n  TToogleCheckIn,\r\n  TOpenCanvasMenuTooltip,\r\n  TOpenBlockMenu,\r\n  TCreateMark,\r\n  TDeleteBookingById,\r\n  TGetBookingIdByGuestId,\r\n  TResizeBlockBlock,\r\n  TAllocateItem,\r\n  TAllocateGuest,\r\n  TPopUpItemMenuTooltip,\r\n  IGetGuestByBookingId,\r\n  THilightGuestBlock,\r\n  TBookingCheckedNew,\r\n  IAssigGroup,\r\n  TDleteGhost,\r\n  TGetAssigInfoFromItems,\r\n  IAssigInfo,\r\n  TGetGuestsInGroup,\r\n  ICanvasMenuTooltipProps,\r\n  ICreateCreateItem,\r\n  TChangeMarkToGhost,\r\n  TGetInfoesFromMarks,\r\n  THilightHeader\r\n} from \"./assigIntrerface\";\r\nimport {\r\n  onCompletedMessage,\r\n  muResult,\r\n  targetBlink,\r\n  JDscrollTo,\r\n  s4,\r\n  isEmpty\r\n} from \"../../../../utils/utils\";\r\nimport { ReactTooltip } from \"../../../../atoms/tooltipList/TooltipList\";\r\nimport { RoomGender, Gender, PricingType } from \"../../../../types/enum\";\r\nimport {\r\n  DEFAULT_ASSIG_ITEM,\r\n  DEFAULT_ROOMTYPE,\r\n  DEFAULT_BOOKING\r\n} from \"../../../../types/defaults\";\r\nimport $ from \"jquery\";\r\nimport {\r\n  createBlock_CreateBlock_block,\r\n  getBooking_GetBooking_booking_roomTypes,\r\n  getBooking_GetBooking_booking_guests\r\n} from \"../../../../types/api\";\r\nimport JDisNetworkRequestInFlight from \"../../../../utils/netWorkStatusToast\";\r\nimport {\r\n  GB_booking,\r\n  TBookingModalOpenWithMark\r\n} from \"../../../../types/interface\";\r\nimport { LANG } from \"../../../../hooks/hook\";\r\nimport { IBookingModalProp } from \"../../../../components/bookingModal/declaration\";\r\n\r\nexport function getAssigUtils(\r\n  {\r\n    setGuestValue,\r\n    guestValue,\r\n    setBlockMenuProps,\r\n    bookingModal,\r\n    confirmModalHook\r\n  }: IAssigTimelineHooks,\r\n  {\r\n    allocateMu,\r\n    deleteGuestsMu,\r\n    createBlockMu,\r\n    deleteBlockMu,\r\n    deleteBookingMu,\r\n    updateBookingMu,\r\n    networkStatus,\r\n    refetch\r\n  }: IAssigDataControl,\r\n  { houseId, groupData }: IAssigTimelineContext\r\n): IAssigTimelineUtils {\r\n  // 마크제거 MARK REMOVE 마커 제거\r\n  const removeMark: TRemoveMark = () => {\r\n    console.info(\"removeMark\");\r\n    setGuestValue([\r\n      ...guestValue.filter(item => item.type !== GuestTypeAdd.MARK)\r\n    ]);\r\n  };\r\n\r\n  const deleteGhost: TDleteGhost = () => {\r\n    console.info(\"deleteGhost\");\r\n    setGuestValue([\r\n      ...guestValue.filter(item => item.type !== GuestTypeAdd.GHOST)\r\n    ]);\r\n  };\r\n\r\n  // TODO\r\n  // const getItemByTypes\r\n\r\n  const getItemById: TGetItemById = guestId => {\r\n    const targetGuest = guestValue.find(guest => guest.id === guestId);\r\n    if (!targetGuest)\r\n      throw new Error(\"해당하는 게스트를 찾을수 없습니다. <<getItemById>>\");\r\n    return targetGuest;\r\n  };\r\n\r\n  const getAssigInfoFromItems: TGetAssigInfoFromItems = items => {\r\n    const temp = items\r\n      .map(\r\n        (item): IAssigInfo => {\r\n          const group = getGroupById(item.group);\r\n          return {\r\n            bedIndex: group.bedIndex!,\r\n            roomId: group.roomId,\r\n            gender: item.gender\r\n          };\r\n        }\r\n      )\r\n      .filter(group => group.bedIndex !== -1);\r\n\r\n    return temp;\r\n  };\r\n\r\n  const getGroupById: TGetGroupById = groupId => {\r\n    const targetGroup = groupData.find(group => group.id === groupId);\r\n    if (!targetGroup)\r\n      throw new Error(\"해당하는 그룹을 찾을수 없습니다. <<getGroupById>>\");\r\n    return targetGroup;\r\n  };\r\n\r\n  const bookingCheckedNew: TBookingCheckedNew = bookingId => {\r\n    const targets = getGuestsByBookingId(bookingId);\r\n    targets.forEach(target => (target.showNewBadge = false));\r\n    setGuestValue([...guestValue]);\r\n  };\r\n\r\n  const popUpItemMenuTooltip: TPopUpItemMenuTooltip = async (\r\n    location: { clientX: number; clientY: number },\r\n    target: IAssigItem\r\n  ) => {\r\n    await allTooltipsHide();\r\n    await removeMark();\r\n\r\n    if (target.type === GuestTypeAdd.BLOCK) {\r\n      await openBlockMenu(location, { item: target });\r\n    }\r\n  };\r\n\r\n  // 추가되는 블록을 하일라이팅 해줍니다.\r\n  // 아이템 아이디 또는 부킹아이디로 지정가능합니다.\r\n  const hilightGuestBlock: THilightGuestBlock = ({\r\n    itemId,\r\n    bookingId,\r\n    scrollMove\r\n  }) => {\r\n    let targetDom;\r\n    if (itemId) {\r\n      targetDom = $(`#assigItem--item${itemId}`);\r\n    } else {\r\n      targetDom = $(`.assigItem--booking${bookingId}`);\r\n    }\r\n\r\n    if (!targetDom || targetDom.length === 0) {\r\n      setTimeout(() => {\r\n        hilightGuestBlock({ itemId, bookingId });\r\n      }, 1000);\r\n      return;\r\n    }\r\n\r\n    targetBlink(targetDom);\r\n    if (scrollMove) {\r\n      JDscrollTo(targetDom, $(`.rct-scroll`));\r\n    }\r\n  };\r\n\r\n  // 유틸 사람이 그장소에 그시간대에 있다면 충돌시간을 주고 아니면 false를 줌\r\n  const isTherePerson: TIsTherePerson = (\r\n    startTime,\r\n    endTime,\r\n    groupId,\r\n    guest\r\n  ) => {\r\n    const atTimeGuests = filterTimeZone(startTime, endTime);\r\n    const atTimePlaceGuests = atTimeGuests.filter(\r\n      inGuest => inGuest.group === groupId\r\n    );\r\n    // 자기자신이 포함됨니다..\r\n    if (atTimePlaceGuests.length > 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // 유틸 from 과 to 사이에 있는 모든 아이템을 찾습니다.\r\n  // 옵션으로 roomId 까지 필터가능\r\n  const filterTimeZone: TFilterTimeZone = (from, to, roomId) => {\r\n    if (!roomId) {\r\n      return guestValue.filter(\r\n        guest =>\r\n          (guest.start >= from && guest.start < to) ||\r\n          (guest.end > from && guest.end <= to) ||\r\n          (guest.end === from && guest.end === to)\r\n      );\r\n    }\r\n    return guestValue.filter(\r\n      guest =>\r\n        (guest.start >= from && guest.start < to) ||\r\n        (guest.end > from && guest.end <= to) ||\r\n        (guest.end === from && guest.end === to)\r\n    );\r\n  };\r\n\r\n  // 체크인 투글함수\r\n  // 게스트인덱스는 쓰지않는게 좋음\r\n  const toogleCheckInOut: TToogleCheckIn = async (\r\n    guestId?: string,\r\n    itemIndex?: number\r\n  ) => {\r\n    if (JDisNetworkRequestInFlight(networkStatus)) return;\r\n    let target: IAssigItem = DEFAULT_ASSIG_ITEM;\r\n\r\n    if (itemIndex !== undefined) {\r\n      target = guestValue[itemIndex];\r\n    } else if (guestId) {\r\n      const temp = guestValue.find(guest => guest.id === guestId);\r\n      if (temp) target = temp;\r\n    }\r\n\r\n    const result = await updateBookingMu({\r\n      variables: {\r\n        bookingId: target.bookingId,\r\n        params: {\r\n          checkInInfo: {\r\n            isIn: !guestValue[target.itemIndex].checkInInfo\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // 아폴로 통신 성공\r\n    if (result && result.data) {\r\n      const message = guestValue[target.itemIndex].checkInInfo\r\n        ? LANG(\"checkOut\")\r\n        : LANG(\"checkIn\");\r\n      onCompletedMessage(\r\n        result.data.UpdateBooking,\r\n        message,\r\n        LANG(\"checkin_change_fail\")\r\n      );\r\n      if (result.data.UpdateBooking.ok) {\r\n        // 뮤테이션 성공시\r\n\r\n        const updateGuests = guestValue.map(guest => {\r\n          if (guest.bookingId === target.bookingId) {\r\n            guest.checkInInfo = !guest.checkInInfo;\r\n          }\r\n          return guest;\r\n        });\r\n\r\n        setGuestValue([...updateGuests]);\r\n      } else {\r\n        // 뮤테이션 실패시\r\n      }\r\n    }\r\n  };\r\n\r\n  // 모든 툴팁을 팝업에서 제거\r\n  const allTooltipsHide: TAllTooltipsHide = except => {\r\n    ReactTooltip.hide();\r\n    if (except !== \"blockMenu\")\r\n      $(\"#blockMenu\").removeClass(\"assig__tooltips--show\");\r\n    if (except !== \"canvasMenu\")\r\n      $(\"#canvasMenu\").removeClass(\"assig__tooltips--show\");\r\n    if (except !== \"createMenu\")\r\n      $(\"#createMenu\").removeClass(\"assig__tooltips--show\");\r\n    if (except !== \"itemTooltip\")\r\n      $(\"#itemTooltip\").removeClass(\"assig__tooltips--show\");\r\n  };\r\n\r\n  // 유틸 두게스트의 충돌시간 구해줌 없다면 false를 반환함\r\n  // const getCrushTimeByTwoGuest: TGetCrushTimeByTwoGuest = (guest, guest2) => {\r\n  //   const minEnd = guest.end < guest2.end ? guest.end : guest2.end;\r\n  //   const minStart = guest.start < guest2.start ? guest.start : guest2.start;\r\n  //   if (minStart >= minEnd) return false;\r\n  //   return {\r\n  //     crushGuest: guest.id,\r\n  //     crushGuest2: guest2.id,\r\n  //     itemIndex: guest.itemIndex,\r\n  //     start: minStart,\r\n  //     end: minEnd\r\n  //   };\r\n  // };\r\n\r\n  // 유틸 성별이 맞는지 검사하고 결과가 맞지않다면 CrushTime을 반환합니다.\r\n  // targetGroup과 start end에 이동하고자하는 위치 또는 자신의 위치를 넣어서 해당 구간및 장소에\r\n  // 성별이 안전한지 판별합니다.\r\n  const isGenderSafe: TIsGenderSafe = (targetGroup, item, start, end) => {\r\n    // 성별검사\r\n    if (targetGroup.roomType.roomGender === RoomGender.ANY) {\r\n      return true;\r\n    }\r\n    if (targetGroup.roomType.roomGender === RoomGender.MALE) {\r\n      return item.gender === Gender.MALE;\r\n    }\r\n    if (targetGroup.roomType.roomGender === RoomGender.FEMALE) {\r\n      return item.gender === Gender.FEMALE;\r\n    }\r\n    if (targetGroup.roomType.roomGender === RoomGender.SEPARATELY) {\r\n      const atTimeRoomGuests = filterTimeZone(start, end, targetGroup.roomId);\r\n      const crushGendersGuests = atTimeRoomGuests.filter(\r\n        guest => guest.gender !== item.gender\r\n      );\r\n      return crushGendersGuests ? false : true;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // 유틸 그자리에 마크를 생성\r\n  const createMark: TCreateMark = (\r\n    start: number,\r\n    end: number,\r\n    groupIds: string[]\r\n  ) => {\r\n    console.info(\"createMark\");\r\n    // TODO 시프트로 할려면 특별한 장치가 필요할것같다.\r\n    const filteredGuestValue = guestValue.filter(\r\n      guest => guest.type !== GuestTypeAdd.MARK\r\n    );\r\n\r\n    groupIds.forEach((id, i) => {\r\n      const group = getGroupById(id);\r\n      filteredGuestValue.push({\r\n        ...DEFAULT_ASSIG_ITEM,\r\n        roomTypeId: group.roomTypeId,\r\n        bedIndex: group.bedIndex,\r\n        roomId: group.roomId,\r\n        itemIndex: guestValue.length + i + 1,\r\n        id: `mark${id}${start}`,\r\n        type: GuestTypeAdd.MARK,\r\n        start: start,\r\n        end: end,\r\n        canSelect: false,\r\n        group: id\r\n      });\r\n    });\r\n\r\n    setGuestValue([...filteredGuestValue]);\r\n  };\r\n\r\n  const getGuestsByBookingId: IGetGuestByBookingId = (bookingId: string) =>\r\n    guestValue.filter(guest => guest.bookingId === bookingId);\r\n\r\n  // 예약을 예약 아이디로 삭제\r\n  const deleteBookingById: TDeleteBookingById = async (bookingId, confirm) => {\r\n    // 예약 삭제 진행\r\n    const callBackFn = async (flag: boolean) => {\r\n      if (flag) {\r\n        const result = await deleteBookingMu({\r\n          variables: {\r\n            bookingId\r\n          }\r\n        });\r\n\r\n        if (result && result.data && result.data.DeleteBooking.ok) {\r\n          setGuestValue(\r\n            guestValue.filter(guest => guest.bookingId !== bookingId)\r\n          );\r\n        }\r\n      }\r\n    };\r\n\r\n    // 확인메시지 출력여부\r\n    if (!confirm) callBackFn(true);\r\n    else {\r\n      confirmModalHook.openModal({\r\n        txt: LANG(\"are_you_sure_you_want_to_delete_the_reservation\"),\r\n        callBack: callBackFn\r\n      });\r\n    }\r\n  };\r\n\r\n  //  예약아이디를 게스트아이디로 찾음\r\n  const getBookingIdByGuestId: TGetBookingIdByGuestId = (\r\n    guestId: string\r\n  ): string => {\r\n    const target = guestValue.find(guest => guest.id === guestId);\r\n    if (!target) {\r\n      throw Error(\"guestId not exist :: getBookingByGuestId\");\r\n    }\r\n    return target.bookingId;\r\n  };\r\n\r\n  const getGuestsInGroup: TGetGuestsInGroup = (group: IAssigGroup) =>\r\n    guestValue.filter(guest => guest.group === group.id);\r\n\r\n  // 게스트가 그 시간대에 그 그룹에 괺찮은지 검사함\r\n  // 검사한 결과를 Validation에 기입.\r\n\r\n  const resizeBlockBlock: TResizeBlockBlock = async (\r\n    targetGuest: IAssigItem,\r\n    time: number\r\n  ) => {\r\n    const guestValueOriginCopy = $.extend(true, [], guestValue);\r\n\r\n    targetGuest.end = time;\r\n    setGuestValue([...guestValue]);\r\n\r\n    const result = await createBlockMu({\r\n      variables: {\r\n        bedIndex: targetGuest.bedIndex,\r\n        checkOut: time,\r\n        houseId: houseId,\r\n        roomId: targetGuest.roomId,\r\n        checkIn: targetGuest.start\r\n      }\r\n    });\r\n\r\n    // 에러처리\r\n    const newBlock: any = muResult<createBlock_CreateBlock_block>(\r\n      result,\r\n      \"CreateBlock\",\r\n      \"block\"\r\n    );\r\n    if (typeof newBlock !== \"boolean\") {\r\n      // setGuestValue([...guestValueOriginCopy,]);\r\n    } else {\r\n      setGuestValue([...guestValueOriginCopy]);\r\n    }\r\n  };\r\n\r\n  const allocateItem: TAllocateItem = async (\r\n    targetGuest: IAssigItem,\r\n    newGroupOrder: number\r\n  ) => {\r\n    const guestValueOriginCopy = $.extend(true, [], guestValue);\r\n\r\n    targetGuest.group = groupData[newGroupOrder].id;\r\n    setGuestValue([...guestValue]);\r\n\r\n    // 배정 뮤테이션을 발생\r\n    if (targetGuest.type === GuestTypeAdd.GUEST) {\r\n      allocateGuest(targetGuest.id, newGroupOrder, guestValueOriginCopy);\r\n    }\r\n  };\r\n\r\n  const allocateGuest: TAllocateGuest = async (\r\n    itemId: string,\r\n    newGroupOrder: number,\r\n    guestValueOriginCopy?: IAssigItem[]\r\n  ) => {\r\n    if (JDisNetworkRequestInFlight(networkStatus)) return;\r\n    const group = groupData[newGroupOrder];\r\n    const newGroupId = group.roomId;\r\n    const result = await allocateMu({\r\n      variables: {\r\n        guestId: itemId,\r\n        allocateInfo: {\r\n          bedIndex: group.bedIndex,\r\n          roomId: newGroupId\r\n        }\r\n      }\r\n    });\r\n    // 실패하면 전부 되돌림\r\n\r\n    // 👿 이반복을 함수 if 로 만들면 어떨까?\r\n    if (!muResult(result, \"AllocateGuestToRoom\"))\r\n      if (guestValueOriginCopy) {\r\n        setGuestValue([...guestValueOriginCopy]);\r\n      } else {\r\n        location.reload();\r\n      }\r\n  };\r\n\r\n  // 방막기\r\n  const addBlock: TAddBlock = async (start, end, groupIds) => {\r\n    console.info(\"addBlock\");\r\n    if (JDisNetworkRequestInFlight(networkStatus)) return;\r\n    allTooltipsHide();\r\n    const guestValueOriginCopy = $.extend(true, [], guestValue);\r\n\r\n    const tempNewBlocks: IAssigItem[] = [];\r\n\r\n    // 새로운 방막기들을 생성함\r\n    groupIds.forEach(groupId => {\r\n      const targetGroup = groupData.find(group => group.id === groupId);\r\n      if (!targetGroup) throw Error(\"그룹 아이디가 그룹데이터안에 없습니다.\");\r\n      const tempId = s4();\r\n      const tempItem = {\r\n        ...DEFAULT_ASSIG_ITEM,\r\n        bookingId: s4(),\r\n        roomId: targetGroup.roomId,\r\n        bedIndex: targetGroup.bedIndex,\r\n        itemIndex: guestValueOriginCopy.length,\r\n        type: GuestTypeAdd.GHOST,\r\n        id: tempId,\r\n        start,\r\n        end,\r\n        group: groupId,\r\n        canMove: false,\r\n        loading: true\r\n      };\r\n      tempNewBlocks.push(tempItem);\r\n    });\r\n\r\n    const withOutMarks = guestValue.filter(\r\n      item => item.type != GuestTypeAdd.MARK\r\n    );\r\n\r\n    const withTempBlocks = [...withOutMarks, ...tempNewBlocks];\r\n\r\n    setGuestValue([...withTempBlocks]);\r\n\r\n    let i = 0;\r\n\r\n    for (let groupId of groupIds) {\r\n      const targetGroup = getGroupById(groupId);\r\n      const result = await createBlockMu({\r\n        variables: {\r\n          checkIn: start,\r\n          checkOut: end,\r\n          houseId: houseId,\r\n          roomId: targetGroup.roomId,\r\n          bedIndex: targetGroup.bedIndex\r\n        }\r\n      });\r\n\r\n      const block = muResult<createBlock_CreateBlock_block>(\r\n        result,\r\n        \"CreateBlock\",\r\n        \"block\"\r\n      );\r\n\r\n      if (typeof block === \"boolean\") {\r\n        setGuestValue(guestValueOriginCopy);\r\n      } else {\r\n      }\r\n      i++;\r\n    }\r\n    refetch();\r\n  };\r\n\r\n  // Id 로 게스트 찾아서 투글해주는 함수\r\n  const genderToggleById: TGenderToggleById = guestId => {\r\n    const targetGuest = getItemById(guestId);\r\n    if (targetGuest)\r\n      targetGuest.gender =\r\n        targetGuest.gender === Gender.FEMALE ? Gender.MALE : Gender.FEMALE;\r\n    setGuestValue([...guestValue]);\r\n  };\r\n\r\n  // 유틸 리사이즈 되었을때 벨리데이션 해줍니다.\r\n  const resizeValidater: TResizeValidater = (item, time) => {\r\n    const linkedGuests = guestValue.filter(\r\n      guest => guest.bookingId === item.bookingId\r\n    );\r\n  };\r\n\r\n  // 같은 예약자가 예약한 게스트들을 한번에 변경\r\n  const resizeLinkedItems: TResizeLinkedItems = (bookingId, newTime) => {\r\n    // TODO 여기서 State를통하여 조작할수 있도록하자\r\n    guestValue.forEach(guest => {\r\n      const inGuest = guest;\r\n      if (guest.bookingId === bookingId) inGuest.end = newTime;\r\n    });\r\n    setGuestValue([...guestValue]);\r\n  };\r\n\r\n  // 같은 예약자가 예약한 게스트들을 한번에 이동\r\n  const moveLinkedItems: TMoveLinkedItems = (bookingId, newTime) => {\r\n    guestValue.forEach(guest => {\r\n      const inGuest = guest;\r\n      if (guest.bookingId === bookingId) {\r\n        inGuest.end += newTime - guest.start;\r\n        inGuest.start = newTime;\r\n      }\r\n    });\r\n    setGuestValue([...guestValue]);\r\n  };\r\n\r\n  // block 용 메뉴오픈\r\n  const openBlockMenu: TOpenBlockMenu = (location, blockMenuProps) => {\r\n    if (blockMenuProps) {\r\n      setBlockMenuProps(blockMenuProps);\r\n    }\r\n\r\n    $(\"#blockMenu\")\r\n      .css(\"left\", location.clientX)\r\n      .css(\"top\", location.clientY)\r\n      .addClass(\"assig__tooltips--show\");\r\n  };\r\n\r\n  // 마크와함께 부킹시작\r\n  const startBookingModalWithMark: TBookingModalOpenWithMark = startBookingCallBack => {\r\n    const createItems = getItems(GuestTypeAdd.MARK);\r\n\r\n    // 아이템들의 그룹들\r\n    const createItemTempGroups = createItems.map(item =>\r\n      getGroupById(item.group)\r\n    );\r\n    // 아이템들의 룸타입들\r\n    const roomTypes = groupToRoomType(createItemTempGroups);\r\n\r\n    // 모달로 보낼 게스트들집합\r\n    const createTempGuests = itemsToGuets(createItems, groupData);\r\n\r\n    // 모달안에 넣어줄 새로만들 부킹정보\r\n    const createParam: GB_booking = {\r\n      __typename: \"Booking\",\r\n      ...DEFAULT_BOOKING,\r\n      _id: s4(),\r\n      checkIn: createItems[0].start,\r\n      checkOut: createItems[0].end,\r\n      agreePrivacyPolicy: true,\r\n      guests: createTempGuests,\r\n      roomTypes\r\n    };\r\n\r\n    const modalParam: IBookingModalProp = {\r\n      createParam,\r\n      startBookingCallBack,\r\n      mode: \"CREATE_ASSIG\"\r\n    };\r\n\r\n    bookingModal.openModal(modalParam);\r\n  };\r\n\r\n  // create블러들을 ghost로 변환\r\n  const changeMarkToGhost: TChangeMarkToGhost = () => {\r\n    const createBlock = guestValue.filter(\r\n      guest => guest.type === GuestTypeAdd.MARK\r\n    );\r\n    createBlock.forEach(createBlock => {\r\n      createBlock.loading = true;\r\n      createBlock.type = GuestTypeAdd.GHOST;\r\n    });\r\n    setGuestValue([...guestValue]);\r\n  };\r\n\r\n  const createCreateItem: ICreateCreateItem = (\r\n    canvasInfo: ICanvasMenuTooltipProps,\r\n    gender?: Gender\r\n  ) => {\r\n    allTooltipsHide();\r\n    const { end, start, groupIds } = canvasInfo;\r\n\r\n    // 시간이 같고 타입이 Create인 것들을 하나의 부킹으로 묶음\r\n    let linkedItems = guestValue.filter(\r\n      item =>\r\n        item.type === GuestTypeAdd.MARK &&\r\n        item.start <= start &&\r\n        item.end >= end\r\n    );\r\n\r\n    // 생성된 Create들의 시간을 하나로 통일하기 위한 함수\r\n    const getTime = (flag: \"start\" | \"end\") => {\r\n      if (!linkedItems[0]) return canvasInfo[flag];\r\n      if (linkedItems[0].start <= start && linkedItems[0].end >= end)\r\n        return linkedItems[0][flag];\r\n      return canvasInfo[flag];\r\n    };\r\n\r\n    const tempItems: IAssigItem[] = [];\r\n\r\n    // 그룹아이디를 토데로 새로운 아이템 목록 생성\r\n    // groupIds.forEach(groupId => {\r\n    //   const group = getGroupById(groupId);\r\n    //   const newItem = {\r\n    //     ...DEFAULT_ASSIG_ITEM,\r\n    //     roomTypeId: group.roomTypeId,\r\n    //     room: group.roomId,\r\n    //     bookingId: \"create\",\r\n    //     id: `create${groupId}${start}${s4()}`,\r\n    //     gender:\r\n    //       gender || roomGenderToGedner(group.roomGender, group.pricingType),\r\n    //     type: GuestTypeAdd.MAKE,\r\n    //     start: getTime(\"start\"),\r\n    //     end: getTime(\"end\"),\r\n    //     group: groupId\r\n    //   };\r\n    //   tempItems.push(newItem);\r\n    // });\r\n\r\n    linkedItems = [...linkedItems, ...tempItems];\r\n\r\n    $(\"#canvasMenu\").removeClass(\"canvasMenu--show\");\r\n\r\n    setGuestValue([\r\n      ...guestValue.filter(item => item.type !== GuestTypeAdd.MARK),\r\n      ...linkedItems\r\n    ]);\r\n\r\n    // setCreateMenuProps({item: newItem});\r\n  };\r\n\r\n  // canvas 용 메뉴오픈\r\n  const openCanvasMenuTooltip: TOpenCanvasMenuTooltip = location => {\r\n    $(\"#canvasMenu\")\r\n      .css(\"left\", location.clientX + 10)\r\n      .css(\"top\", location.clientY + 5)\r\n      .addClass(\"assig__tooltips--show\");\r\n  };\r\n\r\n  const hilightHeader: THilightHeader = (date?: Date | null) => {\r\n    // if (!date) return;\r\n    // const time =\r\n    // moment(date)\r\n    // .local()\r\n    // .valueOf() -\r\n    // TimePerMs.H * 3;\r\n    // const target = $(`.timelineHeaderCell__inner[data-start=\"${time}\"]`);\r\n    // targetBlink(target.parent());\r\n  };\r\n\r\n  const getItems = (type: GuestTypeAdd) =>\r\n    guestValue.filter(guest => guest.type === GuestTypeAdd[type]);\r\n\r\n  const getInfoesFromMarks: TGetInfoesFromMarks = () => {\r\n    const marks = getItems(GuestTypeAdd.MARK);\r\n    if (isEmpty(marks))\r\n      return {\r\n        start: 0,\r\n        end: 0,\r\n        groupIds: []\r\n      };\r\n    const groupIds = marks.map(mark => mark.group);\r\n    const { start, end } = marks[0];\r\n    return {\r\n      start,\r\n      end,\r\n      groupIds\r\n    };\r\n  };\r\n  // 유틸 아이템을 화면에서 삭제\r\n  const deleteItemById: TDeleteItemById = async id => {\r\n    allTooltipsHide();\r\n    const targetItem = getItemById(id);\r\n    if (targetItem.type === GuestTypeAdd.BLOCK) {\r\n      const result = await deleteBlockMu({\r\n        variables: {\r\n          blockId: id\r\n        }\r\n      });\r\n      if (!muResult(result, \"DeleteBlock \")) {\r\n        setGuestValue([...guestValue.filter(guest => guest.id !== id)]);\r\n      }\r\n    } else {\r\n      setGuestValue([...guestValue.filter(guest => guest.id !== id)]);\r\n    }\r\n  };\r\n\r\n  // create 툴팁 오픈\r\n  // const openCreateMenu: TOpenCreateMenu = (e, createMenuProp) => {\r\n  // if (createMenuProp) setCreateMenuProps(createMenuProp);\r\n  // $(\"#createMenu\")\r\n  // .css(\"left\", e.clientX)\r\n  // .css(\"top\", e.clientY)\r\n  // .addClass(\"assig__tooltips--show\");\r\n  // };\r\n\r\n  // 배정달력에서 게스트들 정보를, GetBooking_Guest로 변환합니다.\r\n  // 아래작업은 createBooking을 하기위한 초석입니다.\r\n  const itemsToGuets = (\r\n    items: IAssigItem[],\r\n    groupDatas: IAssigGroup[]\r\n  ): getBooking_GetBooking_booking_guests[] =>\r\n    // @ts-ignore\r\n    items.map(item => {\r\n      const itemGroup = groupDatas.find(group => group.id === item.group);\r\n      if (!itemGroup) throw Error(\"itemsToGuests ERR 존재하지 않는 그룹 ID\");\r\n\r\n      return {\r\n        roomTypeName: \"Booking\",\r\n        _id: item.id,\r\n        room: itemGroup.room,\r\n        bedIndex: item.bedIndex,\r\n        gender:\r\n          itemGroup.pricingType === PricingType.DOMITORY\r\n            ? item.gender\r\n            : undefined,\r\n        pricingType: itemGroup.pricingType,\r\n        checkIn: item.start,\r\n        checkOut: item.end,\r\n        roomType: {\r\n          __typename: \"RoomType\",\r\n          _id: item.roomTypeId,\r\n          name: itemGroup.roomType.name\r\n        }\r\n      };\r\n    });\r\n\r\n  // 게스트들 정보를, GetBooking_Guest로 변환합니다.\r\n  // 아래작업은 createBooking을 하기위한 초석입니다.\r\n  const groupToRoomType = (\r\n    createItemTempGroups: IAssigGroup[]\r\n  ): getBooking_GetBooking_booking_roomTypes[] => {\r\n    const uniquRoomTypes = _.uniqBy(\r\n      createItemTempGroups,\r\n      group => group.roomTypeId\r\n    );\r\n\r\n    return uniquRoomTypes.map(\r\n      (group): getBooking_GetBooking_booking_roomTypes => ({\r\n        ...DEFAULT_ROOMTYPE,\r\n        ...group.roomType\r\n      })\r\n    );\r\n  };\r\n\r\n  // 👼 컴포넌트들 내부에 prop를 전달하기 힘드니까 이렇게 전달하자.\r\n  const assigUtils: IAssigTimelineUtils = {\r\n    changeMarkToGhost,\r\n    getItemById,\r\n    getGroupById,\r\n    removeMark,\r\n    getInfoesFromMarks,\r\n    isTherePerson,\r\n    filterTimeZone,\r\n    itemsToGuets,\r\n    groupToRoomType,\r\n    allTooltipsHide,\r\n    deleteItemById,\r\n    // openCreateMenu,\r\n    isGenderSafe,\r\n    getGuestsByBookingId,\r\n    addBlock,\r\n    allocateGuest,\r\n    allocateItem,\r\n    resizeBlockBlock,\r\n    genderToggleById,\r\n    resizeValidater,\r\n    bookingCheckedNew,\r\n    resizeLinkedItems,\r\n    moveLinkedItems,\r\n    toogleCheckInOut,\r\n    openBlockMenu,\r\n    openCanvasMenuTooltip,\r\n    createMark,\r\n    getAssigInfoFromItems,\r\n    deleteBookingById,\r\n    getGuestsInGroup,\r\n    popUpItemMenuTooltip,\r\n    getBookingIdByGuestId,\r\n    startBookingModalWithMark,\r\n    hilightGuestBlock,\r\n    hilightHeader,\r\n    deleteGhost,\r\n    createCreateItem,\r\n    getItems\r\n  };\r\n\r\n  return assigUtils;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}