{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { PricingType } from \"../types/enum\";\nimport { DEFAULT_ROOMTYPE, DEFAULT_GUEST } from \"../types/defaults\";\nimport { instanceOfA } from \"./utils\";\nimport { Gender } from \"../types/enum\";\nimport _ from \"lodash\";\n// 성별 과 룸타입을 중심으로 분류 하는 용도\n// 예약관련 정보 일부로 GetBooking정보로 변환할때 사용중\n// 혼합정보[] => 게스트정보(일부)[] + 방타입정보(일부)[]\nexport var divisionRoomSelectInfo = function divisionRoomSelectInfo(roomSelectInfoes) {\n  var generateGuest = function generateGuest(roomSelectInfo, gender) {\n    return _objectSpread({}, DEFAULT_GUEST, {\n      gender: gender,\n      roomType: {\n        __typename: \"RoomType\",\n        _id: roomSelectInfo.roomTypeId,\n        name: roomSelectInfo.roomTypeName || \"\"\n      }\n    });\n  };\n\n  var guests = [];\n  var roomTypes = [];\n  roomSelectInfoes.forEach(function (roomSelectInfo) {\n    var i_female = 0;\n    var i_male = 0;\n    var i_roomCount = 0;\n    var _roomSelectInfo$count = roomSelectInfo.count,\n        female = _roomSelectInfo$count.female,\n        male = _roomSelectInfo$count.male,\n        roomCount = _roomSelectInfo$count.roomCount;\n\n    var roomType = _objectSpread({}, DEFAULT_ROOMTYPE, {\n      _id: roomSelectInfo.roomTypeId,\n      name: roomSelectInfo.roomTypeName || \"\",\n      pricingType: roomSelectInfo.pricingType\n    });\n\n    roomTypes.push(roomType);\n\n    while (i_female + i_male + i_roomCount < female + male + roomCount) {\n      if (i_female < female) {\n        i_female++;\n        guests.push(generateGuest(roomSelectInfo, Gender.FEMALE));\n      } else if (i_male < male) {\n        i_male++;\n        guests.push(generateGuest(roomSelectInfo, Gender.MALE));\n      } else if (i_roomCount < roomCount) {\n        i_roomCount++;\n        guests.push(generateGuest(roomSelectInfo, null));\n      }\n    }\n  });\n  return {\n    guests: guests,\n    roomTypes: roomTypes\n  };\n}; // 성별 과 룸타입을 중심으로 분류 하는 용도\n// GetBooking 정보로 예약창에 룸타입별로 정렬된 뷰를 만들떄 사용중\n// 게스트정보(일부)[] + 방타입정보(일부)[] => 혼합정보(IRoomSelectInfo)[]\n\nexport var getRoomSelectInfo = function getRoomSelectInfo(guests, roomTypes) {\n  if (!guests) return [];\n  var roomTypesBuffer = [];\n  var tempArr = guests.map(function (guest) {\n    var guestRoomType = roomTypes.find(function (roomType) {\n      return roomType._id === guest.roomType._id;\n    }) || DEFAULT_ROOMTYPE; // 중복체크\n\n    if (roomTypesBuffer.includes(guestRoomType._id)) {\n      return \"duplicate\";\n    } // 메모리에 접수\n\n\n    roomTypesBuffer.push(guestRoomType._id); // 같은 방타입의 게스트들\n\n    var sameRoomTypeGuests = guests.filter(function (guest) {\n      return guest.roomType._id === guestRoomType._id;\n    });\n\n    var tempRooms = _.uniq(guests.map(function (guest) {\n      return guest.room;\n    }).filter(function (room) {\n      return room;\n    }).map(function (room) {\n      return room.name;\n    }));\n\n    return {\n      roomTypeId: guest.roomType._id,\n      roomTypeName: guestRoomType.name,\n      roomNames: tempRooms,\n      count: {\n        female: sameRoomTypeGuests.filter(function (guest) {\n          return guest.gender === Gender.FEMALE;\n        }).length,\n        male: sameRoomTypeGuests.filter(function (guest) {\n          return guest.gender === Gender.MALE;\n        }).length,\n        roomCount: sameRoomTypeGuests.filter(function (guest) {\n          return !guest.gender;\n        }).length\n      },\n      pricingType: sameRoomTypeGuests.find(function (guest) {\n        return guest.gender;\n      }) ? PricingType.DOMITORY : PricingType.ROOM\n    };\n  }); // 중복 제거\n  // @ts-ignore\n\n  var roomSelectInfo = tempArr.filter(function (v) {\n    return v !== \"duplicate\";\n  });\n  return roomSelectInfo;\n}; // 성별 과 룸타입을 중심으로 분류 하는 용도\n// 게스트들을 받아서 룸타입별로 정렬해주는 함수\n// 게스트 => (부킹/방타입[], 부킹/도미토리[]) 형태\n// RoomSelectInfo와 유사\n// RoomSelectInfo는 프론트 코드를 위해 존재\n// guestsToInput은 API를 위해 존재\n\nvar guestsToInput = function guestsToInput(guests) {\n  var countInRooms = [];\n  var countInDomitorys = [];\n  if (!guests) return {\n    countInRooms: countInRooms,\n    countInDomitorys: countInDomitorys\n  };\n\n  var roomTypeIds = _.uniq(guests.map(function (guest) {\n    return guest.roomType._id;\n  }));\n\n  roomTypeIds.forEach(function (roomTypeId) {\n    var guestsInRoom = guests.filter(function (guest) {\n      return guest.roomType._id === roomTypeId;\n    });\n    var countInRoom = {\n      roomTypeId: roomTypeId,\n      countRoom: 0\n    };\n    var countInDomitory = {\n      roomTypeId: roomTypeId,\n      countFemale: 0,\n      countMale: 0\n    };\n    guestsInRoom.forEach(function (guest) {\n      if (instanceOfA(guest, \"gender\")) {\n        if (guest.gender === Gender.FEMALE) {\n          countInDomitory.countFemale++;\n        } else {\n          countInDomitory.countMale++;\n        }\n      } else if (!instanceOfA(guest, \"gender\")) {\n        countInRoom.countRoom++;\n      }\n    });\n\n    if (countInRoom.countRoom) {\n      countInRooms.push(countInRoom);\n    }\n\n    if (countInDomitory.countFemale + countInDomitory.countMale) {\n      countInDomitorys.push(countInDomitory);\n    }\n  });\n  return {\n    countInRooms: countInRooms,\n    countInDomitorys: countInDomitorys\n  };\n}; // FUNC LIST\n//  --\n\n\nexport default guestsToInput;","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/utils/typeChanger.ts"],"names":["PricingType","DEFAULT_ROOMTYPE","DEFAULT_GUEST","instanceOfA","Gender","_","divisionRoomSelectInfo","roomSelectInfoes","generateGuest","roomSelectInfo","gender","roomType","__typename","_id","roomTypeId","name","roomTypeName","guests","roomTypes","forEach","i_female","i_male","i_roomCount","count","female","male","roomCount","pricingType","push","FEMALE","MALE","getRoomSelectInfo","roomTypesBuffer","tempArr","map","guest","guestRoomType","find","includes","sameRoomTypeGuests","filter","tempRooms","uniq","room","roomNames","length","DOMITORY","ROOM","v","guestsToInput","countInRooms","countInDomitorys","roomTypeIds","guestsInRoom","countInRoom","countRoom","countInDomitory","countFemale","countMale"],"mappings":"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","sourcesContent":["import {\r\n  StartBookingRoomGuestInput,\r\n  StartBookingDomitoryGuestInput,\r\n  getBooking_GetBooking_booking_guests_GuestDomitory,\r\n  getBooking_GetBooking_booking_guests_GuestRoom,\r\n  getBooking_GetBooking_booking_guests,\r\n  getBooking_GetBooking_booking_roomTypes\r\n} from \"../types/api\";\r\nimport { PricingType } from \"../types/enum\";\r\nimport {\r\n  DEFAULT_ROOMTYPE,\r\n  DEFAULT_ROOMTYPE_ROOM,\r\n  DEFAULT_GUEST\r\n} from \"../types/defaults\";\r\nimport { instanceOfA } from \"./utils\";\r\nimport { Gender } from \"../types/enum\";\r\nimport _ from \"lodash\";\r\nimport { GB_booking } from \"../types/interface\";\r\nimport { IRoomSelectInfo } from \"../components/bookingModal/declaration\";\r\n\r\ninterface propRoomType {\r\n  _id: string;\r\n}\r\n\r\ninterface propRoom {\r\n  _id: string;\r\n  name: string;\r\n}\r\n\r\ninterface propGuest {\r\n  room?: propRoom | null;\r\n  gender?: Gender | null;\r\n  roomType: propRoomType;\r\n}\r\n\r\n// 성별 과 룸타입을 중심으로 분류 하는 용도\r\n// 예약관련 정보 일부로 GetBooking정보로 변환할때 사용중\r\n// 혼합정보[] => 게스트정보(일부)[] + 방타입정보(일부)[]\r\nexport const divisionRoomSelectInfo = (\r\n  roomSelectInfoes: IRoomSelectInfo[]\r\n): {\r\n  guests: getBooking_GetBooking_booking_guests[];\r\n  roomTypes: getBooking_GetBooking_booking_roomTypes[];\r\n} => {\r\n  const generateGuest = (\r\n    roomSelectInfo: IRoomSelectInfo,\r\n    gender: Gender | null\r\n  ):\r\n    | getBooking_GetBooking_booking_guests_GuestDomitory\r\n    | getBooking_GetBooking_booking_guests_GuestRoom => ({\r\n    ...DEFAULT_GUEST,\r\n    gender,\r\n    roomType: {\r\n      __typename: \"RoomType\",\r\n      _id: roomSelectInfo.roomTypeId,\r\n      name: roomSelectInfo.roomTypeName || \"\"\r\n    }\r\n  });\r\n\r\n  const guests: getBooking_GetBooking_booking_guests[] = [];\r\n  const roomTypes: getBooking_GetBooking_booking_roomTypes[] = [];\r\n\r\n  roomSelectInfoes.forEach(roomSelectInfo => {\r\n    let i_female = 0;\r\n    let i_male = 0;\r\n    let i_roomCount = 0;\r\n    const {\r\n      count: { female, male, roomCount }\r\n    } = roomSelectInfo;\r\n\r\n    const roomType: getBooking_GetBooking_booking_roomTypes = {\r\n      ...DEFAULT_ROOMTYPE,\r\n      _id: roomSelectInfo.roomTypeId,\r\n      name: roomSelectInfo.roomTypeName || \"\",\r\n      pricingType: roomSelectInfo.pricingType\r\n    };\r\n\r\n    roomTypes.push(roomType);\r\n\r\n    while (i_female + i_male + i_roomCount < female + male + roomCount) {\r\n      if (i_female < female) {\r\n        i_female++;\r\n        guests.push(generateGuest(roomSelectInfo, Gender.FEMALE));\r\n      } else if (i_male < male) {\r\n        i_male++;\r\n        guests.push(generateGuest(roomSelectInfo, Gender.MALE));\r\n      } else if (i_roomCount < roomCount) {\r\n        i_roomCount++;\r\n        guests.push(generateGuest(roomSelectInfo, null));\r\n      }\r\n    }\r\n  });\r\n  return {\r\n    guests,\r\n    roomTypes\r\n  };\r\n};\r\n\r\n// 성별 과 룸타입을 중심으로 분류 하는 용도\r\n// GetBooking 정보로 예약창에 룸타입별로 정렬된 뷰를 만들떄 사용중\r\n// 게스트정보(일부)[] + 방타입정보(일부)[] => 혼합정보(IRoomSelectInfo)[]\r\nexport const getRoomSelectInfo = (\r\n  guests: propGuest[] | null,\r\n  roomTypes: {\r\n    _id: string;\r\n    name: string;\r\n    [key: string]: any;\r\n  }[]\r\n): IRoomSelectInfo[] => {\r\n  if (!guests) return [];\r\n\r\n  const roomTypesBuffer: string[] = [];\r\n  const tempArr = guests.map((guest): IRoomSelectInfo | \"duplicate\" => {\r\n    const guestRoomType =\r\n      roomTypes.find(roomType => roomType._id === guest.roomType._id) ||\r\n      DEFAULT_ROOMTYPE;\r\n\r\n    // 중복체크\r\n    if (roomTypesBuffer.includes(guestRoomType._id)) {\r\n      return \"duplicate\";\r\n    }\r\n    // 메모리에 접수\r\n    roomTypesBuffer.push(guestRoomType._id);\r\n\r\n    // 같은 방타입의 게스트들\r\n    const sameRoomTypeGuests = guests.filter(\r\n      guest => guest.roomType._id === guestRoomType._id\r\n    );\r\n\r\n    const tempRooms = _.uniq(\r\n      guests\r\n        .map(guest => guest.room)\r\n        .filter(room => room)\r\n        .map(room => room!.name)\r\n    );\r\n\r\n    return {\r\n      roomTypeId: guest.roomType._id,\r\n      roomTypeName: guestRoomType.name,\r\n      roomNames: tempRooms,\r\n      count: {\r\n        female: sameRoomTypeGuests.filter(\r\n          guest => guest.gender === Gender.FEMALE\r\n        ).length,\r\n        male: sameRoomTypeGuests.filter(guest => guest.gender === Gender.MALE)\r\n          .length,\r\n        roomCount: sameRoomTypeGuests.filter(guest => !guest.gender).length\r\n      },\r\n      pricingType: sameRoomTypeGuests.find(guest => guest.gender)\r\n        ? PricingType.DOMITORY\r\n        : PricingType.ROOM\r\n    };\r\n  });\r\n\r\n  // 중복 제거\r\n  // @ts-ignore\r\n  const roomSelectInfo: IRoomSelectInfo[] = tempArr.filter(\r\n    v => v !== \"duplicate\"\r\n  );\r\n\r\n  return roomSelectInfo;\r\n};\r\n\r\n// 성별 과 룸타입을 중심으로 분류 하는 용도\r\n// 게스트들을 받아서 룸타입별로 정렬해주는 함수\r\n// 게스트 => (부킹/방타입[], 부킹/도미토리[]) 형태\r\n// RoomSelectInfo와 유사\r\n// RoomSelectInfo는 프론트 코드를 위해 존재\r\n// guestsToInput은 API를 위해 존재\r\nconst guestsToInput = (\r\n  guests: propGuest[] | null\r\n): {\r\n  countInRooms: StartBookingRoomGuestInput[];\r\n  countInDomitorys: StartBookingDomitoryGuestInput[];\r\n} => {\r\n  let countInRooms: StartBookingRoomGuestInput[] = [];\r\n  let countInDomitorys: StartBookingDomitoryGuestInput[] = [];\r\n  if (!guests)\r\n    return {\r\n      countInRooms,\r\n      countInDomitorys\r\n    };\r\n  const roomTypeIds = _.uniq(guests.map(guest => guest.roomType._id));\r\n\r\n  roomTypeIds.forEach(roomTypeId => {\r\n    const guestsInRoom = guests.filter(\r\n      guest => guest.roomType._id === roomTypeId\r\n    );\r\n\r\n    const countInRoom = {\r\n      roomTypeId,\r\n      countRoom: 0\r\n    };\r\n\r\n    const countInDomitory = {\r\n      roomTypeId,\r\n      countFemale: 0,\r\n      countMale: 0\r\n    };\r\n    guestsInRoom.forEach(guest => {\r\n      if (\r\n        instanceOfA<getBooking_GetBooking_booking_guests_GuestDomitory>(\r\n          guest,\r\n          \"gender\"\r\n        )\r\n      ) {\r\n        if (guest.gender === Gender.FEMALE) {\r\n          countInDomitory.countFemale++;\r\n        } else {\r\n          countInDomitory.countMale++;\r\n        }\r\n      } else if (\r\n        !instanceOfA<getBooking_GetBooking_booking_guests_GuestDomitory>(\r\n          guest,\r\n          \"gender\"\r\n        )\r\n      ) {\r\n        countInRoom.countRoom++;\r\n      }\r\n    });\r\n    if (countInRoom.countRoom) {\r\n      countInRooms.push(countInRoom);\r\n    }\r\n    if (countInDomitory.countFemale + countInDomitory.countMale) {\r\n      countInDomitorys.push(countInDomitory);\r\n    }\r\n  });\r\n\r\n  return {\r\n    countInRooms,\r\n    countInDomitorys\r\n  };\r\n};\r\n\r\n// FUNC LIST\r\n//  --\r\n\r\nexport default guestsToInput;\r\n"]},"metadata":{},"sourceType":"module"}