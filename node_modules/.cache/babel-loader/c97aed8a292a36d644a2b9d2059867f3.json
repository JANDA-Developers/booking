{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\bookingHost\\\\dailyPrice\\\\DailyPriceWrap.tsx\";\n\n/* eslint-disable react/prop-types */\n\n/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useState } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport moment from \"moment-timezone\";\nimport DailyPrice from \"./DailyPrice\";\nimport { DailyPriceDefaultProps } from \"./timelineConfig\";\nimport { GET_ALL_ROOMTYPES_PRICE, PRICE_TIMELINE_GET_PRICE, CREATE_DAILY_PRICE, DELETE_DAILY_PRICE } from \"../../../queries\";\nimport { ErrProtecter, queryDataFormater, setMidNight, onCompletedMessage } from \"../../../utils/utils\";\nimport { TimePerMs } from \"../../../types/enum\";\nimport { useDayPicker, LANG } from \"../../../hooks/hook\";\n\nvar GetAllRoomTypePriceQuery =\n/*#__PURE__*/\nfunction (_Query) {\n  _inherits(GetAllRoomTypePriceQuery, _Query);\n\n  function GetAllRoomTypePriceQuery() {\n    _classCallCheck(this, GetAllRoomTypePriceQuery);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GetAllRoomTypePriceQuery).apply(this, arguments));\n  }\n\n  return GetAllRoomTypePriceQuery;\n}(Query);\n\nvar CreateDailyPriceMu =\n/*#__PURE__*/\nfunction (_Mutation) {\n  _inherits(CreateDailyPriceMu, _Mutation);\n\n  function CreateDailyPriceMu() {\n    _classCallCheck(this, CreateDailyPriceMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CreateDailyPriceMu).apply(this, arguments));\n  }\n\n  return CreateDailyPriceMu;\n}(Mutation);\n\nvar DeleteDailyPriceMu =\n/*#__PURE__*/\nfunction (_Mutation2) {\n  _inherits(DeleteDailyPriceMu, _Mutation2);\n\n  function DeleteDailyPriceMu() {\n    _classCallCheck(this, DeleteDailyPriceMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DeleteDailyPriceMu).apply(this, arguments));\n  }\n\n  return DeleteDailyPriceMu;\n}(Mutation);\n\nvar itemCreater = function itemCreater(_ref) {\n  var startDate = _ref.startDate,\n      endDate = _ref.endDate,\n      priceMap = _ref.priceMap,\n      roomTypes = _ref.roomTypes;\n  var items = [];\n  var now = startDate;\n\n  var roomTpyesMapFn = function roomTpyesMapFn(roomType) {\n    return {\n      id: roomType._id + now,\n      group: roomType._id,\n      start: now,\n      end: now + TimePerMs.DAY,\n      price: priceMap.get(roomType._id + now),\n      name: \"any\",\n      style: {\n        backgroundColor: \"fuchsia\"\n      },\n      itemProps: {\n        // these optional attributes are passed to the root <div /> of each item as <div {...itemProps} />\n        \"data-custom-attribute\": \"Random content\",\n        \"aria-hidden\": true\n      }\n    };\n  };\n\n  while (now <= endDate) {\n    items = items.concat(roomTypes.map(roomTpyesMapFn));\n    now = moment(now).add(1, \"days\").valueOf();\n  }\n\n  return items;\n};\n\nvar DailyPriceWrap = function DailyPriceWrap(_ref2) {\n  var context = _ref2.context;\n  var house = context.house; //  Default 값\n\n  var dayPickerHook = useDayPicker(null, null);\n  var defaultTime = {\n    start: dayPickerHook.from ? setMidNight(moment(dayPickerHook.from).valueOf()) : setMidNight(moment().valueOf()),\n    end: dayPickerHook.to ? setMidNight(moment(dayPickerHook.to).add(7, \"days\").valueOf()) : setMidNight(moment().add(7, \"days\").valueOf())\n  };\n\n  var _useState = useState({\n    start: setMidNight(moment().subtract(30, \"days\").valueOf()),\n    end: setMidNight(moment().add(60, \"days\").valueOf())\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataTime = _useState2[0],\n      setDataTime = _useState2[1]; // 방타입과 날자 조합의 키를 가지고 value로 pirce를 가지는 Map 생성\n\n\n  var priceMapCreater = function priceMapCreater(priceData) {\n    var priceMap = new Map();\n    priceData.map(function (price) {\n      priceMap.set(price.roomType._id + setMidNight(moment(price.date).valueOf()), price.price);\n    });\n    return priceMap;\n  }; // 방타입과 날자 조합의 키를 가지고 value로 pirce를 가지는 Map 생성\n\n\n  var placeHolderMapCreater = function placeHolderMapCreater(priceData) {\n    var placeHolderMap = new Map();\n    priceData.map(function (price) {\n      if (!price.datePrices) return;\n      price.datePrices.map(function (datePrice) {\n        placeHolderMap.set(price.roomType._id + setMidNight(moment(datePrice.date).valueOf()), datePrice.price);\n      });\n    });\n    return placeHolderMap;\n  };\n\n  var queryVarialbes = {\n    houseId: house._id,\n    checkIn: moment(dataTime.start).toISOString().split(\"T\")[0],\n    checkOut: moment(dataTime.end).toISOString().split(\"T\")[0]\n  };\n  moment.tz.setDefault(\"Asia/Seoul\");\n  return React.createElement(GetAllRoomTypePriceQuery, {\n    fetchPolicy: \"network-only\",\n    query: PRICE_TIMELINE_GET_PRICE,\n    variables: queryVarialbes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, function (_ref3) {\n    var data = _ref3.data,\n        loading = _ref3.loading,\n        error = _ref3.error,\n        networkStatus = _ref3.networkStatus;\n    var roomTypesData = queryDataFormater(data, \"GetAllRoomType\", \"roomTypes\", undefined); // 원본데이터\n\n    var dailyPriceData = queryDataFormater(data, \"GetAllDailyPrice\", \"dailyPrices\", []);\n    var turePriceData = queryDataFormater(data, \"GetRoomTypeDatePrices\", \"roomTypeDatePrices\", []);\n    var priceMap = priceMapCreater(dailyPriceData || []);\n    var placeHolderMap = placeHolderMapCreater(turePriceData || []);\n    var items = roomTypesData && itemCreater({\n      startDate: dataTime.start,\n      endDate: dataTime.end,\n      priceMap: priceMap,\n      roomTypes: roomTypesData\n    });\n    return (// 방생성 뮤테이션\n      React.createElement(CreateDailyPriceMu, {\n        onCompleted: function onCompleted(_ref4) {\n          var CreateDailyPrice = _ref4.CreateDailyPrice;\n          onCompletedMessage(CreateDailyPrice, LANG(\"price_setting_complited\"), LANG(\"price_setting_failed\"));\n        },\n        refetchQueries: [{\n          query: GET_ALL_ROOMTYPES_PRICE,\n          variables: queryVarialbes\n        }],\n        mutation: CREATE_DAILY_PRICE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, function (createDailyPriceMu) {\n        return (// 방생성 뮤테이션\n          React.createElement(DeleteDailyPriceMu, {\n            onCompleted: function onCompleted(_ref5) {\n              var DeleteDailyPrice = _ref5.DeleteDailyPrice;\n              onCompletedMessage(DeleteDailyPrice, LANG(\"price_setting_delete\"), LANG(\"price_setting_delete_fail\"));\n            },\n            refetchQueries: [{\n              query: GET_ALL_ROOMTYPES_PRICE,\n              variables: queryVarialbes\n            }],\n            mutation: DELETE_DAILY_PRICE,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238\n            },\n            __self: this\n          }, function (deleteDailyPriceMu) {\n            return React.createElement(DailyPrice, {\n              context: context,\n              items: items || undefined,\n              loading: loading,\n              defaultProps: DailyPriceDefaultProps,\n              priceMap: priceMap,\n              roomTypesData: roomTypesData || undefined,\n              placeHolderMap: placeHolderMap,\n              createDailyPriceMu: createDailyPriceMu,\n              dataTime: dataTime,\n              setDataTime: setDataTime,\n              defaultTime: defaultTime,\n              key: \"defaultTime\".concat(defaultTime.start).concat(defaultTime.end),\n              delteDailyPriceMu: deleteDailyPriceMu,\n              dayPickerHook: dayPickerHook,\n              networkStatus: networkStatus,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 252\n              },\n              __self: this\n            });\n          })\n        );\n      })\n    );\n  });\n};\n\nexport default ErrProtecter(DailyPriceWrap);","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/bookingHost/dailyPrice/DailyPriceWrap.tsx"],"names":["React","useState","Mutation","Query","moment","DailyPrice","DailyPriceDefaultProps","GET_ALL_ROOMTYPES_PRICE","PRICE_TIMELINE_GET_PRICE","CREATE_DAILY_PRICE","DELETE_DAILY_PRICE","ErrProtecter","queryDataFormater","setMidNight","onCompletedMessage","TimePerMs","useDayPicker","LANG","GetAllRoomTypePriceQuery","CreateDailyPriceMu","DeleteDailyPriceMu","itemCreater","startDate","endDate","priceMap","roomTypes","items","now","roomTpyesMapFn","roomType","id","_id","group","start","end","DAY","price","get","name","style","backgroundColor","itemProps","concat","map","add","valueOf","DailyPriceWrap","context","house","dayPickerHook","defaultTime","from","to","subtract","dataTime","setDataTime","priceMapCreater","priceData","Map","set","date","placeHolderMapCreater","placeHolderMap","datePrices","datePrice","queryVarialbes","houseId","checkIn","toISOString","split","checkOut","tz","setDefault","data","loading","error","networkStatus","roomTypesData","undefined","dailyPriceData","turePriceData","CreateDailyPrice","query","variables","createDailyPriceMu","DeleteDailyPrice","deleteDailyPriceMu"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React, {useState} from \"react\";\r\nimport {Mutation, Query} from \"react-apollo\";\r\nimport moment from \"moment-timezone\";\r\nimport {\r\n  getAllRoomTypePrice_GetAllRoomType_roomTypes as IRoomType,\r\n  getAllRoomType_GetAllRoomType_roomTypes_rooms as IRoom,\r\n  getAllRoomTypePrice_GetAllDailyPrice_dailyPrices as dailyPrices,\r\n  createDailyPrice,\r\n  createDailyPriceVariables,\r\n  deleteDailyPrice,\r\n  deleteDailyPriceVariables,\r\n  dailyPriceGetPriceVariables,\r\n  dailyPriceGetPrice,\r\n  dailyPriceGetPrice_GetRoomTypeDatePrices_roomTypeDatePrices\r\n} from \"../../../types/api\";\r\nimport DailyPrice from \"./DailyPrice\";\r\nimport {DailyPriceDefaultProps} from \"./timelineConfig\";\r\nimport {\r\n  GET_ALL_ROOMTYPES_PRICE,\r\n  PRICE_TIMELINE_GET_PRICE,\r\n  CREATE_DAILY_PRICE,\r\n  DELETE_DAILY_PRICE\r\n} from \"../../../queries\";\r\nimport {\r\n  ErrProtecter,\r\n  queryDataFormater,\r\n  showError,\r\n  setMidNight,\r\n  onCompletedMessage\r\n} from \"../../../utils/utils\";\r\nimport {TimePerMs} from \"../../../types/enum\";\r\nimport {useDayPicker, LANG} from \"../../../hooks/hook\";\r\nimport {IContext} from \"../BookingHostRouter\";\r\n\r\nclass GetAllRoomTypePriceQuery extends Query<\r\n  dailyPriceGetPrice,\r\n  dailyPriceGetPriceVariables\r\n> {}\r\nclass CreateDailyPriceMu extends Mutation<\r\n  createDailyPrice,\r\n  createDailyPriceVariables\r\n> {}\r\nclass DeleteDailyPriceMu extends Mutation<\r\n  deleteDailyPrice,\r\n  deleteDailyPriceVariables\r\n> {}\r\n\r\nexport interface IItem {\r\n  id: string;\r\n  group: string;\r\n  name: string;\r\n  // ms\r\n  price: number;\r\n  start: number;\r\n  end: number;\r\n}\r\n// 날자와 방타입 2중 순환 시켜서 모든 블럭에 맞는 item 을 생성\r\n// price 부분은 Map 에서호출\r\n\r\ninterface IPropItemCreater {\r\n  startDate: number;\r\n  endDate: number;\r\n  priceMap: Map<any, any>;\r\n  roomTypes: IRoomType[];\r\n}\r\n\r\nconst itemCreater = ({\r\n  startDate,\r\n  endDate,\r\n  priceMap,\r\n  roomTypes\r\n}: IPropItemCreater): IItem[] => {\r\n  let items: IItem[] = [];\r\n  let now = startDate;\r\n\r\n  const roomTpyesMapFn = (roomType: IRoomType) => ({\r\n    id: roomType._id + now,\r\n    group: roomType._id,\r\n    start: now,\r\n    end: now + TimePerMs.DAY,\r\n    price: priceMap.get(roomType._id + now),\r\n    name: \"any\",\r\n    style: {\r\n      backgroundColor: \"fuchsia\"\r\n    },\r\n    itemProps: {\r\n      // these optional attributes are passed to the root <div /> of each item as <div {...itemProps} />\r\n      \"data-custom-attribute\": \"Random content\",\r\n      \"aria-hidden\": true\r\n    }\r\n  });\r\n\r\n  while (now <= endDate) {\r\n    items = items.concat(roomTypes.map(roomTpyesMapFn));\r\n    now = moment(now)\r\n      .add(1, \"days\")\r\n      .valueOf();\r\n  }\r\n  return items;\r\n};\r\n\r\ninterface IProps {\r\n  context: IContext;\r\n}\r\n\r\nconst DailyPriceWrap: React.FC<IProps> = ({context}) => {\r\n  const {house} = context;\r\n  //  Default 값\r\n  const dayPickerHook = useDayPicker(null, null);\r\n  const defaultTime = {\r\n    start: dayPickerHook.from\r\n      ? setMidNight(moment(dayPickerHook.from).valueOf())\r\n      : setMidNight(moment().valueOf()),\r\n    end: dayPickerHook.to\r\n      ? setMidNight(\r\n          moment(dayPickerHook.to)\r\n            .add(7, \"days\")\r\n            .valueOf()\r\n        )\r\n      : setMidNight(\r\n          moment()\r\n            .add(7, \"days\")\r\n            .valueOf()\r\n        )\r\n  };\r\n  const [dataTime, setDataTime] = useState({\r\n    start: setMidNight(\r\n      moment()\r\n        .subtract(30, \"days\")\r\n        .valueOf()\r\n    ),\r\n    end: setMidNight(\r\n      moment()\r\n        .add(60, \"days\")\r\n        .valueOf()\r\n    )\r\n  });\r\n\r\n  // 방타입과 날자 조합의 키를 가지고 value로 pirce를 가지는 Map 생성\r\n  const priceMapCreater = (priceData: dailyPrices[]): Map<string, number> => {\r\n    const priceMap = new Map();\r\n    priceData.map(price => {\r\n      priceMap.set(\r\n        price.roomType._id + setMidNight(moment(price.date).valueOf()),\r\n        price.price\r\n      );\r\n    });\r\n    return priceMap;\r\n  };\r\n\r\n  // 방타입과 날자 조합의 키를 가지고 value로 pirce를 가지는 Map 생성\r\n  const placeHolderMapCreater = (\r\n    priceData: dailyPriceGetPrice_GetRoomTypeDatePrices_roomTypeDatePrices[]\r\n  ): Map<string, number> => {\r\n    const placeHolderMap = new Map();\r\n    priceData.map(price => {\r\n      if (!price.datePrices) return;\r\n      price.datePrices.map(datePrice => {\r\n        placeHolderMap.set(\r\n          price.roomType._id + setMidNight(moment(datePrice.date).valueOf()),\r\n          datePrice.price\r\n        );\r\n      });\r\n    });\r\n    return placeHolderMap;\r\n  };\r\n\r\n  const queryVarialbes = {\r\n    houseId: house._id,\r\n    checkIn: moment(dataTime.start)\r\n      .toISOString()\r\n      .split(\"T\")[0],\r\n    checkOut: moment(dataTime.end)\r\n      .toISOString()\r\n      .split(\"T\")[0]\r\n  };\r\n  moment.tz.setDefault(\"Asia/Seoul\");\r\n\r\n  return (\r\n    <GetAllRoomTypePriceQuery\r\n      fetchPolicy=\"network-only\"\r\n      query={PRICE_TIMELINE_GET_PRICE}\r\n      variables={queryVarialbes}\r\n    >\r\n      {({data, loading, error, networkStatus}) => {\r\n        const roomTypesData = queryDataFormater(\r\n          data,\r\n          \"GetAllRoomType\",\r\n          \"roomTypes\",\r\n          undefined\r\n        );\r\n        // 원본데이터\r\n        const dailyPriceData = queryDataFormater(\r\n          data,\r\n          \"GetAllDailyPrice\",\r\n          \"dailyPrices\",\r\n          []\r\n        );\r\n\r\n        const turePriceData = queryDataFormater(\r\n          data,\r\n          \"GetRoomTypeDatePrices\",\r\n          \"roomTypeDatePrices\",\r\n          []\r\n        );\r\n\r\n        const priceMap = priceMapCreater(dailyPriceData || []);\r\n\r\n        const placeHolderMap = placeHolderMapCreater(turePriceData || []);\r\n\r\n        const items =\r\n          roomTypesData &&\r\n          itemCreater({\r\n            startDate: dataTime.start,\r\n            endDate: dataTime.end,\r\n            priceMap,\r\n            roomTypes: roomTypesData\r\n          });\r\n        return (\r\n          // 방생성 뮤테이션\r\n          <CreateDailyPriceMu\r\n            onCompleted={({CreateDailyPrice}) => {\r\n              onCompletedMessage(\r\n                CreateDailyPrice,\r\n                LANG(\"price_setting_complited\"),\r\n                LANG(\"price_setting_failed\")\r\n              );\r\n            }}\r\n            refetchQueries={[\r\n              {query: GET_ALL_ROOMTYPES_PRICE, variables: queryVarialbes}\r\n            ]}\r\n            mutation={CREATE_DAILY_PRICE}\r\n          >\r\n            {createDailyPriceMu => (\r\n              // 방생성 뮤테이션\r\n              <DeleteDailyPriceMu\r\n                onCompleted={({DeleteDailyPrice}) => {\r\n                  onCompletedMessage(\r\n                    DeleteDailyPrice,\r\n                    LANG(\"price_setting_delete\"),\r\n                    LANG(\"price_setting_delete_fail\")\r\n                  );\r\n                }}\r\n                refetchQueries={[\r\n                  {query: GET_ALL_ROOMTYPES_PRICE, variables: queryVarialbes}\r\n                ]}\r\n                mutation={DELETE_DAILY_PRICE}\r\n              >\r\n                {deleteDailyPriceMu => (\r\n                  <DailyPrice\r\n                    context={context}\r\n                    items={items || undefined}\r\n                    loading={loading}\r\n                    defaultProps={DailyPriceDefaultProps}\r\n                    priceMap={priceMap}\r\n                    roomTypesData={roomTypesData || undefined}\r\n                    placeHolderMap={placeHolderMap}\r\n                    createDailyPriceMu={createDailyPriceMu}\r\n                    dataTime={dataTime}\r\n                    setDataTime={setDataTime}\r\n                    defaultTime={defaultTime}\r\n                    key={`defaultTime${defaultTime.start}${defaultTime.end}`}\r\n                    delteDailyPriceMu={deleteDailyPriceMu}\r\n                    dayPickerHook={dayPickerHook}\r\n                    networkStatus={networkStatus}\r\n                  />\r\n                )}\r\n              </DeleteDailyPriceMu>\r\n            )}\r\n          </CreateDailyPriceMu>\r\n        );\r\n      }}\r\n    </GetAllRoomTypePriceQuery>\r\n  );\r\n};\r\n\r\nexport default ErrProtecter(DailyPriceWrap);\r\n"]},"metadata":{},"sourceType":"module"}