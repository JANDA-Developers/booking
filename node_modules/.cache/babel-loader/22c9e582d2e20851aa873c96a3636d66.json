{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\components\\\\shortStatisces\\\\DaySales.tsx\";\nimport React from \"react\";\nimport { LANG } from \"../../hooks/hook\";\nimport JDdayPicker from \"../../atoms/dayPicker/DayPicker\";\nimport ArrowDayByDay from \"../../atoms/dayPicker/component/inputComponent/ArrowDayByDay\";\nimport { autoComma } from \"../../utils/utils\";\nimport Preloader from \"../../atoms/preloader/Preloader\";\nimport { arraySum } from \"../../utils/elses\";\nimport { getStaticColors } from \"../../utils/getStaticColors\";\nimport JDgraph from \"../../atoms/graph/graph\";\n\nvar DaySales = function DaySales(_ref) {\n  var loading = _ref.loading,\n      priceData = _ref.priceData,\n      dayPickerHook = _ref.dayPickerHook,\n      showDayPicker = _ref.showDayPicker;\n  if (loading) return React.createElement(Preloader, {\n    size: \"medium\",\n    loading: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  });\n  var totalPrice = arraySum(priceData.map(function (data) {\n    return data.price;\n  }));\n  var prices = priceData.map(function (data) {\n    return data.price;\n  });\n  var labels = priceData.map(function (data) {\n    return data.payMethod || \"\";\n  });\n  var datasets = {\n    labels: labels,\n    datasets: [{\n      data: prices,\n      backgroundColor: getStaticColors(priceData.length),\n      hoverBackgroundColor: getStaticColors(priceData.length, {\n        light: true\n      })\n    }]\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, showDayPicker && dayPickerHook && React.createElement(JDdayPicker, Object.assign({\n    isRange: false,\n    input: true,\n    canSelectBeforeDay: false,\n    label: LANG(\"calender_date\")\n  }, dayPickerHook, {\n    className: \"JDwaves-effect JDoverflow-visible\",\n    inputComponent: function inputComponent(prop) {\n      return React.createElement(ArrowDayByDay, Object.assign({}, prop, {\n        dayPickerHook: dayPickerHook,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), autoComma(totalPrice), LANG(\"money_unit\"), React.createElement(JDgraph, {\n    originalData: priceData,\n    JDtype: \"doughnut\",\n    data: datasets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n};\n\nexport default DaySales;","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/components/shortStatisces/DaySales.tsx"],"names":["React","LANG","JDdayPicker","ArrowDayByDay","autoComma","Preloader","arraySum","getStaticColors","JDgraph","DaySales","loading","priceData","dayPickerHook","showDayPicker","totalPrice","map","data","price","prices","labels","payMethod","datasets","backgroundColor","length","hoverBackgroundColor","light","prop"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAuBC,IAAvB,QAAkC,kBAAlC;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,aAAP,MAA0B,8DAA1B;AACA,SAAQC,SAAR,QAAiC,mBAAjC;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AAGA,SAAQC,QAAR,QAAuB,mBAAvB;AACA,SAAQC,eAAR,QAA8B,6BAA9B;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAYA,IAAMC,QAA0B,GAAG,SAA7BA,QAA6B,OAK7B;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,aAEI,QAFJA,aAEI;AAAA,MADJC,aACI,QADJA,aACI;AACJ,MAAIH,OAAJ,EAAa,OAAO,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,QAAhB;AAAyB,IAAA,OAAO,EAAEA,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEb,MAAMI,UAAU,GAAGR,QAAQ,CAACK,SAAS,CAACI,GAAV,CAAc,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,KAAT;AAAA,GAAlB,CAAD,CAA3B;AAEA,MAAMC,MAAM,GAAGP,SAAS,CAACI,GAAV,CAAc,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,KAAT;AAAA,GAAlB,CAAf;AACA,MAAME,MAAM,GAAGR,SAAS,CAACI,GAAV,CAAc,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACI,SAAL,IAAkB,EAAtB;AAAA,GAAlB,CAAf;AAEA,MAAMC,QAAoC,GAAG;AAC3CF,IAAAA,MAAM,EAANA,MAD2C;AAE3CE,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,IAAI,EAAEE,MADR;AAEEI,MAAAA,eAAe,EAAEf,eAAe,CAACI,SAAS,CAACY,MAAX,CAFlC;AAGEC,MAAAA,oBAAoB,EAAEjB,eAAe,CAACI,SAAS,CAACY,MAAX,EAAmB;AAACE,QAAAA,KAAK,EAAE;AAAR,OAAnB;AAHvC,KADQ;AAFiC,GAA7C;AAWA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,aAAa,IAAID,aAAjB,IACC,oBAAC,WAAD;AACE,IAAA,OAAO,EAAE,KADX;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,kBAAkB,EAAE,KAHtB;AAIE,IAAA,KAAK,EAAEX,IAAI,CAAC,eAAD;AAJb,KAKMW,aALN;AAME,IAAA,SAAS,EAAC,mCANZ;AAOE,IAAA,cAAc,EAAE,wBAACc,IAAD;AAAA,aACd,oBAAC,aAAD,oBAAmBA,IAAnB;AAAyB,QAAA,aAAa,EAAEd,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADc;AAAA,KAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAcGR,SAAS,CAACU,UAAD,CAdZ,EAeGb,IAAI,CAAC,YAAD,CAfP,EAgBE,oBAAC,OAAD;AAAS,IAAA,YAAY,EAAEU,SAAvB;AAAkC,IAAA,MAAM,EAAC,UAAzC;AAAoD,IAAA,IAAI,EAAEU,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CADF;AAoBD,CA5CD;;AA8CA,eAAeZ,QAAf","sourcesContent":["import React from \"react\";\r\nimport {IUseDayPicker, LANG} from \"../../hooks/hook\";\r\nimport JDdayPicker from \"../../atoms/dayPicker/DayPicker\";\r\nimport ArrowDayByDay from \"../../atoms/dayPicker/component/inputComponent/ArrowDayByDay\";\r\nimport {autoComma, isEmpty} from \"../../utils/utils\";\r\nimport Preloader from \"../../atoms/preloader/Preloader\";\r\nimport {Doughnut, ChartData} from \"react-chartjs-2\";\r\nimport {getSalesStatistic_GetSalesStatistic_data} from \"../../types/api\";\r\nimport {arraySum} from \"../../utils/elses\";\r\nimport {getStaticColors} from \"../../utils/getStaticColors\";\r\nimport JDgraph from \"../../atoms/graph/graph\";\r\n\r\nexport interface IViewConfigProp {\r\n  showDayPicker?: boolean;\r\n  dayPickerHook?: IUseDayPicker;\r\n}\r\n\r\ninterface Iprops extends IViewConfigProp {\r\n  priceData: getSalesStatistic_GetSalesStatistic_data[];\r\n  loading: boolean;\r\n}\r\n\r\nconst DaySales: React.FC<Iprops> = ({\r\n  loading,\r\n  priceData,\r\n  dayPickerHook,\r\n  showDayPicker\r\n}) => {\r\n  if (loading) return <Preloader size=\"medium\" loading={loading} />;\r\n\r\n  const totalPrice = arraySum(priceData.map(data => data.price));\r\n\r\n  const prices = priceData.map(data => data.price);\r\n  const labels = priceData.map(data => data.payMethod || \"\");\r\n\r\n  const datasets: ChartData<Chart.ChartData> = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        data: prices,\r\n        backgroundColor: getStaticColors(priceData.length),\r\n        hoverBackgroundColor: getStaticColors(priceData.length, {light: true})\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {showDayPicker && dayPickerHook && (\r\n        <JDdayPicker\r\n          isRange={false}\r\n          input\r\n          canSelectBeforeDay={false}\r\n          label={LANG(\"calender_date\")}\r\n          {...dayPickerHook}\r\n          className=\"JDwaves-effect JDoverflow-visible\"\r\n          inputComponent={(prop: any) => (\r\n            <ArrowDayByDay {...prop} dayPickerHook={dayPickerHook} />\r\n          )}\r\n        />\r\n      )}\r\n      {autoComma(totalPrice)}\r\n      {LANG(\"money_unit\")}\r\n      <JDgraph originalData={priceData} JDtype=\"doughnut\" data={datasets} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DaySales;\r\n"]},"metadata":{},"sourceType":"module"}