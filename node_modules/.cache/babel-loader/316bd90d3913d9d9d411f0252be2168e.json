{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\documents\\\\documentHome\\\\DocumentHomeWrap.tsx\";\nimport React, { useState } from \"react\";\nimport { Query } from \"react-apollo\";\nimport { queryDataFormater } from \"../../../utils/utils\";\nimport { GET_ALL_README, GET_FILE_TXT } from \"../../../queries\";\nimport DocumentHome from \"./DocumentHome\";\n\nvar GetAllReadMe =\n/*#__PURE__*/\nfunction (_Query) {\n  _inherits(GetAllReadMe, _Query);\n\n  function GetAllReadMe() {\n    _classCallCheck(this, GetAllReadMe);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GetAllReadMe).apply(this, arguments));\n  }\n\n  return GetAllReadMe;\n}(Query);\n\nvar GetFileTxt =\n/*#__PURE__*/\nfunction (_Query2) {\n  _inherits(GetFileTxt, _Query2);\n\n  function GetFileTxt() {\n    _classCallCheck(this, GetFileTxt);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GetFileTxt).apply(this, arguments));\n  }\n\n  return GetFileTxt;\n}(Query);\n\nvar DocumentHomeWrap = function DocumentHomeWrap() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      readMePath = _useState2[0],\n      setReadMePath = _useState2[1];\n\n  return React.createElement(GetAllReadMe, {\n    query: GET_ALL_README,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, function (_ref) {\n    var readMeData = _ref.data,\n        loading = _ref.loading,\n        error = _ref.error;\n    var allReadMe = queryDataFormater(readMeData, \"GetAllReadMe\", \"paths\", undefined);\n    return React.createElement(GetFileTxt, {\n      skip: readMePath === \"\",\n      variables: {\n        path: readMePath\n      },\n      query: GET_FILE_TXT,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, function (_ref2) {\n      var markDownTxtData = _ref2.data,\n          loading = _ref2.loading,\n          error = _ref2.error;\n      var markDownTxt = queryDataFormater(markDownTxtData, \"GetFileTxt\", \"fileTxt\", undefined);\n      return React.createElement(DocumentHome, {\n        markDownTxt: markDownTxt || \"\",\n        setReadMePath: setReadMePath,\n        loading: loading,\n        allReadMe: allReadMe || [],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      });\n    });\n  });\n};\n\nexport default DocumentHomeWrap;","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/documents/documentHome/DocumentHomeWrap.tsx"],"names":["React","useState","Query","queryDataFormater","GET_ALL_README","GET_FILE_TXT","DocumentHome","GetAllReadMe","GetFileTxt","DocumentHomeWrap","readMePath","setReadMePath","readMeData","data","loading","error","allReadMe","undefined","path","markDownTxtData","markDownTxt"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,cAAtB;AAMA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,kBAA7C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAMMC,Y;;;;;;;;;;;;EAAqBL,K;;IACrBM,U;;;;;;;;;;;;EAAmBN,K;;AAEzB,IAAMO,gBAAkC,GAAG,SAArCA,gBAAqC,GAAM;AAAA,kBACXR,QAAQ,CAAC,EAAD,CADG;AAAA;AAAA,MACxCS,UADwC;AAAA,MAC5BC,aAD4B;;AAG/C,SACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEP,cAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,gBAA0C;AAAA,QAAjCQ,UAAiC,QAAvCC,IAAuC;AAAA,QAArBC,OAAqB,QAArBA,OAAqB;AAAA,QAAZC,KAAY,QAAZA,KAAY;AACzC,QAAMC,SAAS,GAAGb,iBAAiB,CACjCS,UADiC,EAEjC,cAFiC,EAGjC,OAHiC,EAIjCK,SAJiC,CAAnC;AAMA,WACE,oBAAC,UAAD;AACE,MAAA,IAAI,EAAEP,UAAU,KAAK,EADvB;AAEE,MAAA,SAAS,EAAE;AAAEQ,QAAAA,IAAI,EAAER;AAAR,OAFb;AAGE,MAAA,KAAK,EAAEL,YAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG,iBAA+C;AAAA,UAAtCc,eAAsC,SAA5CN,IAA4C;AAAA,UAArBC,OAAqB,SAArBA,OAAqB;AAAA,UAAZC,KAAY,SAAZA,KAAY;AAC9C,UAAMK,WAAW,GAAGjB,iBAAiB,CACnCgB,eADmC,EAEnC,YAFmC,EAGnC,SAHmC,EAInCF,SAJmC,CAArC;AAMA,aACE,oBAAC,YAAD;AACE,QAAA,WAAW,EAAEG,WAAW,IAAI,EAD9B;AAEE,QAAA,aAAa,EAAET,aAFjB;AAGE,QAAA,OAAO,EAAEG,OAHX;AAIE,QAAA,SAAS,EAAEE,SAAS,IAAI,EAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KApBH,CADF;AAwBD,GAhCH,CADF;AAoCD,CAvCD;;AAyCA,eAAeP,gBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport {\r\n  getAllReadMe,\r\n  getFileTxt,\r\n  getFileTxtVariables\r\n} from \"../../../types/api\";\r\nimport { queryDataFormater } from \"../../../utils/utils\";\r\nimport { GET_ALL_README, GET_FILE_TXT } from \"../../../queries\";\r\nimport DocumentHome from \"./DocumentHome\";\r\n\r\ninterface IProps {\r\n  houseId: string;\r\n}\r\n\r\nclass GetAllReadMe extends Query<getAllReadMe> {}\r\nclass GetFileTxt extends Query<getFileTxt, getFileTxtVariables> {}\r\n\r\nconst DocumentHomeWrap: React.FC<IProps> = () => {\r\n  const [readMePath, setReadMePath] = useState(\"\");\r\n\r\n  return (\r\n    <GetAllReadMe query={GET_ALL_README}>\r\n      {({ data: readMeData, loading, error }) => {\r\n        const allReadMe = queryDataFormater(\r\n          readMeData,\r\n          \"GetAllReadMe\",\r\n          \"paths\",\r\n          undefined\r\n        );\r\n        return (\r\n          <GetFileTxt\r\n            skip={readMePath === \"\"}\r\n            variables={{ path: readMePath }}\r\n            query={GET_FILE_TXT}\r\n          >\r\n            {({ data: markDownTxtData, loading, error }) => {\r\n              const markDownTxt = queryDataFormater(\r\n                markDownTxtData,\r\n                \"GetFileTxt\",\r\n                \"fileTxt\",\r\n                undefined\r\n              );\r\n              return (\r\n                <DocumentHome\r\n                  markDownTxt={markDownTxt || \"\"}\r\n                  setReadMePath={setReadMePath}\r\n                  loading={loading}\r\n                  allReadMe={allReadMe || []}\r\n                />\r\n              );\r\n            }}\r\n          </GetFileTxt>\r\n        );\r\n      }}\r\n    </GetAllReadMe>\r\n  );\r\n};\r\n\r\nexport default DocumentHomeWrap;\r\n"]},"metadata":{},"sourceType":"module"}