{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\outPages\\\\checkReservation\\\\CheckReservationWrap.tsx\";\nimport React, { useState } from \"react\";\nimport ErrProtecter from \"../../../utils/errProtect\";\nimport \"./CheckReservation.scss\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { queryDataFormater, onCompletedMessage } from \"../../../utils/utils\";\nimport { GET_BOOKING_FOR_PUBLIC } from \"../../../queries\";\nimport client from \"../../../apolloClient\";\nimport CheckReservation from \"./CheckReservation\";\nimport JDmodal from \"../../../atoms/modal/Modal\";\nimport JDanimation, { Animation } from \"../../../atoms/animation/Animations\";\nimport JDIcon, { IconSize } from \"../../../atoms/icons/Icons\";\nimport { useModal, LANG } from \"../../../hooks/hook\";\n\nvar CheckReservationWrap = function CheckReservationWrap(_ref) {\n  var _ref$match$params = _ref.match.params,\n      transId = _ref$match$params.transId,\n      publickey = _ref$match$params.publickey;\n  sessionStorage.setItem(\"hpk\", publickey);\n  var comeplteModalHook = useModal(false);\n  var isFirstSender = useState(true);\n\n  var _useQuery = useQuery(GET_BOOKING_FOR_PUBLIC, {\n    client: client,\n    fetchPolicy: \"network-only\",\n    variables: {\n      transactionId: transId,\n      // @ts-ignore\n      skip: !transId\n    },\n    onCompleted: function onCompleted(_ref2) {\n      var GetBookingForPublic = _ref2.GetBookingForPublic;\n      onCompletedMessage(GetBookingForPublic, LANG(\"reference_sucess\"), LANG(\"reference_fail\"));\n    }\n  }),\n      data = _useQuery.data,\n      refetch = _useQuery.refetch,\n      loading = _useQuery.loading;\n\n  var booking = queryDataFormater(data, \"GetBookingForPublic\", \"booking\", undefined); // 예약완료 메세지 모달 오픈\n\n  if (booking && transId && isFirstSender[0]) {\n    comeplteModalHook.openModal();\n    isFirstSender[1](false);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(CheckReservation, {\n    refetch: refetch,\n    data: booking,\n    loading: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(JDmodal, Object.assign({\n    center: true\n  }, comeplteModalHook, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"JDstandard-margin-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, LANG(\"reservation_is_completed\")), React.createElement(JDanimation, {\n    animation: [Animation.tada],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(JDIcon, {\n    color: \"positive\",\n    size: IconSize.SUPER_LARGE,\n    icon: \"circleCheckIn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })))));\n};\n\nexport default ErrProtecter(CheckReservationWrap);","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/outPages/checkReservation/CheckReservationWrap.tsx"],"names":["React","useState","ErrProtecter","useQuery","queryDataFormater","onCompletedMessage","GET_BOOKING_FOR_PUBLIC","client","CheckReservation","JDmodal","JDanimation","Animation","JDIcon","IconSize","useModal","LANG","CheckReservationWrap","match","params","transId","publickey","sessionStorage","setItem","comeplteModalHook","isFirstSender","fetchPolicy","variables","transactionId","skip","onCompleted","GetBookingForPublic","data","refetch","loading","booking","undefined","openModal","tada","SUPER_LARGE"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport ErrProtecter from \"../../../utils/errProtect\";\r\nimport \"./CheckReservation.scss\";\r\nimport {useQuery} from \"@apollo/react-hooks\";\r\nimport {\r\n  getBookingForPublic,\r\n  getBookingForPublicVariables\r\n} from \"../../../types/api\";\r\nimport {queryDataFormater, s4, onCompletedMessage} from \"../../../utils/utils\";\r\nimport {GET_BOOKING_FOR_PUBLIC} from \"../../../queries\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport client from \"../../../apolloClient\";\r\nimport CheckReservation from \"./CheckReservation\";\r\nimport JDmodal from \"../../../atoms/modal/Modal\";\r\nimport JDanimation, {Animation} from \"../../../atoms/animation/Animations\";\r\nimport JDIcon, {IconSize} from \"../../../atoms/icons/Icons\";\r\nimport {useModal, LANG} from \"../../../hooks/hook\";\r\nexport interface ISetBookingInfo\r\n  extends React.Dispatch<React.SetStateAction<any>> {}\r\n\r\nexport interface ICheckParams {\r\n  publickey: string;\r\n  transId?: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<ICheckParams> {}\r\n\r\nconst CheckReservationWrap: React.FC<IProps> = ({\r\n  match: {\r\n    params: {transId, publickey}\r\n  }\r\n}) => {\r\n  sessionStorage.setItem(\"hpk\", publickey);\r\n  const comeplteModalHook = useModal(false);\r\n  const isFirstSender = useState(true);\r\n  const {data, refetch, loading} = useQuery<\r\n    getBookingForPublic,\r\n    getBookingForPublicVariables\r\n  >(GET_BOOKING_FOR_PUBLIC, {\r\n    client: client,\r\n    fetchPolicy: \"network-only\",\r\n    variables: {\r\n      transactionId: transId,\r\n      // @ts-ignore\r\n      skip: !transId\r\n    },\r\n    onCompleted: ({GetBookingForPublic}) => {\r\n      onCompletedMessage(\r\n        GetBookingForPublic,\r\n        LANG(\"reference_sucess\"),\r\n        LANG(\"reference_fail\")\r\n      );\r\n    }\r\n  });\r\n\r\n  const booking = queryDataFormater(\r\n    data,\r\n    \"GetBookingForPublic\",\r\n    \"booking\",\r\n    undefined\r\n  );\r\n\r\n  // 예약완료 메세지 모달 오픈\r\n  if (booking && transId && isFirstSender[0]) {\r\n    comeplteModalHook.openModal();\r\n    isFirstSender[1](false);\r\n  }\r\n  return (\r\n    <div>\r\n      {/* 예약확인 관련된 뷰 */}\r\n      <CheckReservation refetch={refetch} data={booking} loading={loading} />\r\n      <JDmodal center {...comeplteModalHook}>\r\n        <div>\r\n          <div className=\"JDstandard-margin-bottom\">\r\n            {LANG(\"reservation_is_completed\")}\r\n          </div>\r\n          {/* 예약완료 에니메이션 */}\r\n          <JDanimation animation={[Animation.tada]}>\r\n            <JDIcon\r\n              color=\"positive\"\r\n              size={IconSize.SUPER_LARGE}\r\n              icon=\"circleCheckIn\"\r\n            ></JDIcon>\r\n          </JDanimation>\r\n        </div>\r\n      </JDmodal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrProtecter(CheckReservationWrap);\r\n"]},"metadata":{},"sourceType":"module"}