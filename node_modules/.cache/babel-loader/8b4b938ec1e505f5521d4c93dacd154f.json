{"ast":null,"code":"import { BookingStatus } from \"../types/enum\";\nimport { arraySum } from \"./elses\";\nimport isEmpty from \"./isEmptyData\";\nimport moment from \"moment\"; // booking들을 받아서 종합 BookingStatu를 반환합니다.\n\nexport var bookingStatuMerge = function bookingStatuMerge(bookings) {\n  if (isEmpty(bookings)) {\n    return null;\n  }\n\n  bookings && bookings.forEach(function (booking) {\n    if (booking.bookingStatus === BookingStatus.CANCEL) return BookingStatus.CANCEL;\n  });\n  return BookingStatus.COMPLETE;\n};\n// 날자들에 대해서 방타입들의 평균 가격을 가져옴\nexport var totalPriceGetAveragePrice = function totalPriceGetAveragePrice(priceData) {\n  var averagePrice = arraySum(priceData.map(function (data) {\n    return getAveragePrice(data.datePrices || []);\n  }));\n  return averagePrice;\n}; // 위쪽 함수 종속\n\nexport var getAveragePrice = function getAveragePrice(priceData) {\n  var averagePrice = arraySum(priceData.map(function (priceD) {\n    return priceD.price;\n  })) / priceData.length;\n  return averagePrice;\n}; // 예약들의 가격을 머지함\n// 사용하는곳 없음\n\nexport var bookingPriceMerge = function bookingPriceMerge(bookings) {\n  return arraySum(bookings.map(function (booking) {\n    return booking.bookingStatus === BookingStatus.COMPLETE ? booking.price : 0;\n  }));\n};\n\nfunction getRangeOfDates(start, end, key) {\n  var arr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [start.startOf(key)];\n  if (start.isAfter(end)) throw new Error(\"start must precede end\");\n  var next = moment(start).add(1, \"days\").startOf(key);\n  if (next.isAfter(end, key)) return arr;\n  return getRangeOfDates(next, end, key, arr.concat(next));\n}","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/utils/booking.tsx"],"names":["BookingStatus","arraySum","isEmpty","moment","bookingStatuMerge","bookings","forEach","booking","bookingStatus","CANCEL","COMPLETE","totalPriceGetAveragePrice","priceData","averagePrice","map","data","getAveragePrice","datePrices","priceD","price","length","bookingPriceMerge","getRangeOfDates","start","end","key","arr","startOf","isAfter","Error","next","add","concat"],"mappings":"AAAA,SAASA,aAAT,QAAsC,eAAtC;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAKA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAA2C;AAC1E,MAAIH,OAAO,CAACG,QAAD,CAAX,EAAuB;AACrB,WAAO,IAAP;AACD;;AACDA,EAAAA,QAAQ,IACNA,QAAQ,CAACC,OAAT,CAAiB,UAAAC,OAAO,EAAI;AAC1B,QAAIA,OAAO,CAACC,aAAR,KAA0BR,aAAa,CAACS,MAA5C,EACE,OAAOT,aAAa,CAACS,MAArB;AACH,GAHD,CADF;AAKA,SAAOT,aAAa,CAACU,QAArB;AACD,CAVM;AAkBP;AACA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CACvCC,SADuC,EAE5B;AACX,MAAMC,YAAY,GAAGZ,QAAQ,CAC3BW,SAAS,CAACE,GAAV,CAAc,UAAAC,IAAI;AAAA,WAAIC,eAAe,CAACD,IAAI,CAACE,UAAL,IAAmB,EAApB,CAAnB;AAAA,GAAlB,CAD2B,CAA7B;AAGA,SAAOJ,YAAP;AACD,CAPM,C,CASP;;AACA,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAC7BJ,SAD6B,EAElB;AACX,MAAMC,YAAY,GAChBZ,QAAQ,CAACW,SAAS,CAACE,GAAV,CAAc,UAAAI,MAAM;AAAA,WAAIA,MAAM,CAACC,KAAX;AAAA,GAApB,CAAD,CAAR,GAAkDP,SAAS,CAACQ,MAD9D;AAGA,SAAOP,YAAP;AACD,CAPM,C,CASP;AACA;;AACA,OAAO,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAAChB,QAAD;AAAA,SAC/BJ,QAAQ,CACNI,QAAQ,CAACS,GAAT,CAAa,UAAAP,OAAO;AAAA,WAClBA,OAAO,CAACC,aAAR,KAA0BR,aAAa,CAACU,QAAxC,GAAmDH,OAAO,CAACY,KAA3D,GAAmE,CADjD;AAAA,GAApB,CADM,CADuB;AAAA,CAA1B;;AAOP,SAASG,eAAT,CACEC,KADF,EAEEC,GAFF,EAGEC,GAHF,EAKmB;AAAA,MADjBC,GACiB,uEADX,CAACH,KAAK,CAACI,OAAN,CAAcF,GAAd,CAAD,CACW;AACjB,MAAIF,KAAK,CAACK,OAAN,CAAcJ,GAAd,CAAJ,EAAwB,MAAM,IAAIK,KAAJ,CAAU,wBAAV,CAAN;AAExB,MAAMC,IAAI,GAAG3B,MAAM,CAACoB,KAAD,CAAN,CACVQ,GADU,CACN,CADM,EACH,MADG,EAEVJ,OAFU,CAEFF,GAFE,CAAb;AAIA,MAAIK,IAAI,CAACF,OAAL,CAAaJ,GAAb,EAAkBC,GAAlB,CAAJ,EAA4B,OAAOC,GAAP;AAE5B,SAAOJ,eAAe,CAACQ,IAAD,EAAON,GAAP,EAAYC,GAAZ,EAAiBC,GAAG,CAACM,MAAJ,CAAWF,IAAX,CAAjB,CAAtB;AACD","sourcesContent":["import { BookingStatus, Gender } from \"../types/enum\";\r\nimport { arraySum } from \"./elses\";\r\nimport isEmpty from \"./isEmptyData\";\r\nimport {\r\n  getRoomTypeDatePrices_GetRoomTypeDatePrices_roomTypeDatePrices_datePrices,\r\n  getRoomTypeDatePrices_GetRoomTypeDatePrices_roomTypeDatePrices\r\n} from \"../types/api\";\r\nimport moment from \"moment\";\r\n\r\n// booking들을 받아서 종합 BookingStatu를 반환합니다.\r\ntype TProp = { bookingStatus: BookingStatus; [foo: string]: any }[] | null;\r\nexport const bookingStatuMerge = (bookings: TProp): BookingStatus | null => {\r\n  if (isEmpty(bookings)) {\r\n    return null;\r\n  }\r\n  bookings &&\r\n    bookings.forEach(booking => {\r\n      if (booking.bookingStatus === BookingStatus.CANCEL)\r\n        return BookingStatus.CANCEL;\r\n    });\r\n  return BookingStatus.COMPLETE;\r\n};\r\n\r\ntype TProp2 = {\r\n  bookingStatus: BookingStatus;\r\n  price: number;\r\n  [foo: string]: any;\r\n}[];\r\n\r\n// 날자들에 대해서 방타입들의 평균 가격을 가져옴\r\nexport const totalPriceGetAveragePrice = (\r\n  priceData: getRoomTypeDatePrices_GetRoomTypeDatePrices_roomTypeDatePrices[]\r\n): number => {\r\n  const averagePrice = arraySum(\r\n    priceData.map(data => getAveragePrice(data.datePrices || []))\r\n  );\r\n  return averagePrice;\r\n};\r\n\r\n// 위쪽 함수 종속\r\nexport const getAveragePrice = (\r\n  priceData: getRoomTypeDatePrices_GetRoomTypeDatePrices_roomTypeDatePrices_datePrices[]\r\n): number => {\r\n  const averagePrice =\r\n    arraySum(priceData.map(priceD => priceD.price)) / priceData.length;\r\n\r\n  return averagePrice;\r\n};\r\n\r\n// 예약들의 가격을 머지함\r\n// 사용하는곳 없음\r\nexport const bookingPriceMerge = (bookings: TProp2): number =>\r\n  arraySum(\r\n    bookings.map(booking =>\r\n      booking.bookingStatus === BookingStatus.COMPLETE ? booking.price : 0\r\n    )\r\n  );\r\n\r\nfunction getRangeOfDates(\r\n  start: moment.Moment,\r\n  end: any,\r\n  key: \"days\",\r\n  arr = [start.startOf(key)]\r\n): moment.Moment[] {\r\n  if (start.isAfter(end)) throw new Error(\"start must precede end\");\r\n\r\n  const next = moment(start)\r\n    .add(1, \"days\")\r\n    .startOf(key);\r\n\r\n  if (next.isAfter(end, key)) return arr;\r\n\r\n  return getRangeOfDates(next, end, key, arr.concat(next));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}