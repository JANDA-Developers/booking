{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\middleServer\\\\roomConfig\\\\RoomConfigWrap.tsx\";\n\n/* eslint-disable react/prop-types */\n\n/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { Fragment } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport { useToggle, LANG } from \"../../../hooks/hook\";\nimport roomTimelineDefaultProps from \"./timelineConfig\";\nimport { GET_ALL_ROOMTYPES, CHANGE_INDEX_FOR_ROOMTYPE } from \"../../../queries\";\nimport { ErrProtecter, queryDataFormater, onCompletedMessage } from \"../../../utils/utils\";\nimport RoomConfig from \"./RoomConfig\";\nimport Preloader from \"../../../atoms/preloader/Preloader\";\nimport { FLOATING_PRELOADER_SIZE } from \"../../../types/enum\";\nexport var ADD_ROOM;\n\n(function (ADD_ROOM) {\n  ADD_ROOM[ADD_ROOM[\"ADDROOM\"] = -1] = \"ADDROOM\";\n  ADD_ROOM[ADD_ROOM[\"ADDROOM_TYPE\"] = -1] = \"ADDROOM_TYPE\";\n})(ADD_ROOM || (ADD_ROOM = {}));\n\nvar GetAllRoomTypeQuery =\n/*#__PURE__*/\nfunction (_Query) {\n  _inherits(GetAllRoomTypeQuery, _Query);\n\n  function GetAllRoomTypeQuery() {\n    _classCallCheck(this, GetAllRoomTypeQuery);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GetAllRoomTypeQuery).apply(this, arguments));\n  }\n\n  return GetAllRoomTypeQuery;\n}(Query);\n\nvar ChangeIndexForRoomTypeMu =\n/*#__PURE__*/\nfunction (_Mutation) {\n  _inherits(ChangeIndexForRoomTypeMu, _Mutation);\n\n  function ChangeIndexForRoomTypeMu() {\n    _classCallCheck(this, ChangeIndexForRoomTypeMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChangeIndexForRoomTypeMu).apply(this, arguments));\n  }\n\n  return ChangeIndexForRoomTypeMu;\n}(Mutation);\n\nvar RoomConfigWrap = function RoomConfigWrap(_ref) {\n  var context = _ref.context,\n      _ref$refetchQueries = _ref.refetchQueries,\n      refetchQueries = _ref$refetchQueries === void 0 ? [] : _ref$refetchQueries,\n      prop = _objectWithoutProperties(_ref, [\"context\", \"refetchQueries\"]);\n\n  var house = context.house;\n\n  var _useToggle = useToggle(false),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      _ = _useToggle2[0],\n      setConfigMode = _useToggle2[1];\n\n  return (// 모든 방 가져오기\n    React.createElement(GetAllRoomTypeQuery, {\n      fetchPolicy: \"network-only\",\n      query: GET_ALL_ROOMTYPES,\n      variables: {\n        houseId: house._id\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, function (_ref2) {\n      var roomData = _ref2.data,\n          loading = _ref2.loading,\n          error = _ref2.error,\n          networkStatus = _ref2.networkStatus;\n      var roomTypesData = queryDataFormater(roomData, \"GetAllRoomType\", \"roomTypes\", []) || []; // 원본데이터\n\n      return React.createElement(ChangeIndexForRoomTypeMu, {\n        refetchQueries: [{\n          query: GET_ALL_ROOMTYPES\n        }],\n        onCompleted: function onCompleted(_ref3) {\n          var ChangeIndexForRoomType = _ref3.ChangeIndexForRoomType;\n          onCompletedMessage(ChangeIndexForRoomType, LANG(\"priority_changed\"), LANG(\"priority_change_fail\"));\n        },\n        mutation: CHANGE_INDEX_FOR_ROOMTYPE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, function (changeIndexForRoomTypeMu, _ref4) {\n        var chnageIndexMuLoading = _ref4.loading;\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(Preloader, {\n          floating: true,\n          size: FLOATING_PRELOADER_SIZE,\n          loading: chnageIndexMuLoading || networkStatus > 1 && loading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }), React.createElement(RoomConfig, {\n          context: context,\n          loading: loading,\n          refetchQueries: refetchQueries,\n          setConfigMode: setConfigMode,\n          changeIndexForRoomTypeMu: changeIndexForRoomTypeMu,\n          defaultProps: roomTimelineDefaultProps,\n          roomTypesData: roomTypesData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }));\n      });\n    })\n  );\n};\n\nexport default ErrProtecter(RoomConfigWrap);","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/middleServer/roomConfig/RoomConfigWrap.tsx"],"names":["React","Fragment","Query","Mutation","useToggle","LANG","roomTimelineDefaultProps","GET_ALL_ROOMTYPES","CHANGE_INDEX_FOR_ROOMTYPE","ErrProtecter","queryDataFormater","onCompletedMessage","RoomConfig","Preloader","FLOATING_PRELOADER_SIZE","ADD_ROOM","GetAllRoomTypeQuery","ChangeIndexForRoomTypeMu","RoomConfigWrap","context","refetchQueries","prop","house","_","setConfigMode","houseId","_id","roomData","data","loading","error","networkStatus","roomTypesData","query","ChangeIndexForRoomType","changeIndexForRoomTypeMu","chnageIndexMuLoading"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React, {Fragment} from \"react\";\r\nimport {Query, Mutation} from \"react-apollo\";\r\nimport {\r\n  getAllRoomType,\r\n  changeIndexForRoomType,\r\n  changeIndexForRoomTypeVariables\r\n} from \"../../../types/api\";\r\nimport {useToggle, LANG} from \"../../../hooks/hook\";\r\nimport roomTimelineDefaultProps from \"./timelineConfig\";\r\nimport {GET_ALL_ROOMTYPES, CHANGE_INDEX_FOR_ROOMTYPE} from \"../../../queries\";\r\nimport {\r\n  ErrProtecter,\r\n  queryDataFormater,\r\n  onCompletedMessage\r\n} from \"../../../utils/utils\";\r\nimport {IContext} from \"../../MiddleServerRouter\";\r\nimport RoomConfig from \"./RoomConfig\";\r\nimport {PureQueryOptions} from \"apollo-client\";\r\nimport Preloader from \"../../../atoms/preloader/Preloader\";\r\nimport {FLOATING_PRELOADER_SIZE} from \"../../../types/enum\";\r\n\r\nexport enum ADD_ROOM {\r\n  \"ADDROOM\" = -1,\r\n  \"ADDROOM_TYPE\" = -1\r\n}\r\n\r\ninterface IProps {\r\n  context: IContext;\r\n  refetchQueries?: (PureQueryOptions | string)[];\r\n}\r\n\r\nclass GetAllRoomTypeQuery extends Query<getAllRoomType> {}\r\nclass ChangeIndexForRoomTypeMu extends Mutation<\r\n  changeIndexForRoomType,\r\n  changeIndexForRoomTypeVariables\r\n> {}\r\n\r\nconst RoomConfigWrap: React.FC<IProps> = ({\r\n  context,\r\n  refetchQueries = [],\r\n  ...prop\r\n}) => {\r\n  const {house} = context;\r\n  const [_, setConfigMode] = useToggle(false);\r\n\r\n  return (\r\n    // 모든 방 가져오기\r\n    <GetAllRoomTypeQuery\r\n      fetchPolicy=\"network-only\"\r\n      query={GET_ALL_ROOMTYPES}\r\n      variables={{houseId: house._id}}\r\n    >\r\n      {({data: roomData, loading, error, networkStatus}) => {\r\n        const roomTypesData =\r\n          queryDataFormater(roomData, \"GetAllRoomType\", \"roomTypes\", []) || []; // 원본데이터\r\n\r\n        return (\r\n          <ChangeIndexForRoomTypeMu\r\n            refetchQueries={[{query: GET_ALL_ROOMTYPES}]}\r\n            onCompleted={({ChangeIndexForRoomType}) => {\r\n              onCompletedMessage(\r\n                ChangeIndexForRoomType,\r\n                LANG(\"priority_changed\"),\r\n                LANG(\"priority_change_fail\")\r\n              );\r\n            }}\r\n            mutation={CHANGE_INDEX_FOR_ROOMTYPE}\r\n          >\r\n            {(changeIndexForRoomTypeMu, {loading: chnageIndexMuLoading}) => (\r\n              <Fragment>\r\n                <Preloader\r\n                  floating\r\n                  size={FLOATING_PRELOADER_SIZE}\r\n                  loading={\r\n                    chnageIndexMuLoading || (networkStatus > 1 && loading)\r\n                  }\r\n                />\r\n                <RoomConfig\r\n                  context={context}\r\n                  loading={loading}\r\n                  refetchQueries={refetchQueries}\r\n                  setConfigMode={setConfigMode}\r\n                  changeIndexForRoomTypeMu={changeIndexForRoomTypeMu}\r\n                  defaultProps={roomTimelineDefaultProps}\r\n                  roomTypesData={roomTypesData}\r\n                />\r\n              </Fragment>\r\n            )}\r\n          </ChangeIndexForRoomTypeMu>\r\n        );\r\n      }}\r\n    </GetAllRoomTypeQuery>\r\n  );\r\n};\r\n\r\nexport default ErrProtecter(RoomConfigWrap);\r\n"]},"metadata":{},"sourceType":"module"}