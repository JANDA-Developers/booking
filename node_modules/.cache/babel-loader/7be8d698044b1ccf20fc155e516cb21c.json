{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\outPages\\\\reservation\\\\Reservation.tsx\";\nimport React, { useState, Fragment, useEffect } from \"react\";\nimport windowSize from \"react-window-size\";\nimport { Query } from \"react-apollo\";\nimport ErrProtecter from \"../../../utils/errProtect\";\nimport JDdayPicker from \"../../../atoms/dayPicker/DayPicker\";\nimport { useDayPicker, useModal, useCheckBox, useSelect, useInput, LANG } from \"../../../hooks/hook\";\nimport \"./Reservation.scss\";\nimport Button from \"../../../atoms/button/Button\";\nimport Card from \"../../../atoms/cards/Card\";\nimport $ from \"jquery\";\nimport BookingInfoBox from \"./components/bookingInfoBox\";\nimport PayMentModal from \"./components/paymentModal\";\nimport RoomTypeCardWrap from \"./components/roomTypeCards/roomTypeCardsWrap\";\nimport { isEmpty, queryDataFormater, insideRedirect, muResult } from \"../../../utils/utils\";\nimport { isName, isPhone } from \"../../../utils/inputValidations\";\nimport { JDtoastModal } from \"../../../atoms/modal/Modal\";\nimport { WindowSize, PricingType, PAYMETHOD_FOR_BOOKER_OP, Funnels } from \"../../../types/enum\";\nimport { GET_ALL_ROOM_TYPE_FOR_BOOKING } from \"../../../queries\";\nimport Preloader from \"../../../atoms/preloader/Preloader\";\nimport { Helmet } from \"react-helmet\";\nimport { openNiceModal } from \"./components/doPay\";\nimport { reservationDevelop, developEvent } from \"../../../utils/developMaster\";\nimport RoomSearcher from \"../../../components/roomSearcher.tsx/RoomSearcher\";\nimport BookingInfoModal from \"./components/roomTypeCards/bookingInfoModal\";\nimport isLast from \"../../../utils/isLast\";\nimport BookingModalWrap from \"../../../components/bookingModal/BookingModalWrap\";\nimport { DEFAULT_BOOKING } from \"../../../types/defaults\";\nimport { divisionRoomSelectInfo } from \"../../../utils/typeChanger\";\nimport { to4YMMDD } from \"../../../utils/setMidNight\";\n\nvar GetAllAvailRoomQu =\n/*#__PURE__*/\nfunction (_Query) {\n  _inherits(GetAllAvailRoomQu, _Query);\n\n  function GetAllAvailRoomQu() {\n    _classCallCheck(this, GetAllAvailRoomQu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GetAllAvailRoomQu).apply(this, arguments));\n  }\n\n  return GetAllAvailRoomQu;\n}(Query);\n\nvar Reservation = function Reservation(_ref) {\n  var windowWidth = _ref.windowWidth,\n      startBookingForPublicMu = _ref.startBookingForPublicMu,\n      context = _ref.context,\n      payAuthQu = _ref.payAuthQu,\n      createLoading = _ref.createLoading,\n      modalHook = _ref.modalHook;\n  var isHost = context ? true : false;\n  var houseId = context ? context.house._id : undefined;\n  var defaultBookingInfo = {\n    name: \"\",\n    password: \"\",\n    memo: \"\",\n    email: \"colton950901@naver.com\",\n    phoneNumber: \"\",\n    agreePrivacyPolicy: isHost ? true : false\n  };\n  var isMobile = windowWidth < WindowSize.PHABLET;\n  var dayPickerHook = useDayPicker(null, null);\n  var confirmModalHook = useModal(false); // 모바일에서만 사용\n\n  var _useState = useState(\"search\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      step = _useState2[0],\n      setStep = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      roomSelectInfo = _useState4[0],\n      setRoomSelectInfo = _useState4[1];\n\n  var _useState5 = useState(defaultBookingInfo),\n      _useState6 = _slicedToArray(_useState5, 2),\n      bookerInfo = _useState6[0],\n      setBookerInfo = _useState6[1];\n\n  var rsevModalHook = useModal(false);\n  var toastModalHook = useModal(false);\n  var bookingInfoModal = useModal(false);\n  var roomInfoHook = useState([]);\n  var bookingModalHook = useModal();\n  var sendSmsHook = useCheckBox(isHost ? false : true);\n  var priceHook = useInput(0);\n  var payMethodHook = useSelect(PAYMETHOD_FOR_BOOKER_OP[0]);\n  var reservationHooks = {\n    priceHook: priceHook,\n    roomInfoHook: roomInfoHook,\n    toastModalHook: toastModalHook,\n    dayPickerHook: dayPickerHook,\n    bookerInfo: bookerInfo,\n    setBookerInfo: setBookerInfo,\n    roomSelectInfo: roomSelectInfo,\n    setRoomSelectInfo: setRoomSelectInfo,\n    sendSmsHook: sendSmsHook,\n    payMethodHook: payMethodHook\n  };\n\n  var resvConfirmCallBackFunc = function resvConfirmCallBackFunc(flag) {\n    if (flag) {\n      var publicKey = sessionStorage.getItem(\"hpk\");\n      var name = bookerInfo.name,\n          password = bookerInfo.password,\n          phoneNumber = bookerInfo.phoneNumber;\n      location.href = insideRedirect(\"outpage/checkReservation/\".concat(publicKey, \"/\").concat(name, \"/\").concat(phoneNumber, \"/\").concat(password));\n    } else {\n      location.reload();\n    }\n  }; // Deprecated\n\n\n  developEvent(function () {\n    reservationDevelop(reservationHooks);\n  }); // 날자를 선택하면 예약선택 상태 초기화\n\n  useEffect(function () {\n    setRoomSelectInfo([]);\n    setBookerInfo(defaultBookingInfo);\n  }, [dayPickerHook.to, dayPickerHook.from]); // Iframe 높이조절\n\n  useEffect(function () {\n    var theHeight = $(\"#JDreservation\").height() || 1000;\n    window.parent.postMessage({\n      height: theHeight\n    }, \"*\");\n  }); //방선택 을 했는지 확인\n\n  var roomSelectValidation = function roomSelectValidation() {\n    if (isEmpty(roomSelectInfo)) {\n      toastModalHook.openModal({\n        txt: LANG(\"no_room_selected\")\n      });\n      return false;\n    }\n\n    return true;\n  }; // 예약전 벨리데이션\n\n\n  var bookerInfoValidation = function bookerInfoValidation() {\n    if (isName(bookerInfo.name) !== true) {\n      toastModalHook.openModal({\n        txt: LANG(\"name_is_not_valid\")\n      });\n      return false;\n    }\n\n    if (isPhone(bookerInfo.phoneNumber) !== true) {\n      toastModalHook.openModal({\n        txt: LANG(\"phoneNum_is_not_valid\")\n      });\n      return false;\n    }\n\n    if (bookerInfo.password === \"\") {\n      toastModalHook.openModal({\n        txt: LANG(\"input_your_password_please\")\n      });\n      return false;\n    }\n\n    if (bookerInfo.agreePrivacyPolicy === false) {\n      toastModalHook.openModal({\n        txt: LANG(\"please_agree_collect_personal_info\")\n      });\n      return false;\n    }\n\n    return true;\n  }; // 날자와 방현황에 따른  메세지 리턴\n\n\n  var roomCardMessage = function roomCardMessage() {\n    if (!dayPickerHook.from) return LANG(\"please_slect_date_at_calender\");\n    if (dayPickerHook.from && !dayPickerHook.to) return LANG(\"please_select_checkOut_date\");\n    if (dayPickerHook.from && dayPickerHook.to) return LANG(\"there_is_no_room_in_selected_date\");\n    return \"\";\n  };\n\n  var bookingCompleteFn =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var agreePrivacyPolicy, email, memo, name, password, phoneNumber, startBookingVariables, result, _muResult, transactionId, authResult, GetPaymentAuth, houseName;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!bookerInfoValidation()) {\n                _context.next = 15;\n                break;\n              }\n\n              agreePrivacyPolicy = bookerInfo.agreePrivacyPolicy, email = bookerInfo.email, memo = bookerInfo.memo, name = bookerInfo.name, password = bookerInfo.password, phoneNumber = bookerInfo.phoneNumber;\n\n              if (startBookingForPublicMu) {\n                _context.next = 4;\n                break;\n              }\n\n              throw Error(\"startBookingForPublicMu 가 없음\");\n\n            case 4:\n              startBookingVariables = {\n                bookerParams: {\n                  agreePrivacyPolicy: agreePrivacyPolicy,\n                  email: email,\n                  memo: memo,\n                  name: name,\n                  password: password,\n                  phoneNumber: phoneNumber,\n                  funnel: Funnels.HOMEPAGE\n                },\n                checkInOut: {\n                  checkIn: to4YMMDD(dayPickerHook.from),\n                  checkOut: to4YMMDD(dayPickerHook.to)\n                },\n                guestDomitoryParams: roomSelectInfo.filter(function (room) {\n                  return room.pricingType === PricingType.DOMITORY;\n                }).map(function (room) {\n                  return {\n                    roomTypeId: room.roomTypeId,\n                    countFemale: room.count.female,\n                    countMale: room.count.male\n                  };\n                }),\n                guestRoomParams: roomSelectInfo.filter(function (room) {\n                  return room.pricingType === PricingType.ROOM;\n                }).map(function (room) {\n                  return {\n                    roomTypeId: room.roomTypeId,\n                    countRoom: room.count.roomCount\n                  };\n                }),\n                paymentParams: {\n                  payMethod: payMethodHook.selectedOption.value,\n                  price: priceHook.value\n                }\n              };\n              _context.next = 7;\n              return startBookingForPublicMu({\n                variables: startBookingVariables\n              });\n\n            case 7:\n              result = _context.sent;\n              if (result) rsevModalHook.closeModal();\n              _muResult = muResult(result, \"StartBookingForPublic\", \"bookingTransaction\"), transactionId = _muResult.transactionId;\n\n              if (!transactionId) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 13;\n              return payAuthQu({\n                price: priceHook.value\n              });\n\n            case 13:\n              authResult = _context.sent;\n\n              if (authResult && authResult.data.GetPaymentAuth.auth) {\n                GetPaymentAuth = authResult.data.GetPaymentAuth;\n                houseName = GetPaymentAuth.houseName;\n                openNiceModal({\n                  resvInfo: startBookingVariables,\n                  transactionId: transactionId,\n                  authInfo: authResult.data.GetPaymentAuth,\n                  houseName: houseName || \"\"\n                });\n              }\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function bookingCompleteFn() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // 예약하기 버튼 클릭1시\n\n\n  var handleResvBtnClick = function handleResvBtnClick() {\n    if (roomSelectValidation()) {\n      if (isHost) {\n        bookingModalHook.openModal({\n          mode: \"CREATE\",\n          createParam: _objectSpread({}, DEFAULT_BOOKING, {\n            checkOut: dayPickerHook.to,\n            checkIn: dayPickerHook.from\n          }, divisionRoomSelectInfo(roomSelectInfo))\n        });\n      } else {\n        if (isMobile) {\n          bookingInfoModal.openModal();\n        } else {\n          rsevModalHook.openModal();\n        }\n      }\n    }\n  };\n  /* 모바일 날자 검색 UI */\n\n\n  if (step === \"search\" && isMobile) {\n    return React.createElement(\"div\", {\n      id: \"JDreservation\",\n      className: \"JDreservation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"JDreservation__mobileRoomSearcherWrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(RoomSearcher, {\n      callBackOnSearch: function callBackOnSearch(result) {\n        dayPickerHook.setFrom(result.checkIn);\n        dayPickerHook.setTo(result.checkOut);\n        dayPickerHook.setEntered(result.checkOut);\n        setStep(\"select\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    })));\n  }\n\n  return React.createElement(\"div\", {\n    id: \"JDreservation\",\n    className: \"JDreservation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349\n    },\n    __self: this\n  }, React.createElement(Helmet, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350\n    },\n    __self: this\n  }, React.createElement(\"script\", {\n    src: \"https://web.nicepay.co.kr/v3/webstd/js/nicepay-2.0.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"flex-grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"flex-grid__col JDreservation__card-grid col--full-4 col--lg-5 col--wmd-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354\n    },\n    __self: this\n  }, React.createElement(Card, {\n    className: \"JDmargin-bottom0 JDreservation__card JDreservation__dayPickerCard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    className: \"JDreservation__sectionTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }, \"\\u2460 \", LANG(\"select_date\")), React.createElement(JDdayPicker, Object.assign({}, dayPickerHook, {\n    displayHeader: !isMobile,\n    displayCaption: !isMobile,\n    displayInfo: !isMobile,\n    canSelectBeforeDay: false,\n    horizen: isMobile,\n    mode: \"reservation\",\n    className: \"JDreservation__topDayPicker JDmargin-bottom0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"flex-grid__col JDreservation__roomSelect-grid col--full-8 col--lg-7 col--wmd-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372\n    },\n    __self: this\n  }, React.createElement(Card, {\n    fullWidth: isMobile,\n    className: \"JDz-index-1 JDstandard-space0 JDreservation__card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    className: \"JDreservation__sectionTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377\n    },\n    __self: this\n  }, \"\\u2461 \", LANG(\"room_select\")), React.createElement(GetAllAvailRoomQu, {\n    skip: !dayPickerHook.from || !dayPickerHook.to,\n    query: GET_ALL_ROOM_TYPE_FOR_BOOKING,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382\n    },\n    __self: this\n  }, function (_ref3) {\n    var roomTypeData = _ref3.data,\n        roomAvailCountLoading = _ref3.loading,\n        error = _ref3.error;\n    var roomTypes = queryDataFormater(roomTypeData, \"GetAllRoomTypeForBooker\", \"roomTypes\", undefined);\n    return !isEmpty(roomTypes) ? roomTypes.map(function (roomType, index) {\n      return React.createElement(RoomTypeCardWrap, {\n        reservationHooks: reservationHooks,\n        windowWidth: windowWidth,\n        roomTypeData: roomType,\n        isHost: isHost,\n        houseId: houseId,\n        key: \"roomCard\".concat(roomType._id),\n        lastCard: isLast(index, roomTypes),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      });\n    }) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"JDreservation__cardMessage JDtextcolor--placeHolder JDtext-align-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, React.createElement(Preloader, {\n      className: \"JDstandard-margin0\",\n      size: \"large\",\n      loading: roomAvailCountLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), roomAvailCountLoading || roomCardMessage()));\n  })), !isMobile && React.createElement(Card, {\n    fullWidth: isMobile,\n    className: \"JDstandard-space0 JDmargin-bottom0 JDreservation__confirmCard JDreservation__card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    className: \"JDreservation__sectionTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430\n    },\n    __self: this\n  }, LANG(\"check_selection\")), React.createElement(BookingInfoBox, {\n    roomTypeInfo: roomInfoHook[0],\n    from: dayPickerHook.from,\n    to: dayPickerHook.to,\n    roomSelectInfo: roomSelectInfo,\n    totalPrice: priceHook.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433\n    },\n    __self: this\n  })), isEmpty(roomSelectInfo) && isMobile && React.createElement(Button, {\n    id: \"ResvBtn\",\n    thema: \"primary\",\n    icon: \"return\",\n    onClick: function onClick() {\n      setStep(\"search\");\n    },\n    label: LANG(\"go_back\"),\n    size: \"longLarge\",\n    className: \"JDmarginTop JDmargin-bottom0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443\n    },\n    __self: this\n  }), !isEmpty(roomSelectInfo) && React.createElement(Button, {\n    id: \"ResvBtn\",\n    thema: \"primary\",\n    onClick: handleResvBtnClick,\n    label: LANG(\"make_reservation\"),\n    size: \"longLarge\",\n    className: \"JDmarginTop JDmargin-bottom0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456\n    },\n    __self: this\n  }))), context && React.createElement(BookingModalWrap, {\n    startBookingCallBack: function startBookingCallBack(result) {\n      if (result !== \"error\") {\n        modalHook && modalHook.closeModal();\n      }\n    },\n    context: context,\n    modalHook: bookingModalHook,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469\n    },\n    __self: this\n  }), React.createElement(PayMentModal, {\n    bookingCompleteFn: bookingCompleteFn,\n    createLoading: createLoading,\n    reservationHooks: reservationHooks,\n    modalHook: rsevModalHook,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480\n    },\n    __self: this\n  }), isMobile && React.createElement(BookingInfoModal, {\n    paymentModalHook: rsevModalHook,\n    modalHook: bookingInfoModal,\n    roomTypeInfo: roomInfoHook[0],\n    from: dayPickerHook.from,\n    to: dayPickerHook.to,\n    roomSelectInfo: roomSelectInfo,\n    totalPrice: priceHook.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488\n    },\n    __self: this\n  }), React.createElement(JDtoastModal, Object.assign({\n    confirm: true,\n    center: true,\n    falseMessage: LANG(\"close\"),\n    confirmCallBackFn: resvConfirmCallBackFunc\n  }, confirmModalHook, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498\n    },\n    __self: this\n  })), React.createElement(JDtoastModal, Object.assign({}, toastModalHook, {\n    isAlert: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505\n    },\n    __self: this\n  })));\n};\n\nexport default windowSize(ErrProtecter(Reservation));","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/outPages/reservation/Reservation.tsx"],"names":["React","useState","Fragment","useEffect","windowSize","Query","ErrProtecter","JDdayPicker","useDayPicker","useModal","useCheckBox","useSelect","useInput","LANG","Button","Card","$","BookingInfoBox","PayMentModal","RoomTypeCardWrap","isEmpty","queryDataFormater","insideRedirect","muResult","isName","isPhone","JDtoastModal","WindowSize","PricingType","PAYMETHOD_FOR_BOOKER_OP","Funnels","GET_ALL_ROOM_TYPE_FOR_BOOKING","Preloader","Helmet","openNiceModal","reservationDevelop","developEvent","RoomSearcher","BookingInfoModal","isLast","BookingModalWrap","DEFAULT_BOOKING","divisionRoomSelectInfo","to4YMMDD","GetAllAvailRoomQu","Reservation","windowWidth","startBookingForPublicMu","context","payAuthQu","createLoading","modalHook","isHost","houseId","house","_id","undefined","defaultBookingInfo","name","password","memo","email","phoneNumber","agreePrivacyPolicy","isMobile","PHABLET","dayPickerHook","confirmModalHook","step","setStep","roomSelectInfo","setRoomSelectInfo","bookerInfo","setBookerInfo","rsevModalHook","toastModalHook","bookingInfoModal","roomInfoHook","bookingModalHook","sendSmsHook","priceHook","payMethodHook","reservationHooks","resvConfirmCallBackFunc","flag","publicKey","sessionStorage","getItem","location","href","reload","to","from","theHeight","height","window","parent","postMessage","roomSelectValidation","openModal","txt","bookerInfoValidation","roomCardMessage","bookingCompleteFn","Error","startBookingVariables","bookerParams","funnel","HOMEPAGE","checkInOut","checkIn","checkOut","guestDomitoryParams","filter","room","pricingType","DOMITORY","map","roomTypeId","countFemale","count","female","countMale","male","guestRoomParams","ROOM","countRoom","roomCount","paymentParams","payMethod","selectedOption","value","price","variables","result","closeModal","transactionId","authResult","data","GetPaymentAuth","auth","houseName","resvInfo","authInfo","handleResvBtnClick","mode","createParam","setFrom","setTo","setEntered","roomTypeData","roomAvailCountLoading","loading","error","roomTypes","roomType","index"],"mappings":"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","sourcesContent":["import React, { useState, Fragment, useEffect } from \"react\";\r\nimport windowSize, { WindowSizeProps } from \"react-window-size\";\r\nimport { Query } from \"react-apollo\";\r\nimport ErrProtecter from \"../../../utils/errProtect\";\r\nimport JDdayPicker from \"../../../atoms/dayPicker/DayPicker\";\r\nimport {\r\n  useDayPicker,\r\n  useModal,\r\n  IUseModal,\r\n  useCheckBox,\r\n  useSelect,\r\n  IUseDayPicker,\r\n  IUseSelect,\r\n  useInput,\r\n  TUseInput,\r\n  LANG\r\n} from \"../../../hooks/hook\";\r\nimport \"./Reservation.scss\";\r\nimport Button from \"../../../atoms/button/Button\";\r\nimport Card from \"../../../atoms/cards/Card\";\r\nimport {\r\n  getAllRoomTypeForBooker,\r\n  startBookingForPublic,\r\n  startBookingForPublicVariables,\r\n  getPaymentAuth,\r\n  getPaymentAuthVariables\r\n} from \"../../../types/api\";\r\nimport $ from \"jquery\";\r\nimport BookingInfoBox from \"./components/bookingInfoBox\";\r\nimport PayMentModal from \"./components/paymentModal\";\r\nimport RoomTypeCardWrap from \"./components/roomTypeCards/roomTypeCardsWrap\";\r\nimport {\r\n  isEmpty,\r\n  queryDataFormater,\r\n  insideRedirect,\r\n  muResult\r\n} from \"../../../utils/utils\";\r\nimport { isName, isPhone } from \"../../../utils/inputValidations\";\r\nimport { JDtoastModal } from \"../../../atoms/modal/Modal\";\r\nimport { IRoomType, IMu } from \"../../../types/interface\";\r\nimport {\r\n  WindowSize,\r\n  PricingType,\r\n  PAYMETHOD_FOR_BOOKER_OP,\r\n  PayMethod,\r\n  Funnels\r\n} from \"../../../types/enum\";\r\nimport { GET_ALL_ROOM_TYPE_FOR_BOOKING } from \"../../../queries\";\r\nimport Preloader from \"../../../atoms/preloader/Preloader\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { openNiceModal } from \"./components/doPay\";\r\nimport { reservationDevelop, developEvent } from \"../../../utils/developMaster\";\r\nimport RoomSearcher from \"../../../components/roomSearcher.tsx/RoomSearcher\";\r\nimport BookingInfoModal from \"./components/roomTypeCards/bookingInfoModal\";\r\nimport isLast from \"../../../utils/isLast\";\r\nimport { IContext } from \"../BookingHostRouter\";\r\nimport { ApolloQueryResult } from \"apollo-client\";\r\nimport BookingModalWrap from \"../../../components/bookingModal/BookingModalWrap\";\r\nimport { DEFAULT_BOOKING } from \"../../../types/defaults\";\r\nimport { divisionRoomSelectInfo } from \"../../../utils/typeChanger\";\r\nimport { to4YMMDD } from \"../../../utils/setMidNight\";\r\nimport {\r\n  IBookingModalProp,\r\n  IRoomSelectInfo\r\n} from \"../../../components/bookingModal/declaration\";\r\n\r\nexport interface IBookerInfo {\r\n  name: string;\r\n  password: string;\r\n  memo: string;\r\n  email: string;\r\n  phoneNumber: string;\r\n  agreePrivacyPolicy: boolean;\r\n}\r\n\r\nexport interface IReservationHooks {\r\n  priceHook: TUseInput<number>;\r\n  roomInfoHook: [\r\n    IRoomType[],\r\n    React.Dispatch<React.SetStateAction<IRoomType[]>>\r\n  ];\r\n  toastModalHook: IUseModal<any>;\r\n  bookerInfo: IBookerInfo;\r\n  setBookerInfo: React.Dispatch<React.SetStateAction<IBookerInfo>>;\r\n  dayPickerHook: IUseDayPicker;\r\n  roomSelectInfo: IRoomSelectInfo[];\r\n  setRoomSelectInfo: React.Dispatch<React.SetStateAction<IRoomSelectInfo[]>>;\r\n  payMethodHook: IUseSelect<PayMethod>;\r\n  sendSmsHook: {\r\n    checked: boolean;\r\n    onChange: (value: boolean) => void;\r\n  };\r\n}\r\n\r\nclass GetAllAvailRoomQu extends Query<getAllRoomTypeForBooker> {}\r\nexport interface ISetBookingInfo\r\n  extends React.Dispatch<React.SetStateAction<IBookerInfo>> {}\r\n\r\ninterface IProps {\r\n  startBookingForPublicMu?: IMu<\r\n    startBookingForPublic,\r\n    startBookingForPublicVariables\r\n  >;\r\n  payAuthQu: (\r\n    variables?: getPaymentAuthVariables | undefined\r\n  ) => Promise<ApolloQueryResult<getPaymentAuth>>;\r\n  createLoading: boolean;\r\n  context?: IContext;\r\n  modalHook?: IUseModal;\r\n}\r\n\r\nconst Reservation: React.SFC<IProps & WindowSizeProps> = ({\r\n  windowWidth,\r\n  startBookingForPublicMu,\r\n  context,\r\n  payAuthQu,\r\n  createLoading,\r\n  modalHook\r\n}) => {\r\n  const isHost = context ? true : false;\r\n  const houseId = context ? context.house._id : undefined;\r\n  const defaultBookingInfo: IBookerInfo = {\r\n    name: \"\",\r\n    password: \"\",\r\n    memo: \"\",\r\n    email: \"colton950901@naver.com\",\r\n    phoneNumber: \"\",\r\n    agreePrivacyPolicy: isHost ? true : false\r\n  };\r\n\r\n  const isMobile = windowWidth < WindowSize.PHABLET;\r\n  const dayPickerHook = useDayPicker(null, null);\r\n  const confirmModalHook = useModal(false);\r\n  // 모바일에서만 사용\r\n  const [step, setStep] = useState<\"search\" | \"select\">(\"search\");\r\n  const [roomSelectInfo, setRoomSelectInfo] = useState<IRoomSelectInfo[]>([]);\r\n  const [bookerInfo, setBookerInfo] = useState<IBookerInfo>(defaultBookingInfo);\r\n  const rsevModalHook = useModal(false);\r\n  const toastModalHook = useModal(false);\r\n  const bookingInfoModal = useModal(false);\r\n  const roomInfoHook = useState<IRoomType[]>([]);\r\n  const bookingModalHook = useModal<IBookingModalProp>();\r\n  const sendSmsHook = useCheckBox(isHost ? false : true);\r\n  const priceHook = useInput(0);\r\n  const payMethodHook = useSelect(PAYMETHOD_FOR_BOOKER_OP[0]);\r\n\r\n  const reservationHooks: IReservationHooks = {\r\n    priceHook,\r\n    roomInfoHook,\r\n    toastModalHook,\r\n    dayPickerHook,\r\n    bookerInfo,\r\n    setBookerInfo,\r\n    roomSelectInfo,\r\n    setRoomSelectInfo,\r\n    sendSmsHook,\r\n    payMethodHook\r\n  };\r\n\r\n  const resvConfirmCallBackFunc = (flag: boolean) => {\r\n    if (flag) {\r\n      const publicKey = sessionStorage.getItem(\"hpk\");\r\n      const { name, password, phoneNumber } = bookerInfo;\r\n      location.href = insideRedirect(\r\n        `outpage/checkReservation/${publicKey}/${name}/${phoneNumber}/${password}`\r\n      );\r\n    } else {\r\n      location.reload();\r\n    }\r\n  };\r\n\r\n  // Deprecated\r\n  developEvent(() => {\r\n    reservationDevelop(reservationHooks);\r\n  });\r\n\r\n  // 날자를 선택하면 예약선택 상태 초기화\r\n  useEffect(() => {\r\n    setRoomSelectInfo([]);\r\n    setBookerInfo(defaultBookingInfo);\r\n  }, [dayPickerHook.to, dayPickerHook.from]);\r\n\r\n  // Iframe 높이조절\r\n  useEffect(() => {\r\n    const theHeight = $(\"#JDreservation\").height() || 1000;\r\n    window.parent.postMessage({ height: theHeight }, \"*\");\r\n  });\r\n\r\n  //방선택 을 했는지 확인\r\n  const roomSelectValidation = () => {\r\n    if (isEmpty(roomSelectInfo)) {\r\n      toastModalHook.openModal({ txt: LANG(\"no_room_selected\") });\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // 예약전 벨리데이션\r\n  const bookerInfoValidation = (): boolean => {\r\n    if (isName(bookerInfo.name) !== true) {\r\n      toastModalHook.openModal({ txt: LANG(\"name_is_not_valid\") });\r\n      return false;\r\n    }\r\n    if (isPhone(bookerInfo.phoneNumber) !== true) {\r\n      toastModalHook.openModal({ txt: LANG(\"phoneNum_is_not_valid\") });\r\n      return false;\r\n    }\r\n    if (bookerInfo.password === \"\") {\r\n      toastModalHook.openModal({ txt: LANG(\"input_your_password_please\") });\r\n      return false;\r\n    }\r\n    if (bookerInfo.agreePrivacyPolicy === false) {\r\n      toastModalHook.openModal({\r\n        txt: LANG(\"please_agree_collect_personal_info\")\r\n      });\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // 날자와 방현황에 따른  메세지 리턴\r\n  const roomCardMessage = () => {\r\n    if (!dayPickerHook.from) return LANG(\"please_slect_date_at_calender\");\r\n    if (dayPickerHook.from && !dayPickerHook.to)\r\n      return LANG(\"please_select_checkOut_date\");\r\n    if (dayPickerHook.from && dayPickerHook.to)\r\n      return LANG(\"there_is_no_room_in_selected_date\");\r\n    return \"\";\r\n  };\r\n\r\n  const bookingCompleteFn = async () => {\r\n    if (bookerInfoValidation()) {\r\n      const {\r\n        agreePrivacyPolicy,\r\n        email,\r\n        memo,\r\n        name,\r\n        password,\r\n        phoneNumber\r\n      } = bookerInfo;\r\n\r\n      if (!startBookingForPublicMu)\r\n        throw Error(\"startBookingForPublicMu 가 없음\");\r\n\r\n      const startBookingVariables = {\r\n        bookerParams: {\r\n          agreePrivacyPolicy,\r\n          email,\r\n          memo,\r\n          name,\r\n          password,\r\n          phoneNumber,\r\n          funnel: Funnels.HOMEPAGE\r\n        },\r\n        checkInOut: {\r\n          checkIn: to4YMMDD(dayPickerHook.from),\r\n          checkOut: to4YMMDD(dayPickerHook.to)\r\n        },\r\n        guestDomitoryParams: roomSelectInfo\r\n          .filter(room => room.pricingType === PricingType.DOMITORY)\r\n          .map(room => ({\r\n            roomTypeId: room.roomTypeId,\r\n            countFemale: room.count.female,\r\n            countMale: room.count.male\r\n          })),\r\n        guestRoomParams: roomSelectInfo\r\n          .filter(room => room.pricingType === PricingType.ROOM)\r\n          .map(room => ({\r\n            roomTypeId: room.roomTypeId,\r\n            countRoom: room.count.roomCount\r\n          })),\r\n        paymentParams: {\r\n          payMethod: payMethodHook.selectedOption!.value,\r\n          price: priceHook.value\r\n        }\r\n      };\r\n\r\n      const result = await startBookingForPublicMu({\r\n        variables: startBookingVariables\r\n      });\r\n\r\n      if (result) rsevModalHook.closeModal();\r\n\r\n      const { transactionId }: any = muResult(\r\n        result,\r\n        \"StartBookingForPublic\",\r\n        \"bookingTransaction\"\r\n      );\r\n\r\n      if (transactionId) {\r\n        // 나이스 모듈 오픈전 인증을 받음.\r\n        const authResult = await payAuthQu({ price: priceHook.value });\r\n        if (authResult && authResult.data.GetPaymentAuth.auth) {\r\n          const { GetPaymentAuth } = authResult.data;\r\n          const { houseName } = GetPaymentAuth;\r\n          openNiceModal({\r\n            resvInfo: startBookingVariables,\r\n            transactionId,\r\n            authInfo: authResult.data.GetPaymentAuth,\r\n            houseName: houseName || \"\"\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // 예약하기 버튼 클릭1시\r\n  const handleResvBtnClick = () => {\r\n    if (roomSelectValidation()) {\r\n      if (isHost) {\r\n        bookingModalHook.openModal({\r\n          mode: \"CREATE\",\r\n          createParam: {\r\n            ...DEFAULT_BOOKING,\r\n            checkOut: dayPickerHook.to,\r\n            checkIn: dayPickerHook.from,\r\n            ...divisionRoomSelectInfo(roomSelectInfo)\r\n          }\r\n        });\r\n      } else {\r\n        if (isMobile) {\r\n          bookingInfoModal.openModal();\r\n        } else {\r\n          rsevModalHook.openModal();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /* 모바일 날자 검색 UI */\r\n  if (step === \"search\" && isMobile) {\r\n    return (\r\n      <div id=\"JDreservation\" className=\"JDreservation\">\r\n        <div className=\"JDreservation__mobileRoomSearcherWrap\">\r\n          <RoomSearcher\r\n            callBackOnSearch={result => {\r\n              dayPickerHook.setFrom(result.checkIn);\r\n              dayPickerHook.setTo(result.checkOut);\r\n              dayPickerHook.setEntered(result.checkOut);\r\n              setStep(\"select\");\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div id=\"JDreservation\" className=\"JDreservation\">\r\n      <Helmet>\r\n        <script src=\"https://web.nicepay.co.kr/v3/webstd/js/nicepay-2.0.js\" />\r\n      </Helmet>\r\n      <div className=\"flex-grid\">\r\n        <div className=\"flex-grid__col JDreservation__card-grid col--full-4 col--lg-5 col--wmd-12\">\r\n          <Card className=\"JDmargin-bottom0 JDreservation__card JDreservation__dayPickerCard\">\r\n            <h6 className=\"JDreservation__sectionTitle\">\r\n              ① {LANG(\"select_date\")}\r\n            </h6>\r\n            {/* TODO: change 될때마다 roomSelectInfo를 초기화 해주어야함 */}\r\n            <JDdayPicker\r\n              {...dayPickerHook}\r\n              displayHeader={!isMobile}\r\n              displayCaption={!isMobile}\r\n              displayInfo={!isMobile}\r\n              canSelectBeforeDay={false}\r\n              horizen={isMobile}\r\n              mode=\"reservation\"\r\n              className=\"JDreservation__topDayPicker JDmargin-bottom0\"\r\n            />\r\n          </Card>\r\n        </div>\r\n        <div className=\"flex-grid__col JDreservation__roomSelect-grid col--full-8 col--lg-7 col--wmd-12\">\r\n          <Card\r\n            fullWidth={isMobile}\r\n            className=\"JDz-index-1 JDstandard-space0 JDreservation__card\"\r\n          >\r\n            <h6 className=\"JDreservation__sectionTitle\">\r\n              ② {LANG(\"room_select\")}\r\n            </h6>\r\n            {/* TODO: roomTypes들의 반복문을 통해서 만들고 해당 정보는 roomSelectInfo 에서 filter를 통해서 가져와야함 */}\r\n\r\n            <GetAllAvailRoomQu\r\n              skip={!dayPickerHook.from || !dayPickerHook.to}\r\n              query={GET_ALL_ROOM_TYPE_FOR_BOOKING}\r\n            >\r\n              {({\r\n                data: roomTypeData,\r\n                loading: roomAvailCountLoading,\r\n                error\r\n              }) => {\r\n                const roomTypes = queryDataFormater(\r\n                  roomTypeData,\r\n                  \"GetAllRoomTypeForBooker\",\r\n                  \"roomTypes\",\r\n                  undefined\r\n                );\r\n\r\n                return !isEmpty(roomTypes) ? (\r\n                  roomTypes.map((roomType, index) => (\r\n                    <RoomTypeCardWrap\r\n                      reservationHooks={reservationHooks}\r\n                      windowWidth={windowWidth}\r\n                      roomTypeData={roomType}\r\n                      isHost={isHost}\r\n                      houseId={houseId}\r\n                      key={`roomCard${roomType._id}`}\r\n                      lastCard={isLast(index, roomTypes)}\r\n                    />\r\n                  ))\r\n                ) : (\r\n                  <Fragment>\r\n                    <h4 className=\"JDreservation__cardMessage JDtextcolor--placeHolder JDtext-align-center\">\r\n                      <Preloader\r\n                        className=\"JDstandard-margin0\"\r\n                        size=\"large\"\r\n                        loading={roomAvailCountLoading}\r\n                      />\r\n                      {roomAvailCountLoading || roomCardMessage()}\r\n                    </h4>\r\n                  </Fragment>\r\n                );\r\n              }}\r\n            </GetAllAvailRoomQu>\r\n          </Card>\r\n          {!isMobile && (\r\n            <Card\r\n              fullWidth={isMobile}\r\n              className={`JDstandard-space0 JDmargin-bottom0 JDreservation__confirmCard JDreservation__card`}\r\n            >\r\n              <h6 className=\"JDreservation__sectionTitle\">\r\n                {LANG(\"check_selection\")}\r\n              </h6>\r\n              <BookingInfoBox\r\n                roomTypeInfo={roomInfoHook[0]}\r\n                from={dayPickerHook.from}\r\n                to={dayPickerHook.to}\r\n                roomSelectInfo={roomSelectInfo}\r\n                totalPrice={priceHook.value}\r\n              />\r\n            </Card>\r\n          )}\r\n          {isEmpty(roomSelectInfo) && isMobile && (\r\n            <Button\r\n              id=\"ResvBtn\"\r\n              thema=\"primary\"\r\n              icon=\"return\"\r\n              onClick={() => {\r\n                setStep(\"search\");\r\n              }}\r\n              label={LANG(\"go_back\")}\r\n              size=\"longLarge\"\r\n              className=\"JDmarginTop JDmargin-bottom0\"\r\n            />\r\n          )}\r\n          {!isEmpty(roomSelectInfo) && (\r\n            <Button\r\n              id=\"ResvBtn\"\r\n              thema=\"primary\"\r\n              onClick={handleResvBtnClick}\r\n              label={LANG(\"make_reservation\")}\r\n              size=\"longLarge\"\r\n              className=\"JDmarginTop JDmargin-bottom0\"\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      {/* 호스트예약일떄 */}\r\n      {context && (\r\n        <BookingModalWrap\r\n          startBookingCallBack={result => {\r\n            if (result !== \"error\") {\r\n              modalHook && modalHook.closeModal();\r\n            }\r\n          }}\r\n          context={context}\r\n          modalHook={bookingModalHook}\r\n        />\r\n      )}\r\n      {/* 게스트예약일떄 */}\r\n      <PayMentModal\r\n        bookingCompleteFn={bookingCompleteFn}\r\n        createLoading={createLoading}\r\n        reservationHooks={reservationHooks}\r\n        modalHook={rsevModalHook}\r\n      />\r\n      {/* 모바일 + 게스트일떄 */}\r\n      {isMobile && (\r\n        <BookingInfoModal\r\n          paymentModalHook={rsevModalHook}\r\n          modalHook={bookingInfoModal}\r\n          roomTypeInfo={roomInfoHook[0]}\r\n          from={dayPickerHook.from}\r\n          to={dayPickerHook.to}\r\n          roomSelectInfo={roomSelectInfo}\r\n          totalPrice={priceHook.value}\r\n        />\r\n      )}\r\n      <JDtoastModal\r\n        confirm\r\n        center\r\n        falseMessage={LANG(\"close\")}\r\n        confirmCallBackFn={resvConfirmCallBackFunc}\r\n        {...confirmModalHook}\r\n      />\r\n      <JDtoastModal {...toastModalHook} isAlert />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default windowSize<IProps>(ErrProtecter(Reservation));\r\n"]},"metadata":{},"sourceType":"module"}