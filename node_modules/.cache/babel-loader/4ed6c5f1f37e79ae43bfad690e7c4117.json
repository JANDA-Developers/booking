{"ast":null,"code":"export var GuestTypeAdd;\n\n(function (GuestTypeAdd) {\n  GuestTypeAdd[\"BLOCK\"] = \"BLOCK\";\n  GuestTypeAdd[\"GUEST\"] = \"GUEST\";\n  GuestTypeAdd[\"MARK\"] = \"MARK\";\n  GuestTypeAdd[\"GHOST\"] = \"GHOST\";\n})(GuestTypeAdd || (GuestTypeAdd = {}));","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/bookingHost/assig/helpers/assigIntrerface.ts"],"names":["GuestTypeAdd"],"mappings":"AAoRA,WAAYA,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y","sourcesContent":["import {\r\n  RoomGender,\r\n  PricingType,\r\n  Gender,\r\n  BookingStatus\r\n} from \"../../../../types/enum\";\r\nimport {\r\n  IRoomType,\r\n  IHouseConfig,\r\n  IBlockOp,\r\n  TBookingModalOpenWithMark\r\n} from \"../../../../types/interface\";\r\nimport { MutationFn, FetchResult } from \"react-apollo\";\r\nimport {\r\n  allocateGuestToRoom,\r\n  allocateGuestToRoomVariables,\r\n  deleteBlock,\r\n  deleteBlockVariables,\r\n  updateBooking,\r\n  updateBookingVariables,\r\n  deleteGuests,\r\n  deleteGuestsVariables,\r\n  createBlock,\r\n  createBlockVariables,\r\n  deleteBooking,\r\n  deleteBookingVariables,\r\n  updateBlockOption,\r\n  updateBlockOptionVariables,\r\n  getAllRoomTypeWithGuest_GetGuests_guests_GuestRoom_blockOption,\r\n  startBooking,\r\n  getAllRoomTypeWithGuest_GetGuests_guests,\r\n  getBooking_GetBooking_booking_roomTypes,\r\n  startBooking_StartBooking,\r\n  getAllRoomTypeWithGuestVariables,\r\n  getAllRoomTypeWithGuest,\r\n  getBooking_GetBooking_booking_guests\r\n} from \"../../../../types/api\";\r\nimport { IUseModal } from \"../../../../hooks/hook\";\r\nimport { string } from \"prop-types\";\r\nimport { MouseEvent } from \"react\";\r\nimport { IMoveCount, IDotPoint } from \"../../../../atoms/timeline/Timeline\";\r\nimport { ApolloQueryResult } from \"apollo-client\";\r\n\r\nexport interface IAssigTimelineContext {\r\n  isMobile: boolean;\r\n  windowWidth: number;\r\n  windowHeight: number;\r\n  houseConfig: IHouseConfig;\r\n  groupData: IAssigGroup[];\r\n  houseId: string;\r\n  shortKey?: TShortKey;\r\n}\r\n\r\nexport type ICreateCreateItem = (\r\n  canvasInfo: ICanvasMenuTooltipProps,\r\n  gender?: Gender | undefined\r\n) => void;\r\n\r\nexport type TIsTherePerson = (\r\n  startTime: number,\r\n  endTime: number,\r\n  groupId: string,\r\n  guest: IAssigItem\r\n) => boolean;\r\n\r\nexport type TFilterTimeZone = (\r\n  from: number,\r\n  to: number,\r\n  roomId?: string | undefined\r\n) => IAssigItem[];\r\n\r\nexport type TGetItemById = (guestId: string) => IAssigItem;\r\n\r\nexport type TPopUpItemMenuTooltip = (\r\n  location: {\r\n    clientX: number;\r\n    clientY: number;\r\n  },\r\n  target: IAssigItem\r\n) => Promise<void>;\r\n\r\nexport type TGetGroupById = (groupId: string) => IAssigGroup;\r\n\r\nexport type TRemoveMark = () => void;\r\n\r\nexport type TDleteGhost = () => void;\r\n\r\nexport type TAllTooltipsHide = (\r\n  except?: \"blockMenu\" | \"canvasMenu\" | \"createMenu\" | \"itemTooltip\"\r\n) => void;\r\n\r\nexport type TCreateMark = (\r\n  start: number,\r\n  end: number,\r\n  groupIds: string[]\r\n) => void;\r\n\r\nexport type TDeleteItemById = (id: string) => void;\r\n\r\nexport interface ILocation {\r\n  clientX: number;\r\n  clientY: number;\r\n}\r\n\r\nexport type TOpenCreateMenu = (\r\n  Eorlocation: React.MouseEvent<HTMLElement> | ILocation,\r\n  props?: ICreateMenuProps\r\n) => void;\r\n\r\nexport type TOpenBlockMenu = (\r\n  Eorlocation: React.MouseEvent<HTMLElement> | ILocation,\r\n  props?: IBlcokMenuProps\r\n) => void;\r\n\r\nexport type TChangeMarkToGhost = () => void;\r\n\r\nexport type THandleDraggingCell = (\r\n  e: any,\r\n  moveCounts: IMoveCount,\r\n  dotPoint: IDotPoint\r\n) => void;\r\n\r\nexport type TOpenCanvasMenuTooltip = (\r\n  Eorlocation: React.MouseEvent<HTMLElement> | ILocation\r\n) => void;\r\n\r\nexport type TIsGenderSafe = (\r\n  targetGroup: IAssigGroup,\r\n  item: IAssigItem,\r\n  start: number,\r\n  end: number\r\n) => boolean;\r\n\r\nexport type TResizeBlockBlock = (targetGuest: IAssigItem, time: number) => void;\r\n\r\nexport type TAllocateGuest = (\r\n  itemId: string,\r\n  newGroupOrder: number,\r\n  originalCopy?: IAssigItem[]\r\n) => void;\r\n\r\nexport type TAllocateItem = (\r\n  targetGuest: IAssigItem,\r\n  newGroupOrder: number\r\n) => void;\r\n\r\nexport type TShortKey = (\r\n  flag: \"canvas\" | \"guestItem\",\r\n  e: React.MouseEvent<HTMLElement>,\r\n  time?: number | undefined,\r\n  groupId?: string | undefined,\r\n  itemId?: string | undefined\r\n) => Promise<void>;\r\n\r\nexport type TAddBlock = (\r\n  start: number,\r\n  end: number,\r\n  groupIds: string[]\r\n) => Promise<void>;\r\n\r\nexport type THandleMouseDown = (\r\n  e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n  gorup: EventTarget,\r\n  start: number\r\n) => void;\r\n\r\nexport type TGenderToggleById = (guestId: string) => void;\r\n\r\nexport type TResizeValidater = (item: IAssigItem, time: number) => void;\r\n\r\nexport type TResizeLinkedItems = (bookingId: string, newTime: number) => void;\r\n\r\nexport type TMoveLinkedItems = (bookingId: string, newTime: number) => void;\r\n\r\nexport type TDeleteBookingById = (bookingId: string, confrim?: boolean) => void;\r\n\r\nexport type IGetGuestByBookingId = (bookingId: string) => IAssigItem[];\r\n\r\nexport type TGetBookingIdByGuestId = (guestId: string) => string;\r\n\r\nexport type IAssigMutationLoading = {\r\n  updateBlockLoading: boolean;\r\n  createBlockLoading: boolean;\r\n  deleteBlockLoading: boolean;\r\n  deleteGuestLoading: boolean;\r\n  deleteBookingLoading: boolean;\r\n  updateBookingLoading: boolean;\r\n};\r\n\r\nexport type TToogleCheckIn = (\r\n  guestId?: string | undefined,\r\n  itemIndex?: number | undefined\r\n) => void;\r\n\r\nexport interface IAssigGroup {\r\n  id: string;\r\n  title: string;\r\n  roomTypeId: string;\r\n  roomTypeIndex: number;\r\n  roomIndex: number;\r\n  roomType: IRoomType;\r\n  room: {\r\n    _id: string;\r\n    name: string;\r\n  };\r\n  roomId: string;\r\n  placeIndex: number;\r\n  isLastOfRoom: boolean;\r\n  isLastOfRoomType: boolean;\r\n  bedIndex: number;\r\n  type: \"add\" | \"normal\" | \"addRoomType\" | \"noneGroup\";\r\n  roomGender: RoomGender | null;\r\n  pricingType: PricingType;\r\n}\r\n\r\nexport interface IAssigItemCrush {\r\n  itemIndex: number;\r\n  reason: string;\r\n  start: number | null;\r\n  end: number | null;\r\n}\r\n\r\nexport interface IAssigItem {\r\n  id: string;\r\n  itemIndex: number;\r\n  name: string;\r\n  group: string;\r\n  memo?: string;\r\n  isUnpaid?: boolean;\r\n  temp: boolean;\r\n  loading: boolean;\r\n  bookingId: string;\r\n  checkInInfo: boolean;\r\n  canSelect?: boolean;\r\n  showNewBadge: boolean;\r\n  roomTypeId: string;\r\n  roomId: string;\r\n  status: BookingStatus;\r\n  bedIndex: number;\r\n  start: number;\r\n  showEffect: boolean;\r\n  end: number;\r\n  gender: Gender | null;\r\n  canMove: boolean;\r\n  blockOption: IBlockOp;\r\n  type: GuestTypeAdd;\r\n}\r\n\r\nexport interface IAssigDataControl {\r\n  refetch: (\r\n    variables?: getAllRoomTypeWithGuestVariables | undefined\r\n  ) => Promise<ApolloQueryResult<getAllRoomTypeWithGuest>>;\r\n  deleteBookingMu: MutationFn<deleteBooking, deleteBookingVariables>;\r\n  allocateMu: MutationFn<allocateGuestToRoom, allocateGuestToRoomVariables>;\r\n  deleteBlockMu: MutationFn<deleteBlock, deleteBlockVariables>;\r\n  updateBookingMu: MutationFn<updateBooking, updateBookingVariables>;\r\n  deleteGuestsMu: MutationFn<deleteGuests, deleteGuestsVariables>;\r\n  createBlockMu: MutationFn<createBlock, createBlockVariables>;\r\n  updateBlockOpMu: MutationFn<updateBlockOption, updateBlockOptionVariables>;\r\n  stopPolling: () => void;\r\n  startPolling: () => void;\r\n  totalMuLoading: boolean;\r\n  mutationLoadings: IAssigMutationLoading;\r\n  networkStatus: number;\r\n}\r\n\r\nexport interface ICanvasMenuTooltipProps {\r\n  start: number;\r\n  end: number;\r\n  groupIds: string[];\r\n}\r\n\r\nexport interface IBlcokMenuProps {\r\n  item: IAssigItem;\r\n}\r\n\r\nexport enum GuestTypeAdd {\r\n  BLOCK = \"BLOCK\",\r\n  GUEST = \"GUEST\",\r\n  MARK = \"MARK\",\r\n  GHOST = \"GHOST\"\r\n}\r\n\r\nexport type TGetInfoesFromMarks = () => {\r\n  start: number;\r\n  end: number;\r\n  groupIds: string[];\r\n};\r\n\r\nexport interface ICreateMenuProps {\r\n  item: IAssigItem;\r\n}\r\n\r\nexport interface IDeletepgetDailyAssigUtilsMenuProps {\r\n  item: IAssigItem;\r\n}\r\n\r\nexport interface IDailyAssigUtils {\r\n  allTooltipsHide: (except: string) => void;\r\n  deleteBookingById: TDeleteBookingById;\r\n  getBookingIdByGuestId: TGetBookingIdByGuestId;\r\n  toogleCheckInOut: (\r\n    targetGuest: getAllRoomTypeWithGuest_GetGuests_guests\r\n  ) => Promise<void>;\r\n}\r\n\r\nexport interface IDeleteMenuProps {\r\n  item: IAssigItem;\r\n}\r\n\r\nexport interface IDailyAssigDataControl {\r\n  deleteBookingMu: MutationFn<deleteBooking, deleteBookingVariables>;\r\n  deleteGuestsMu: MutationFn<deleteGuests, deleteGuestsVariables>;\r\n  updateCheckInMu: MutationFn<updateBooking, updateBookingVariables>;\r\n  createBlockMu: MutationFn<createBlock, createBlockVariables>;\r\n  deleteBlockMu: MutationFn<deleteBlock, deleteBlockVariables>;\r\n  updateBlockOpMu: MutationFn<updateBlockOption, updateBlockOptionVariables>;\r\n  allocateMu: MutationFn<allocateGuestToRoom, allocateGuestToRoomVariables>;\r\n  totalMuLoading: boolean;\r\n}\r\n\r\nexport interface IAssigTimelineHooks {\r\n  blockOpModal: IUseModal<IAssigItem>;\r\n  bookingModal: IUseModal<any>;\r\n  guestValue: IAssigItem[];\r\n  createMenuProps: ICreateMenuProps;\r\n  blockMenuProps: IDeleteMenuProps;\r\n  setBlockMenuProps: React.Dispatch<React.SetStateAction<IDeleteMenuProps>>;\r\n  setGuestValue: (value: IAssigItem[]) => void;\r\n  setCreateMenuProps: React.Dispatch<React.SetStateAction<ICreateMenuProps>>;\r\n  confirmModalHook: IUseModal<any>;\r\n  dataTime: {\r\n    start: number;\r\n    end: number;\r\n  };\r\n  setDataTime: React.Dispatch<\r\n    React.SetStateAction<{\r\n      start: number;\r\n      end: number;\r\n    }>\r\n  >;\r\n}\r\n\r\nexport type THandleCanvasContextMenu = (\r\n  groupId: string,\r\n  time: number,\r\n  e: React.MouseEvent<HTMLElement>\r\n) => void;\r\n\r\nexport type THandleDraggingEnd = (\r\n  e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n) => void;\r\n\r\nexport type THandleTimeChange = (\r\n  visibleTimeStart: number,\r\n  visibleTimeEnd: number,\r\n  updateScrollCanvas: any\r\n) => void;\r\n\r\nexport type THandleItemClick = (\r\n  itemId: string,\r\n  e: React.MouseEvent<HTMLElement>,\r\n  time: number\r\n) => Promise<void>;\r\n\r\nexport type THandleItemMove = (\r\n  itemId: string,\r\n  dragTime: number,\r\n  newGroupOrder: number\r\n) => Promise<void>;\r\n\r\nexport type TGetGuestsInGroup = (group: IAssigGroup) => IAssigItem[];\r\n\r\nexport type TGetAssigInfoFromItems = (items: IAssigItem[]) => IAssigInfo[];\r\n\r\nexport type THandleCanvasClick = (\r\n  groupId: string,\r\n  time: number,\r\n  e: React.MouseEvent<HTMLElement>\r\n) => Promise<void>;\r\n\r\nexport type THandleItemDoubleClick = (\r\n  itemId: string,\r\n  e: React.MouseEvent<HTMLElement>,\r\n  time: number\r\n) => Promise<void>;\r\n\r\nexport type THandleCanvasDoubleClick = (\r\n  groupId: string,\r\n  time: number,\r\n  e: React.MouseEvent<HTMLElement>\r\n) => Promise<void>;\r\n\r\nexport type THandleMoveResizeValidator = (\r\n  action: \"move\" | \"resize\",\r\n  item: any,\r\n  time: number,\r\n  resizeEdge: \"left\" | \"right\" | undefined\r\n) => number;\r\n\r\nexport type THandleItemResize = (\r\n  itemId: string,\r\n  time: number,\r\n  edge: \"left\" | \"right\"\r\n) => Promise<void>;\r\n\r\ninterface Ids {\r\n  itemId?: string;\r\n  bookingId?: string;\r\n}\r\n\r\nexport type TGetItmes = (type: GuestTypeAdd) => IAssigItem[];\r\n\r\nexport type THilightHeader = (date?: Date | null) => void;\r\n\r\ninterface THlightGuestBlockProps {\r\n  bookingId?: string;\r\n  itemId?: string;\r\n  scrollMove?: boolean;\r\n}\r\n\r\nexport type THilightGuestBlock = ({\r\n  scrollMove,\r\n  itemId,\r\n  bookingId\r\n}: THlightGuestBlockProps) => void;\r\n\r\nexport type TBookingCheckedNew = (bookingId: string) => void;\r\n\r\nexport type THandleItemSelect = (\r\n  itemId: string,\r\n  e: React.MouseEvent<HTMLElement>,\r\n  time: number\r\n) => Promise<void>;\r\n\r\nexport interface IAssigHandlers {\r\n  handleItemResize: THandleItemResize;\r\n  handleItemMove: THandleItemMove;\r\n  handleMouseDownCanvas: THandleMouseDown;\r\n  handleItemClick: THandleItemClick;\r\n  handleItemDoubleClick: THandleItemDoubleClick;\r\n  handleCanvasClick: THandleCanvasClick;\r\n  handleCanvasDoubleClick: THandleCanvasDoubleClick;\r\n  handleMoveResizeValidator: THandleMoveResizeValidator;\r\n  handleTimeChange: THandleTimeChange;\r\n  handleCanvasContextMenu: THandleCanvasContextMenu;\r\n  handleItemSelect: THandleItemSelect;\r\n  handleDraggingCell: THandleDraggingCell;\r\n  handleDraggingEnd: THandleDraggingEnd;\r\n}\r\n\r\nexport interface IAssigTimelineUtils {\r\n  hilightHeader: THilightHeader;\r\n  changeMarkToGhost: TChangeMarkToGhost;\r\n  getInfoesFromMarks: TGetInfoesFromMarks;\r\n  getAssigInfoFromItems: TGetAssigInfoFromItems;\r\n  bookingCheckedNew: TBookingCheckedNew;\r\n  hilightGuestBlock: THilightGuestBlock;\r\n  popUpItemMenuTooltip: TPopUpItemMenuTooltip;\r\n  startBookingModalWithMark: TBookingModalOpenWithMark;\r\n  getItemById: TGetItemById;\r\n  getGroupById: TGetGroupById;\r\n  getItems: TGetItmes;\r\n  removeMark: TRemoveMark;\r\n  deleteGhost: TDleteGhost;\r\n  isTherePerson: TIsTherePerson;\r\n  filterTimeZone: TFilterTimeZone;\r\n  allTooltipsHide: TAllTooltipsHide;\r\n  getGuestsInGroup: TGetGuestsInGroup;\r\n  deleteItemById: TDeleteItemById;\r\n  isGenderSafe: TIsGenderSafe;\r\n  addBlock: TAddBlock;\r\n  allocateGuest: TAllocateGuest;\r\n  allocateItem: TAllocateItem;\r\n  deleteBookingById: TDeleteBookingById;\r\n  genderToggleById: TGenderToggleById;\r\n  resizeValidater: TResizeValidater;\r\n  resizeLinkedItems: TResizeLinkedItems;\r\n  moveLinkedItems: TMoveLinkedItems;\r\n  toogleCheckInOut: TToogleCheckIn;\r\n\r\n  openBlockMenu: TOpenBlockMenu;\r\n  openCanvasMenuTooltip: TOpenCanvasMenuTooltip;\r\n  createMark: TCreateMark;\r\n  resizeBlockBlock: TResizeBlockBlock;\r\n  getBookingIdByGuestId: TGetBookingIdByGuestId;\r\n  getGuestsByBookingId: IGetGuestByBookingId;\r\n  createCreateItem: ICreateCreateItem;\r\n  itemsToGuets: (\r\n    items: IAssigItem[],\r\n    groupDatas: IAssigGroup[]\r\n  ) => getBooking_GetBooking_booking_guests[];\r\n  groupToRoomType: (\r\n    createItemTempGroups: IAssigGroup[]\r\n  ) => getBooking_GetBooking_booking_roomTypes[];\r\n}\r\n\r\nexport type IStartBookingCallBack = (\r\n  result: \"error\" | startBooking_StartBooking\r\n) => any;\r\n\r\nexport interface IAssigInfo {\r\n  bedIndex: number;\r\n  roomId: string;\r\n  gender: Gender | null;\r\n}\r\n// ⭐️ 배정달력에서 예약 생성시사용\r\nexport interface ICreateBookingInfo {\r\n  bookingId: string;\r\n  createMode: boolean;\r\n  type: \"CREACT\";\r\n  checkIn: number;\r\n  checkOut: number;\r\n  resvInfoes: {\r\n    group: IAssigGroup;\r\n    roomTypeName: string;\r\n    roomTypeId: string;\r\n    gender: Gender | null;\r\n  }[];\r\n  assigInfo: IAssigInfo[];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}