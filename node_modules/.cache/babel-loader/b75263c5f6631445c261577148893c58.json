{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\bookingHost\\\\roomConfig\\\\components\\\\RoomTypeModalWrap.tsx\";\nimport React, { Fragment } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport RoomTypeModal from \"./RoomTypeModal\";\nimport { CREATE_ROOMTYPE, DELETE_ROOMTYPE, UPDATE_ROOMTYPE, GET_ROOMTYPE_BY_ID, GET_ALL_ROOMTYPES } from \"../../../../queries\";\nimport { LANG } from \"../../../../hooks/hook\";\nimport { ErrProtecter, onCompletedMessage, queryDataFormater } from \"../../../../utils/utils\";\nimport { PricingType, RoomGender } from \"../../../../types/enum\";\nimport { getOperationName } from \"apollo-link\";\nimport { PortalPreloader } from \"../../../../utils/portalTo\";\n\nvar GetRoomTypeById =\n/*#__PURE__*/\nfunction (_Query) {\n  _inherits(GetRoomTypeById, _Query);\n\n  function GetRoomTypeById() {\n    _classCallCheck(this, GetRoomTypeById);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GetRoomTypeById).apply(this, arguments));\n  }\n\n  return GetRoomTypeById;\n}(Query);\n\nvar CreateRoomTypeMutation =\n/*#__PURE__*/\nfunction (_Mutation) {\n  _inherits(CreateRoomTypeMutation, _Mutation);\n\n  function CreateRoomTypeMutation() {\n    _classCallCheck(this, CreateRoomTypeMutation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CreateRoomTypeMutation).apply(this, arguments));\n  }\n\n  return CreateRoomTypeMutation;\n}(Mutation);\n\nvar DeleteRoomTypeMutation =\n/*#__PURE__*/\nfunction (_Mutation2) {\n  _inherits(DeleteRoomTypeMutation, _Mutation2);\n\n  function DeleteRoomTypeMutation() {\n    _classCallCheck(this, DeleteRoomTypeMutation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DeleteRoomTypeMutation).apply(this, arguments));\n  }\n\n  return DeleteRoomTypeMutation;\n}(Mutation);\n\nvar UpdateRoomTypeMutation =\n/*#__PURE__*/\nfunction (_Mutation3) {\n  _inherits(UpdateRoomTypeMutation, _Mutation3);\n\n  function UpdateRoomTypeMutation() {\n    _classCallCheck(this, UpdateRoomTypeMutation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UpdateRoomTypeMutation).apply(this, arguments));\n  }\n\n  return UpdateRoomTypeMutation;\n}(Mutation);\n\nvar UpdateTimelineWrap = function UpdateTimelineWrap(_ref) {\n  var context = _ref.context,\n      modalHook = _ref.modalHook;\n  var house = context.house;\n  var _modalHook$info = modalHook.info,\n      roomTypeId = _modalHook$info.roomTypeId,\n      mode = _modalHook$info.mode;\n  var refetchQueries = [{\n    query: GET_ALL_ROOMTYPES,\n    variables: {\n      houseId: house._id\n    }\n  }];\n  var updateRefetchQueries = [getOperationName(GET_ALL_ROOMTYPES), getOperationName(GET_ROOMTYPE_BY_ID)];\n  var isCreate = mode === \"Create\"; // ⛔️\n\n  if (!roomTypeId && !isCreate) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  });\n  return React.createElement(GetRoomTypeById, {\n    fetchPolicy: \"network-only\",\n    query: GET_ROOMTYPE_BY_ID,\n    skip: isCreate || !roomTypeId,\n    variables: {\n      roomTypeId: roomTypeId || \"\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, function (_ref2) {\n    var queryRoomTypeData = _ref2.data,\n        loading = _ref2.loading,\n        error = _ref2.error;\n    var roomType = queryDataFormater(queryRoomTypeData, \"GetRoomTypeById\", \"roomType\", undefined);\n    var defaultRoomType = {\n      name: \"\",\n      pricingType: PricingType.DOMITORY,\n      peopleCount: 0,\n      peopleCountMax: 0,\n      roomGender: RoomGender.SEPARATELY,\n      img: undefined,\n      description: \"\",\n      defaultPrice: 0\n    };\n    return React.createElement(CreateRoomTypeMutation, {\n      mutation: CREATE_ROOMTYPE,\n      refetchQueries: refetchQueries,\n      onCompleted: function onCompleted(_ref3) {\n        var CreateRoomType = _ref3.CreateRoomType;\n        onCompletedMessage(CreateRoomType, LANG(\"create_roomType_completed\"), LANG(\"create_roomType_fail\"));\n      },\n      awaitRefetchQueries: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, function (createRoomTypeMutation, _ref4) {\n      var createRoomTypeLoading = _ref4.loading;\n      return React.createElement(DeleteRoomTypeMutation, {\n        refetchQueries: refetchQueries,\n        variables: {\n          houseId: house._id,\n          roomTypeId: roomTypeId || \"\"\n        },\n        mutation: DELETE_ROOMTYPE,\n        onCompleted: function onCompleted(_ref5) {\n          var DeleteRoomType = _ref5.DeleteRoomType;\n          onCompletedMessage(DeleteRoomType, LANG(\"remove_roomType_completed\"), LANG(\"remove_roomType_fail\"));\n        },\n        awaitRefetchQueries: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, function (deleteRoomTypeMutation, _ref6) {\n        var deleteRoomTypeLoading = _ref6.loading;\n        return React.createElement(UpdateRoomTypeMutation, {\n          onCompleted: function onCompleted(_ref7) {\n            var UpdateRoomType = _ref7.UpdateRoomType;\n            onCompletedMessage(UpdateRoomType, LANG(\"update_roomType_completed\"), LANG(\"update_roomType_fail\"));\n          },\n          mutation: UPDATE_ROOMTYPE,\n          refetchQueries: updateRefetchQueries,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, function (updateRoomTypeMutation, _ref8) {\n          var updateRoomTypeLoading = _ref8.loading;\n          var muLoadings = updateRoomTypeLoading || createRoomTypeLoading || deleteRoomTypeLoading;\n          return React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169\n            },\n            __self: this\n          }, React.createElement(PortalPreloader, {\n            loading: muLoadings,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170\n            },\n            __self: this\n          }), React.createElement(RoomTypeModal, {\n            context: context,\n            roomTypeData: roomType || defaultRoomType,\n            modalHook: modalHook,\n            loading: loading,\n            mutationLoading: muLoadings,\n            createRoomTypeMutation: createRoomTypeMutation,\n            deleteRoomTypeMutation: deleteRoomTypeMutation,\n            updateRoomTypeMutation: updateRoomTypeMutation,\n            mode: mode,\n            key: \"roomTypeModal__modal\".concat(roomType ? roomType._id : \"\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            },\n            __self: this\n          }));\n        });\n      });\n    });\n  });\n};\n\nexport default ErrProtecter(UpdateTimelineWrap);","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/bookingHost/roomConfig/components/RoomTypeModalWrap.tsx"],"names":["React","Fragment","Mutation","Query","RoomTypeModal","CREATE_ROOMTYPE","DELETE_ROOMTYPE","UPDATE_ROOMTYPE","GET_ROOMTYPE_BY_ID","GET_ALL_ROOMTYPES","LANG","ErrProtecter","onCompletedMessage","queryDataFormater","PricingType","RoomGender","getOperationName","PortalPreloader","GetRoomTypeById","CreateRoomTypeMutation","DeleteRoomTypeMutation","UpdateRoomTypeMutation","UpdateTimelineWrap","context","modalHook","house","info","roomTypeId","mode","refetchQueries","query","variables","houseId","_id","updateRefetchQueries","isCreate","queryRoomTypeData","data","loading","error","roomType","undefined","defaultRoomType","name","pricingType","DOMITORY","peopleCount","peopleCountMax","roomGender","SEPARATELY","img","description","defaultPrice","CreateRoomType","createRoomTypeMutation","createRoomTypeLoading","DeleteRoomType","deleteRoomTypeMutation","deleteRoomTypeLoading","UpdateRoomType","updateRoomTypeMutation","updateRoomTypeLoading","muLoadings"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\r\nimport {Mutation, Query} from \"react-apollo\";\r\nimport {\r\n  createRoomType,\r\n  createRoomTypeVariables,\r\n  deleteRoomType,\r\n  deleteRoomTypeVariables,\r\n  updateRoomType,\r\n  updateRoomTypeVariables,\r\n  getRoomTypeById,\r\n  getRoomTypeByIdVariables\r\n} from \"../../../../types/api\";\r\nimport RoomTypeModal from \"./RoomTypeModal\";\r\nimport {\r\n  CREATE_ROOMTYPE,\r\n  DELETE_ROOMTYPE,\r\n  UPDATE_ROOMTYPE,\r\n  GET_ROOMTYPE_BY_ID,\r\n  GET_ALL_ROOMTYPES\r\n} from \"../../../../queries\";\r\nimport {IUseModal, LANG} from \"../../../../hooks/hook\";\r\nimport {\r\n  ErrProtecter,\r\n  onCompletedMessage,\r\n  queryDataFormater\r\n} from \"../../../../utils/utils\";\r\nimport {\r\n  PricingType,\r\n  RoomGender,\r\n  FLOATING_PRELOADER_SIZE\r\n} from \"../../../../types/enum\";\r\nimport {IContext} from \"../../BookingHostRouter\";\r\nimport {getOperationName} from \"apollo-link\";\r\nimport {createPortal} from \"react-dom\";\r\nimport portalTo, {PortalPreloader} from \"../../../../utils/portalTo\";\r\nimport Preloader from \"../../../../atoms/preloader/Preloader\";\r\nimport {JdFile} from \"../../../../types/interface\";\r\n\r\nclass GetRoomTypeById extends Query<\r\n  getRoomTypeById,\r\n  getRoomTypeByIdVariables\r\n> {}\r\nclass CreateRoomTypeMutation extends Mutation<\r\n  createRoomType,\r\n  createRoomTypeVariables\r\n> {}\r\nclass DeleteRoomTypeMutation extends Mutation<\r\n  deleteRoomType,\r\n  deleteRoomTypeVariables\r\n> {}\r\nclass UpdateRoomTypeMutation extends Mutation<\r\n  updateRoomType,\r\n  updateRoomTypeVariables\r\n> {}\r\n\r\nexport interface IRoomTypeModalInfo {\r\n  roomTypeId?: string;\r\n  mode: \"Create\" | \"Modify\";\r\n}\r\n\r\nexport interface IDefaultRoomType {\r\n  name: string;\r\n  pricingType: PricingType;\r\n  peopleCount: number;\r\n  peopleCountMax: number;\r\n  roomGender: RoomGender;\r\n  img?: JdFile;\r\n  description: string;\r\n  defaultPrice: number;\r\n}\r\n\r\ninterface IProps {\r\n  context: IContext;\r\n  modalHook: IUseModal<IRoomTypeModalInfo>;\r\n}\r\n\r\nconst UpdateTimelineWrap: React.SFC<IProps> = ({context, modalHook}) => {\r\n  const {house} = context;\r\n  const {roomTypeId, mode} = modalHook.info;\r\n  const refetchQueries = [\r\n    {query: GET_ALL_ROOMTYPES, variables: {houseId: house._id}}\r\n  ];\r\n  const updateRefetchQueries = [\r\n    getOperationName(GET_ALL_ROOMTYPES)!,\r\n    getOperationName(GET_ROOMTYPE_BY_ID)!\r\n  ];\r\n\r\n  const isCreate = mode === \"Create\";\r\n\r\n  // ⛔️\r\n  if (!roomTypeId && !isCreate) return <div />;\r\n\r\n  return (\r\n    <GetRoomTypeById\r\n      fetchPolicy=\"network-only\"\r\n      query={GET_ROOMTYPE_BY_ID}\r\n      skip={isCreate || !roomTypeId}\r\n      variables={{roomTypeId: roomTypeId || \"\"}}\r\n    >\r\n      {({data: queryRoomTypeData, loading, error}) => {\r\n        const roomType = queryDataFormater(\r\n          queryRoomTypeData,\r\n          \"GetRoomTypeById\",\r\n          \"roomType\",\r\n          undefined\r\n        );\r\n        const defaultRoomType: IDefaultRoomType = {\r\n          name: \"\",\r\n          pricingType: PricingType.DOMITORY,\r\n          peopleCount: 0,\r\n          peopleCountMax: 0,\r\n          roomGender: RoomGender.SEPARATELY,\r\n          img: undefined,\r\n          description: \"\",\r\n          defaultPrice: 0\r\n        };\r\n\r\n        return (\r\n          <CreateRoomTypeMutation\r\n            mutation={CREATE_ROOMTYPE}\r\n            refetchQueries={refetchQueries}\r\n            onCompleted={({CreateRoomType}: any) => {\r\n              onCompletedMessage(\r\n                CreateRoomType,\r\n                LANG(\"create_roomType_completed\"),\r\n                LANG(\"create_roomType_fail\")\r\n              );\r\n            }}\r\n            awaitRefetchQueries\r\n          >\r\n            {(createRoomTypeMutation, {loading: createRoomTypeLoading}) => (\r\n              <DeleteRoomTypeMutation\r\n                refetchQueries={refetchQueries}\r\n                variables={{\r\n                  houseId: house._id,\r\n                  roomTypeId: roomTypeId || \"\"\r\n                }}\r\n                mutation={DELETE_ROOMTYPE}\r\n                onCompleted={({DeleteRoomType}: any) => {\r\n                  onCompletedMessage(\r\n                    DeleteRoomType,\r\n                    LANG(\"remove_roomType_completed\"),\r\n                    LANG(\"remove_roomType_fail\")\r\n                  );\r\n                }}\r\n                awaitRefetchQueries\r\n              >\r\n                {(deleteRoomTypeMutation, {loading: deleteRoomTypeLoading}) => (\r\n                  <UpdateRoomTypeMutation\r\n                    onCompleted={({UpdateRoomType}: any) => {\r\n                      onCompletedMessage(\r\n                        UpdateRoomType,\r\n                        LANG(\"update_roomType_completed\"),\r\n                        LANG(\"update_roomType_fail\")\r\n                      );\r\n                    }}\r\n                    mutation={UPDATE_ROOMTYPE}\r\n                    refetchQueries={updateRefetchQueries}\r\n                  >\r\n                    {(\r\n                      updateRoomTypeMutation,\r\n                      {loading: updateRoomTypeLoading}\r\n                    ) => {\r\n                      const muLoadings =\r\n                        updateRoomTypeLoading ||\r\n                        createRoomTypeLoading ||\r\n                        deleteRoomTypeLoading;\r\n                      return (\r\n                        <Fragment>\r\n                          <PortalPreloader loading={muLoadings} />\r\n                          <RoomTypeModal\r\n                            context={context}\r\n                            roomTypeData={roomType || defaultRoomType}\r\n                            modalHook={modalHook}\r\n                            loading={loading}\r\n                            mutationLoading={muLoadings}\r\n                            createRoomTypeMutation={createRoomTypeMutation}\r\n                            deleteRoomTypeMutation={deleteRoomTypeMutation}\r\n                            updateRoomTypeMutation={updateRoomTypeMutation}\r\n                            mode={mode}\r\n                            key={`roomTypeModal__modal${\r\n                              roomType ? roomType._id : \"\"\r\n                            }`}\r\n                          />\r\n                        </Fragment>\r\n                      );\r\n                    }}\r\n                  </UpdateRoomTypeMutation>\r\n                )}\r\n              </DeleteRoomTypeMutation>\r\n            )}\r\n          </CreateRoomTypeMutation>\r\n        );\r\n      }}\r\n    </GetRoomTypeById>\r\n  );\r\n};\r\n\r\nexport default ErrProtecter(UpdateTimelineWrap);\r\n"]},"metadata":{},"sourceType":"module"}