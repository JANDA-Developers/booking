{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\outPages\\\\checkReservation\\\\CheckTable.tsx\";\n\n/* eslint-disable react/prop-types */\n\n/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { ErrProtecter, s4, autoComma } from \"../../../utils/utils\";\nimport JDtable from \"../../../atoms/table/Table\";\nimport { ReactTableDefaults } from \"react-table\";\nimport JDbox from \"../../../atoms/box/JDbox\";\nimport { PricingType } from \"../../../types/enum\";\nimport moment from \"moment\";\nimport { getRoomSelectInfo } from \"../../../utils/typeChanger\";\nimport { LANG } from \"../../../hooks/hook\";\n\n// 하우스 아이디를 우선 Props를 통해서 받아야함\nvar CheckTable = function CheckTable(_ref) {\n  var tableDataProp = _ref.tableData;\n\n  var _useState = useState(tableDataProp),\n      _useState2 = _slicedToArray(_useState, 2),\n      tableData = _useState2[0],\n      setTableData = _useState2[1];\n\n  useEffect(function () {\n    if (tableDataProp) {\n      setTableData(_toConsumableArray(tableDataProp));\n    }\n  });\n  var TableColumns = [{\n    Header: LANG(\"checkIn\"),\n    accessor: \"_id\",\n    Cell: function Cell(_ref2) {\n      var original = _ref2.original;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, moment(original.checkIn).format(\"YYYY-MM-DD\")));\n    }\n  }, {\n    Header: LANG(\"checkOut\"),\n    accessor: \"_id\",\n    Cell: function Cell(_ref3) {\n      var original = _ref3.original;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, moment(original.checkOut).format(\"YYYY-MM-DD\")));\n    }\n  }, {\n    Header: LANG(\"Rooms\") + LANG(\"personnel\"),\n    accessor: \"roomTypes\",\n    Cell: function Cell(_ref4) {\n      var value = _ref4.value,\n          original = _ref4.original;\n      var roomTypes = value; // ⛔️ 젠더정보가 없기때문에 들어갈수없다 gender를 넣을려면 코드겐부터\n\n      var roomSelectInfo = getRoomSelectInfo(original.guests, roomTypes);\n      return roomSelectInfo.map(function (selectInfo) {\n        return React.createElement(JDbox, {\n          key: s4(),\n          size: \"small\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, selectInfo.roomTypeName, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, function () {\n          var _selectInfo$count = selectInfo.count,\n              female = _selectInfo$count.female,\n              male = _selectInfo$count.male,\n              roomCount = _selectInfo$count.roomCount;\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }, selectInfo.pricingType === PricingType.DOMITORY ? React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }, female && React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }, female + LANG(\"female\") + \" \"), male && React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }, male + LANG(\"male\"))) : React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, roomCount));\n        }()));\n      });\n    }\n  }, {\n    Header: LANG(\"usage_amount\"),\n    accessor: \"payment\",\n    Cell: function Cell(_ref5) {\n      var value = _ref5.value;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, autoComma(value.totalPrice), LANG(\"money_unit\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), LANG(\"PaymentStatus\", value.status));\n    }\n  }, {\n    Header: LANG(\"status\"),\n    accessor: \"status\",\n    Cell: function Cell(_ref6) {\n      var value = _ref6.value;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, LANG(value));\n    }\n  }];\n  return React.createElement(JDtable, Object.assign({}, ReactTableDefaults, {\n    data: tableData || [],\n    minRows: 1,\n    columns: TableColumns,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }));\n};\n\nexport default ErrProtecter(CheckTable);","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/outPages/checkReservation/CheckTable.tsx"],"names":["React","Fragment","useState","useEffect","ErrProtecter","s4","autoComma","JDtable","ReactTableDefaults","JDbox","PricingType","moment","getRoomSelectInfo","LANG","CheckTable","tableDataProp","tableData","setTableData","TableColumns","Header","accessor","Cell","original","checkIn","format","checkOut","value","roomTypes","roomSelectInfo","guests","map","selectInfo","roomTypeName","count","female","male","roomCount","pricingType","DOMITORY","totalPrice","status"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React, { Fragment, useState, useEffect } from \"react\";\r\nimport { ErrProtecter, s4, autoComma } from \"../../../utils/utils\";\r\nimport { getBookingForPublic_GetBookingForPublic_booking } from \"../../../types/api\";\r\nimport JDtable, { JDcolumn } from \"../../../atoms/table/Table\";\r\nimport { ReactTableDefaults } from \"react-table\";\r\nimport { IRoomType } from \"../../../types/interface\";\r\nimport JDbox from \"../../../atoms/box/JDbox\";\r\nimport { PricingType } from \"../../../types/enum\";\r\nimport moment from \"moment\";\r\nimport { getRoomSelectInfo } from \"../../../utils/typeChanger\";\r\nimport { LANG } from \"../../../hooks/hook\";\r\n\r\nexport interface IProps {\r\n  tableData: getBookingForPublic_GetBookingForPublic_booking[] | undefined;\r\n}\r\n\r\n// 하우스 아이디를 우선 Props를 통해서 받아야함\r\nconst CheckTable: React.FC<IProps> = ({ tableData: tableDataProp }) => {\r\n  const [tableData, setTableData] = useState(tableDataProp);\r\n  useEffect(() => {\r\n    if (tableDataProp) {\r\n      setTableData([...tableDataProp]);\r\n    }\r\n  });\r\n\r\n  const TableColumns: JDcolumn<\r\n    getBookingForPublic_GetBookingForPublic_booking\r\n  >[] = [\r\n    {\r\n      Header: LANG(\"checkIn\"),\r\n      accessor: \"_id\",\r\n      Cell: ({ original }) => (\r\n        <div>\r\n          <span>{moment(original.checkIn).format(\"YYYY-MM-DD\")}</span>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      Header: LANG(\"checkOut\"),\r\n      accessor: \"_id\",\r\n      Cell: ({ original }) => (\r\n        <div>\r\n          <span>{moment(original.checkOut).format(\"YYYY-MM-DD\")}</span>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      Header: LANG(\"Rooms\") + LANG(\"personnel\"),\r\n      accessor: \"roomTypes\",\r\n      Cell: ({ value, original }) => {\r\n        const roomTypes: IRoomType[] = value;\r\n        // ⛔️ 젠더정보가 없기때문에 들어갈수없다 gender를 넣을려면 코드겐부터\r\n        const roomSelectInfo = getRoomSelectInfo(original.guests, roomTypes);\r\n        return roomSelectInfo.map(selectInfo => (\r\n          <JDbox key={s4()} size=\"small\">\r\n            {selectInfo.roomTypeName}\r\n            <br />\r\n            <span>\r\n              {(() => {\r\n                const { female, male, roomCount } = selectInfo.count;\r\n\r\n                return (\r\n                  <span>\r\n                    {selectInfo.pricingType === PricingType.DOMITORY ? (\r\n                      <Fragment>\r\n                        {female && <span>{female + LANG(\"female\") + \" \"}</span>}\r\n                        {male && <span>{male + LANG(\"male\")}</span>}\r\n                      </Fragment>\r\n                    ) : (\r\n                      <span>{roomCount}</span>\r\n                    )}\r\n                  </span>\r\n                );\r\n              })()}\r\n            </span>\r\n          </JDbox>\r\n        ));\r\n      }\r\n    },\r\n    {\r\n      Header: LANG(\"usage_amount\"),\r\n      accessor: \"payment\",\r\n      Cell: ({ value }) => {\r\n        return (\r\n          <div>\r\n            {autoComma(value.totalPrice)}\r\n            {LANG(\"money_unit\")}\r\n            <br />\r\n            {LANG(\"PaymentStatus\", value.status)}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      Header: LANG(\"status\"),\r\n      accessor: \"status\",\r\n      Cell: ({ value }) => <span>{LANG(value)}</span>\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <JDtable\r\n      {...ReactTableDefaults}\r\n      data={tableData || []}\r\n      minRows={1}\r\n      columns={TableColumns}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrProtecter(CheckTable);\r\n"]},"metadata":{},"sourceType":"module"}