{"ast":null,"code":"import { instanceOfA } from \"../../utils/utils\";\nimport { inOr } from \"../../utils/C\";\nimport { Gender, PaymentStatus, AutoSendWhen } from \"../../types/enum\";\nimport { toast } from \"react-toastify\";\nimport { LANG } from \"../../hooks/hook\";\nimport guestsToInput from \"../../utils/typeChanger\";\nimport { to4YMMDD } from \"../../utils/setMidNight\";\nexport var bookingModalValidate = function bookingModalValidate(bookingModalContext, mode) {\n  var paymentStatusHook = bookingModalContext.paymentStatusHook,\n      bookingStatusHook = bookingModalContext.bookingStatusHook,\n      bookingPhoneHook = bookingModalContext.bookingPhoneHook,\n      bookingNameHook = bookingModalContext.bookingNameHook,\n      payMethodHook = bookingModalContext.payMethodHook;\n\n  if (!payMethodHook.selectedOption) {\n    toast.warn(LANG(\"please_select_a_payment_method\"));\n    return false;\n  }\n\n  if (!paymentStatusHook.selectedOption) {\n    toast.warn(LANG(\"please_select_a_payment_status\"));\n    return false;\n  }\n\n  if (!paymentStatusHook.selectedOption) {\n    toast.warn(LANG(\"please_select_a_payment_status\"));\n    return false;\n  }\n\n  if (!bookingStatusHook.selectedOption) {\n    toast.warn(LANG(\"please_select_reservation_status\"));\n    return false;\n  }\n\n  if (!bookingNameHook.value) {\n    toast.warn(LANG(\"please_enter_booker_name\"));\n    return false;\n  }\n\n  if (!bookingPhoneHook.value) {\n    toast.warn(LANG(\"please_enter_phone_number\"));\n    return false;\n  }\n\n  return true;\n}; // SMS 발송 모달에 전달할 정보를 생성\n\nexport var makeSmsInfoParam = function makeSmsInfoParam(bookingModalContext) {\n  var bookingNameHook = bookingModalContext.bookingNameHook,\n      bookingPhoneHook = bookingModalContext.bookingPhoneHook,\n      paymentStatusHook = bookingModalContext.paymentStatusHook,\n      priceHook = bookingModalContext.priceHook,\n      resvDateHook = bookingModalContext.resvDateHook,\n      payMethodHook = bookingModalContext.payMethodHook,\n      emailHook = bookingModalContext.emailHook;\n  return {\n    receivers: [bookingPhoneHook.value],\n    smsFormatInfo: {\n      name: bookingNameHook.value,\n      payMethod: inOr(payMethodHook.selectedOption, \"label\", \"\"),\n      email: emailHook.value,\n      phoneNumber: bookingPhoneHook.value,\n      end: resvDateHook.to,\n      start: resvDateHook.from,\n      paymentStatus: inOr(paymentStatusHook.selectedOption, \"label\", \"\"),\n      price: priceHook.value || 0\n    },\n    // 페이먼트 에따라서 각 상황에맞는 SMS 를 찾아줌\n    autoSendWhen: function () {\n      var selectedOption = paymentStatusHook.selectedOption;\n\n      if (selectedOption) {\n        if (selectedOption.value === PaymentStatus.COMPLETE) {\n          return AutoSendWhen.WHEN_BOOKING_CREATED;\n        } else if (selectedOption.value === PaymentStatus.PROGRESSING) {\n          return AutoSendWhen.WHEN_BOOKING_CREATED_PAYMENT_PROGRESSING;\n        }\n      }\n    }()\n  };\n}; // 게스트 정보를 토대로 배정정보를 생산\n\nexport var makeAssigInfo = function makeAssigInfo(guests) {\n  return guests ? guests.map(function (guest) {\n    if (instanceOfA(guest, \"gender\")) {\n      return {\n        _id: guest._id,\n        roomId: inOr(guest.room, \"_id\", \"\"),\n        gender: guest.gender || Gender.MALE,\n        bedIndex: guest.bedIndex,\n        pricingType: guest.pricingType\n      };\n    } else {\n      return {\n        _id: guest._id,\n        roomId: inOr(guest.room, \"_id\", \"\"),\n        gender: null,\n        bedIndex: 0,\n        pricingType: guest.pricingType\n      };\n    }\n  }) : [];\n}; // 현재 부킹모달 정보들을 토대로 예약생성에 필요한 파라미터를 반환합니다.\n\nexport var bookingModalGetStartBookingVariables = function bookingModalGetStartBookingVariables(bookingModalContext) {\n  var bookingNameHook = bookingModalContext.bookingNameHook,\n      mode = bookingModalContext.mode,\n      bookingPhoneHook = bookingModalContext.bookingPhoneHook,\n      guests = bookingModalContext.guests,\n      paymentStatusHook = bookingModalContext.paymentStatusHook,\n      priceHook = bookingModalContext.priceHook,\n      resvDateHook = bookingModalContext.resvDateHook,\n      payMethodHook = bookingModalContext.payMethodHook,\n      assigInfo = bookingModalContext.assigInfo,\n      houseId = bookingModalContext.houseId,\n      memoHook = bookingModalContext.memoHook,\n      funnelStatusHook = bookingModalContext.funnelStatusHook; // 예약자가 변경한 성별사항을 적용한 임시 게스트정보 생성\n\n  var getGenderChangedGuest = function getGenderChangedGuest() {\n    if (guests) {\n      return guests.map(function (guest) {\n        var copyGuest = guest;\n        assigInfo.forEach(function (info) {\n          if (instanceOfA(copyGuest, \"gender\")) {\n            if (copyGuest._id === info._id) {\n              copyGuest.gender = info.gender;\n            }\n          }\n        });\n        return copyGuest;\n      });\n    } else {\n      return [];\n    }\n  }; // 게스트들을 룸타입별로 정렬\n\n\n  var guestsToInputs = guestsToInput(guests ? getGenderChangedGuest() : []);\n  var allocationParams = assigInfo.map(function (info) {\n    return {\n      bedIndex: info.bedIndex,\n      gender: info.gender,\n      roomId: info.roomId\n    };\n  });\n  return {\n    bookerParams: {\n      agreePrivacyPolicy: true,\n      email: \"demo@naver.com\",\n      memo: memoHook.value,\n      name: bookingNameHook.value,\n      password: \"admin\",\n      phoneNumber: bookingPhoneHook.value,\n      funnels: funnelStatusHook.selectedOption ? funnelStatusHook.selectedOption.value : null\n    },\n    checkInOut: {\n      checkIn: to4YMMDD(resvDateHook.from),\n      checkOut: to4YMMDD(resvDateHook.to)\n    },\n    guestDomitoryParams: guestsToInputs.countInDomitorys,\n    guestRoomParams: guestsToInputs.countInRooms,\n    paymentParams: {\n      payMethod: payMethodHook.selectedOption.value,\n      price: priceHook.value,\n      status: paymentStatusHook.selectedOption.value\n    },\n    houseId: houseId,\n    allocationParams: mode === \"CREATE_ASSIG\" ? allocationParams : undefined,\n    forceToAllocate: mode === \"CREATE_ASSIG\"\n  };\n};","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/components/bookingModal/helper.ts"],"names":["instanceOfA","inOr","Gender","PaymentStatus","AutoSendWhen","toast","LANG","guestsToInput","to4YMMDD","bookingModalValidate","bookingModalContext","mode","paymentStatusHook","bookingStatusHook","bookingPhoneHook","bookingNameHook","payMethodHook","selectedOption","warn","value","makeSmsInfoParam","priceHook","resvDateHook","emailHook","receivers","smsFormatInfo","name","payMethod","email","phoneNumber","end","to","start","from","paymentStatus","price","autoSendWhen","COMPLETE","WHEN_BOOKING_CREATED","PROGRESSING","WHEN_BOOKING_CREATED_PAYMENT_PROGRESSING","makeAssigInfo","guests","map","guest","_id","roomId","room","gender","MALE","bedIndex","pricingType","bookingModalGetStartBookingVariables","assigInfo","houseId","memoHook","funnelStatusHook","getGenderChangedGuest","copyGuest","forEach","info","guestsToInputs","allocationParams","bookerParams","agreePrivacyPolicy","memo","password","funnels","checkInOut","checkIn","checkOut","guestDomitoryParams","countInDomitorys","guestRoomParams","countInRooms","paymentParams","status","undefined","forceToAllocate"],"mappings":"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","sourcesContent":["import {\r\n  getBooking_GetBooking_booking_guests,\r\n  getBooking_GetBooking_booking_guests_GuestDomitory,\r\n  startBookingVariables\r\n} from \"../../types/api\";\r\nimport { instanceOfA } from \"../../utils/utils\";\r\nimport { inOr } from \"../../utils/C\";\r\nimport { Gender, PaymentStatus, AutoSendWhen } from \"../../types/enum\";\r\nimport { IBookingModal_AssigInfo, IBookingModalContext } from \"./declaration\";\r\nimport { toast } from \"react-toastify\";\r\nimport { LANG } from \"../../hooks/hook\";\r\nimport { IModalSMSinfo } from \"../smsModal/SendSmsModalWrap\";\r\nimport guestsToInput from \"../../utils/typeChanger\";\r\nimport { to4YMMDD } from \"../../utils/setMidNight\";\r\n\r\nexport const bookingModalValidate = (\r\n  bookingModalContext: IBookingModalContext,\r\n  mode?: \"create\" | \"modify\" | \"delete\"\r\n) => {\r\n  const {\r\n    paymentStatusHook,\r\n    bookingStatusHook,\r\n    bookingPhoneHook,\r\n    bookingNameHook,\r\n    payMethodHook\r\n  } = bookingModalContext;\r\n\r\n  if (!payMethodHook.selectedOption) {\r\n    toast.warn(LANG(\"please_select_a_payment_method\"));\r\n    return false;\r\n  }\r\n\r\n  if (!paymentStatusHook.selectedOption) {\r\n    toast.warn(LANG(\"please_select_a_payment_status\"));\r\n    return false;\r\n  }\r\n\r\n  if (!paymentStatusHook.selectedOption) {\r\n    toast.warn(LANG(\"please_select_a_payment_status\"));\r\n    return false;\r\n  }\r\n\r\n  if (!bookingStatusHook.selectedOption) {\r\n    toast.warn(LANG(\"please_select_reservation_status\"));\r\n    return false;\r\n  }\r\n\r\n  if (!bookingNameHook.value) {\r\n    toast.warn(LANG(\"please_enter_booker_name\"));\r\n    return false;\r\n  }\r\n\r\n  if (!bookingPhoneHook.value) {\r\n    toast.warn(LANG(\"please_enter_phone_number\"));\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n// SMS 발송 모달에 전달할 정보를 생성\r\nexport const makeSmsInfoParam = (\r\n  bookingModalContext: IBookingModalContext\r\n): IModalSMSinfo => {\r\n  const {\r\n    bookingNameHook,\r\n    bookingPhoneHook,\r\n    paymentStatusHook,\r\n    priceHook,\r\n    resvDateHook,\r\n    payMethodHook,\r\n    emailHook\r\n  } = bookingModalContext;\r\n  return {\r\n    receivers: [bookingPhoneHook.value],\r\n    smsFormatInfo: {\r\n      name: bookingNameHook.value,\r\n      payMethod: inOr(payMethodHook.selectedOption, \"label\", \"\"),\r\n      email: emailHook.value,\r\n      phoneNumber: bookingPhoneHook.value,\r\n      end: resvDateHook.to!,\r\n      start: resvDateHook.from!,\r\n      paymentStatus: inOr(paymentStatusHook.selectedOption, \"label\", \"\"),\r\n      price: priceHook.value || 0\r\n    },\r\n    // 페이먼트 에따라서 각 상황에맞는 SMS 를 찾아줌\r\n    autoSendWhen: (() => {\r\n      const { selectedOption } = paymentStatusHook;\r\n      if (selectedOption) {\r\n        if (selectedOption.value === PaymentStatus.COMPLETE) {\r\n          return AutoSendWhen.WHEN_BOOKING_CREATED;\r\n        } else if (selectedOption.value === PaymentStatus.PROGRESSING) {\r\n          return AutoSendWhen.WHEN_BOOKING_CREATED_PAYMENT_PROGRESSING;\r\n        }\r\n      }\r\n    })()\r\n  };\r\n};\r\n\r\n// 게스트 정보를 토대로 배정정보를 생산\r\nexport const makeAssigInfo = (\r\n  guests: getBooking_GetBooking_booking_guests[] | null\r\n): IBookingModal_AssigInfo[] =>\r\n  guests\r\n    ? guests.map(guest => {\r\n        if (\r\n          instanceOfA<getBooking_GetBooking_booking_guests_GuestDomitory>(\r\n            guest,\r\n            \"gender\"\r\n          )\r\n        ) {\r\n          return {\r\n            _id: guest._id,\r\n            roomId: inOr(guest.room, \"_id\", \"\"),\r\n            gender: guest.gender || Gender.MALE,\r\n            bedIndex: guest.bedIndex,\r\n            pricingType: guest.pricingType\r\n          };\r\n        } else {\r\n          return {\r\n            _id: guest._id,\r\n            roomId: inOr(guest.room, \"_id\", \"\"),\r\n            gender: null,\r\n            bedIndex: 0,\r\n            pricingType: guest.pricingType\r\n          };\r\n        }\r\n      })\r\n    : [];\r\n\r\n// 현재 부킹모달 정보들을 토대로 예약생성에 필요한 파라미터를 반환합니다.\r\nexport const bookingModalGetStartBookingVariables = (\r\n  bookingModalContext: IBookingModalContext\r\n): startBookingVariables => {\r\n  const {\r\n    bookingNameHook,\r\n    mode,\r\n    bookingPhoneHook,\r\n    guests,\r\n    paymentStatusHook,\r\n    priceHook,\r\n    resvDateHook,\r\n    payMethodHook,\r\n    assigInfo,\r\n    houseId,\r\n    memoHook,\r\n    funnelStatusHook\r\n  } = bookingModalContext;\r\n\r\n  // 예약자가 변경한 성별사항을 적용한 임시 게스트정보 생성\r\n  const getGenderChangedGuest = (): getBooking_GetBooking_booking_guests[] => {\r\n    if (guests) {\r\n      return guests.map(guest => {\r\n        const copyGuest = guest;\r\n        assigInfo.forEach(info => {\r\n          if (\r\n            instanceOfA<getBooking_GetBooking_booking_guests_GuestDomitory>(\r\n              copyGuest,\r\n              \"gender\"\r\n            )\r\n          ) {\r\n            if (copyGuest._id === info._id) {\r\n              copyGuest.gender = info.gender;\r\n            }\r\n          }\r\n        });\r\n        return copyGuest;\r\n      });\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // 게스트들을 룸타입별로 정렬\r\n  const guestsToInputs = guestsToInput(guests ? getGenderChangedGuest() : []);\r\n\r\n  const allocationParams = assigInfo.map(info => ({\r\n    bedIndex: info.bedIndex,\r\n    gender: info.gender,\r\n    roomId: info.roomId\r\n  }));\r\n\r\n  return {\r\n    bookerParams: {\r\n      agreePrivacyPolicy: true,\r\n      email: \"demo@naver.com\",\r\n      memo: memoHook.value,\r\n      name: bookingNameHook.value,\r\n      password: \"admin\",\r\n      phoneNumber: bookingPhoneHook.value,\r\n      funnels: funnelStatusHook.selectedOption\r\n        ? funnelStatusHook.selectedOption.value\r\n        : null\r\n    },\r\n    checkInOut: {\r\n      checkIn: to4YMMDD(resvDateHook.from),\r\n      checkOut: to4YMMDD(resvDateHook.to)\r\n    },\r\n    guestDomitoryParams: guestsToInputs.countInDomitorys,\r\n    guestRoomParams: guestsToInputs.countInRooms,\r\n    paymentParams: {\r\n      payMethod: payMethodHook.selectedOption!.value,\r\n      price: priceHook.value,\r\n      status: paymentStatusHook.selectedOption!.value\r\n    },\r\n    houseId,\r\n    allocationParams: mode === \"CREATE_ASSIG\" ? allocationParams : undefined,\r\n    forceToAllocate: mode === \"CREATE_ASSIG\"\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}