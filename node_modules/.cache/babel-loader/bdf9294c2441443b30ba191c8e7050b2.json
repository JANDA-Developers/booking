{"ast":null,"code":"var UserAgentParser = require(\"ua-parser-js\");\n\nvar languageMessages = require(\"./languages.json\");\n\nvar deepExtend = require(\"./extend\");\n\nvar DEFAULTS = {\n  Chrome: 57,\n  // Includes Chrome for mobile devices\n  Edge: 39,\n  Safari: 10,\n  \"Mobile Safari\": 10,\n  Opera: 50,\n  Firefox: 50,\n  Vivaldi: 1,\n  IE: false\n};\nvar EDGEHTML_VS_EDGE_VERSIONS = {\n  12: 0.1,\n  13: 21,\n  14: 31,\n  15: 39,\n  16: 41,\n  17: 42,\n  18: 44\n};\nvar COLORS = {\n  salmon: \"#f25648\",\n  white: \"white\"\n};\n\nvar updateDefaults = function updateDefaults(defaults, updatedValues) {\n  for (var key in updatedValues) {\n    defaults[key] = updatedValues[key];\n  }\n\n  return defaults;\n};\n\nmodule.exports = function (options) {\n  var main = function main() {\n    // Despite the docs, UA needs to be provided to constructor explicitly:\n    // https://github.com/faisalman/ua-parser-js/issues/90\n    var parsedUserAgent = new UserAgentParser(window.navigator.userAgent).getResult(); // Variable definition (before ajax)\n\n    var outdatedUI = document.getElementById(\"outdated\");\n    options = options || {};\n    var browserLocale = window.navigator.language || window.navigator.userLanguage; // Everyone else, IE\n    // Set default options\n\n    var browserSupport = options.browserSupport ? updateDefaults(DEFAULTS, options.browserSupport) : DEFAULTS; // CSS property to check for. You may also like 'borderSpacing', 'boxShadow', 'transform', 'borderImage';\n\n    var requiredCssProperty = options.requiredCssProperty || false;\n    var backgroundColor = options.backgroundColor || COLORS.salmon;\n    var textColor = options.textColor || COLORS.white;\n    var fullscreen = options.fullscreen || false;\n    var language = options.language || browserLocale.slice(0, 2); // Language code\n\n    var updateSource = \"web\"; // Other possible values are 'googlePlay' or 'appStore'. Determines where we tell users to go for upgrades.\n    // Chrome mobile is still Chrome (unlike Safari which is 'Mobile Safari')\n\n    var isAndroid = parsedUserAgent.os.name === \"Android\";\n\n    if (isAndroid) {\n      updateSource = \"googlePlay\";\n    }\n\n    var isAndroidButNotChrome;\n\n    if (options.requireChromeOnAndroid) {\n      isAndroidButNotChrome = isAndroid && parsedUserAgent.browser.name !== \"Chrome\";\n    }\n\n    if (parsedUserAgent.os.name === \"iOS\") {\n      updateSource = \"appStore\";\n    }\n\n    var done = true;\n\n    var changeOpacity = function changeOpacity(opacityValue) {\n      outdatedUI.style.opacity = opacityValue / 100;\n      outdatedUI.style.filter = \"alpha(opacity=\" + opacityValue + \")\";\n    };\n\n    var fadeIn = function fadeIn(opacityValue) {\n      changeOpacity(opacityValue);\n\n      if (opacityValue === 1) {\n        outdatedUI.style.display = \"table\";\n      }\n\n      if (opacityValue === 100) {\n        done = true;\n      }\n    };\n\n    var parseMinorVersion = function parseMinorVersion(version) {\n      return version.replace(/[^\\d.]/g, '').split(\".\")[1];\n    };\n\n    var isBrowserUnsupported = function isBrowserUnsupported() {\n      var browserName = parsedUserAgent.browser.name;\n      var isUnsupported = false;\n\n      if (!(browserName in browserSupport)) {\n        if (!options.isUnknownBrowserOK) {\n          isUnsupported = true;\n        }\n      } else if (!browserSupport[browserName]) {\n        isUnsupported = true;\n      }\n\n      return isUnsupported;\n    };\n\n    var isBrowserOutOfDate = function isBrowserOutOfDate() {\n      var browserName = parsedUserAgent.browser.name;\n      var browserMajorVersion = parsedUserAgent.browser.major;\n\n      if (browserName === \"Edge\") {\n        browserMajorVersion = EDGEHTML_VS_EDGE_VERSIONS[browserMajorVersion];\n      }\n\n      var isOutOfDate = false;\n\n      if (isBrowserUnsupported()) {\n        isOutOfDate = true;\n      } else if (browserName in browserSupport) {\n        var minVersion = browserSupport[browserName];\n\n        if (typeof minVersion == 'object') {\n          var minMajorVersion = minVersion.major;\n          var minMinorVersion = minVersion.minor;\n\n          if (browserMajorVersion < minMajorVersion) {\n            isOutOfDate = true;\n          } else if (browserMajorVersion == minMajorVersion) {\n            var browserMinorVersion = parseMinorVersion(parsedUserAgent.browser.version);\n\n            if (browserMinorVersion < minMinorVersion) {\n              isOutOfDate = true;\n            }\n          }\n        } else if (browserMajorVersion < minVersion) {\n          isOutOfDate = true;\n        }\n      }\n\n      return isOutOfDate;\n    }; // Returns true if a browser supports a css3 property\n\n\n    var isPropertySupported = function isPropertySupported(property) {\n      if (!property) {\n        return true;\n      }\n\n      var div = document.createElement(\"div\");\n      var vendorPrefixes = [\"khtml\", \"ms\", \"o\", \"moz\", \"webkit\"];\n      var count = vendorPrefixes.length; // Note: HTMLElement.style.hasOwnProperty seems broken in Edge\n\n      if (property in div.style) {\n        return true;\n      }\n\n      property = property.replace(/^[a-z]/, function (val) {\n        return val.toUpperCase();\n      });\n\n      while (count--) {\n        var prefixedProperty = vendorPrefixes[count] + property; // See comment re: HTMLElement.style.hasOwnProperty above\n\n        if (prefixedProperty in div.style) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var makeFadeInFunction = function makeFadeInFunction(opacityValue) {\n      return function () {\n        fadeIn(opacityValue);\n      };\n    }; // Style element explicitly - TODO: investigate and delete if not needed\n\n\n    var startStylesAndEvents = function startStylesAndEvents() {\n      var buttonClose = document.getElementById(\"buttonCloseUpdateBrowser\");\n      var buttonUpdate = document.getElementById(\"buttonUpdateBrowser\"); //check settings attributes\n\n      outdatedUI.style.backgroundColor = backgroundColor; //way too hard to put !important on IE6\n\n      outdatedUI.style.color = textColor;\n      outdatedUI.children[0].children[0].style.color = textColor;\n      outdatedUI.children[0].children[1].style.color = textColor; // Update button is desktop only\n\n      if (buttonUpdate) {\n        buttonUpdate.style.color = textColor;\n\n        if (buttonUpdate.style.borderColor) {\n          buttonUpdate.style.borderColor = textColor;\n        } // Override the update button color to match the background color\n\n\n        buttonUpdate.onmouseover = function () {\n          this.style.color = backgroundColor;\n          this.style.backgroundColor = textColor;\n        };\n\n        buttonUpdate.onmouseout = function () {\n          this.style.color = textColor;\n          this.style.backgroundColor = backgroundColor;\n        };\n      }\n\n      buttonClose.style.color = textColor;\n\n      buttonClose.onmousedown = function () {\n        outdatedUI.style.display = \"none\";\n        return false;\n      };\n    };\n\n    var getmessage = function getmessage(lang) {\n      var defaultMessages = languageMessages[lang] || languageMessages.en;\n      var customMessages = options.messages && options.messages[lang];\n      var messages = deepExtend({}, defaultMessages, customMessages);\n      var updateMessages = {\n        web: \"<p>\" + messages.update.web + (messages.url ? '<a id=\"buttonUpdateBrowser\" rel=\"nofollow\" href=\"' + messages.url + '\">' + messages.callToAction + \"</a>\" : '') + \"</p>\",\n        googlePlay: \"<p>\" + messages.update.googlePlay + '<a id=\"buttonUpdateBrowser\" rel=\"nofollow\" href=\"https://play.google.com/store/apps/details?id=com.android.chrome\">' + messages.callToAction + \"</a></p>\",\n        appStore: \"<p>\" + messages.update[updateSource] + \"</p>\"\n      };\n      var updateMessage = updateMessages[updateSource];\n      var browserSupportMessage = messages.outOfDate;\n\n      if (isBrowserUnsupported() && messages.unsupported) {\n        browserSupportMessage = messages.unsupported;\n      }\n\n      return '<div class=\"vertical-center\"><h6>' + browserSupportMessage + \"</h6>\" + updateMessage + '<p class=\"last\"><a href=\"#\" id=\"buttonCloseUpdateBrowser\" title=\"' + messages.close + '\">&times;</a></p></div>';\n    }; // Check if browser is supported\n\n\n    if (isBrowserOutOfDate() || !isPropertySupported(requiredCssProperty) || isAndroidButNotChrome) {\n      // This is an outdated browser\n      if (done && outdatedUI.style.opacity !== \"1\") {\n        done = false;\n\n        for (var opacity = 1; opacity <= 100; opacity++) {\n          setTimeout(makeFadeInFunction(opacity), opacity * 8);\n        }\n      }\n\n      var insertContentHere = document.getElementById(\"outdated\");\n\n      if (fullscreen) {\n        insertContentHere.classList.add(\"fullscreen\");\n      }\n\n      insertContentHere.innerHTML = getmessage(language);\n      startStylesAndEvents();\n    }\n  }; // Load main when DOM ready.\n\n\n  var oldOnload = window.onload;\n\n  if (typeof window.onload !== \"function\") {\n    window.onload = main;\n  } else {\n    window.onload = function () {\n      if (oldOnload) {\n        oldOnload();\n      }\n\n      main();\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}