{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\middleServer\\\\setPrice\\\\SetPrice.tsx\";\nimport React, { useState } from \"react\";\nimport { EerrorProtect } from \"../../../utils/errProtect\";\nimport \"./SetPrice.scss\";\nimport Preloader from \"../../../atoms/preloader/Preloader\";\nimport classNames from \"classnames\";\nimport Button from \"../../../atoms/button/Button\";\nimport { Link } from \"react-router-dom\";\nimport JDtable, { ReactTableDefault } from \"../../../atoms/table/Table\";\nimport JDIcon from \"../../../atoms/icons/Icons\";\nimport InputText from \"../../../atoms/forms/inputText/InputText\";\nimport { toNumber, muResult } from \"../../../utils/utils\";\nimport CircleIcon from \"../../../atoms/circleIcon/CircleIcon\";\nimport selectOpCreater from \"../../../utils/selectOptionCreater\";\nimport SeasonHeader from \"./components/seasonHeader\";\nimport { useModal, useShouldSave, LANG } from \"../../../hooks/hook\";\nimport DayOfWeekModal from \"./components/dayOfWeekModal\";\nimport CreateSeasonModal from \"./components/createSeasonModal\";\nimport { WindowSize } from \"../../../types/enum\";\nimport JDlist from \"../../../atoms/list/List\";\n\nvar SetPrice = function SetPrice(_ref) {\n  var defaultPriceMap = _ref.priceMap,\n      roomTypes = _ref.roomTypes,\n      defaultSeasonData = _ref.seasonData,\n      updateSeasonPriceMu = _ref.updateSeasonPriceMu,\n      updateSeasonMu = _ref.updateSeasonMu,\n      createSeasonMu = _ref.createSeasonMu,\n      createLoaindg = _ref.createLoaindg,\n      changePriorityMu = _ref.changePriorityMu,\n      deleteSeasonMu = _ref.deleteSeasonMu,\n      windowWidth = _ref.windowWidth,\n      loading = _ref.loading,\n      context = _ref.context;\n  var house = context.house;\n  var isPhablet = windowWidth <= WindowSize.PHABLET;\n  var dayOfWeekModal = useModal(false);\n  var createSeasonModal = useModal(false);\n\n  var _useState = useState(defaultSeasonData),\n      _useState2 = _slicedToArray(_useState, 2),\n      seasonData = _useState2[0],\n      setSeasons = _useState2[1];\n\n  var _useState3 = useState(roomTypes.map(function (roomType) {\n    return {\n      roomTypeId: roomType._id,\n      defaultPrice: roomType.defaultPrice\n    };\n  })),\n      _useState4 = _slicedToArray(_useState3, 2),\n      roomTypePrices = _useState4[0],\n      setRoomTypePrices = _useState4[1];\n\n  var _useState5 = useState(defaultPriceMap),\n      _useState6 = _slicedToArray(_useState5, 2),\n      priceMap = _useState6[0],\n      setPriceMap = _useState6[1];\n\n  var _useShouldSave = useShouldSave([priceMap, roomTypePrices]),\n      shouldSave = _useShouldSave.shouldSave,\n      setShouldSave = _useShouldSave.setShouldSave;\n\n  var priorityOption = selectOpCreater({\n    count: seasonData.length,\n    labelAdd: LANG(\"nth\")\n  });\n\n  var handleRoomTypeDefaultPriceBlur = function handleRoomTypeDefaultPriceBlur(roomTypeId, value) {\n    var targetPrice = roomTypePrices.find(function (prices) {\n      return prices.roomTypeId === roomTypeId;\n    });\n    if (!targetPrice) return;\n    targetPrice.defaultPrice = value;\n    setRoomTypePrices(_toConsumableArray(roomTypePrices));\n  };\n\n  var handleSeasonDefaultPrice = function handleSeasonDefaultPrice(seasonId, roomTypeId, price) {\n    var targetPrice = priceMap.get(roomTypeId + seasonId);\n    if (!targetPrice) return;\n    priceMap.set(roomTypeId + seasonId, {\n      _id: targetPrice._id,\n      default: price,\n      dayOfWeekPriceList: targetPrice ? targetPrice.dayOfWeekPriceList : []\n    });\n    var copyMap = new Map(priceMap);\n    setPriceMap(copyMap);\n  };\n\n  var handleUpdateBtnClick =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var updatePricesVariables, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              updatePricesVariables = function () {\n                var returnTemp = [];\n                roomTypes.forEach(function (roomType) {\n                  seasonData.forEach(function (season) {\n                    var targetPrice = priceMap.get(roomType._id + season._id);\n                    if (!targetPrice) throw Error(\"handleUpdateBtnClick :: id none match\");\n                    returnTemp.push({\n                      seasonPriceId: targetPrice._id,\n                      defaultPrice: targetPrice.default,\n                      dayOfWeekPriceList: targetPrice.dayOfWeekPriceList\n                    });\n                  });\n                });\n                return returnTemp;\n              }();\n\n              _context.next = 3;\n              return updateSeasonPriceMu({\n                variables: {\n                  defaultRoomTypePriceInputs: roomTypePrices,\n                  seasonPricesInputs: updatePricesVariables\n                }\n              });\n\n            case 3:\n              result = _context.sent;\n\n              if (muResult(result, \"UpdateSeasonPrices\")) {\n                setShouldSave(false);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleUpdateBtnClick() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var seasonTableColumns = seasonData.map(function (season) {\n    return {\n      Header: React.createElement(SeasonHeader // key={season._id}\n      , {\n        seasons: seasonData,\n        setSeasons: setSeasons,\n        season: season,\n        updateSeasonMu: updateSeasonMu,\n        priorityOption: priorityOption,\n        deleteSeasonMu: deleteSeasonMu,\n        changePriorityMu: changePriorityMu,\n        houseId: house._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }),\n      accessor: \"index\",\n      minWidth: isPhablet ? 130 : 130,\n      maxWidth: 234,\n      Cell: function Cell(_ref3) {\n        var value = _ref3.value,\n            roomType = _ref3.original,\n            index = _ref3.index;\n        var targetPrice = priceMap.get(roomType._id + season._id);\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, targetPrice && React.createElement(\"div\", {\n          className: \"setPrice__priceCell\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, React.createElement(InputText, {\n          wrapClassName: \"JDmargin-bottom0\",\n          label: LANG(\"season_basic_price\"),\n          comma: true,\n          defaultValue: targetPrice.default.toString(),\n          onBlur: function onBlur(e) {\n            handleSeasonDefaultPrice(season._id, roomType._id, toNumber(e.currentTarget.value));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }), React.createElement(CircleIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, React.createElement(JDIcon, {\n          tooltip: LANG(\"day_of_week_price\"),\n          className: \"JDmargin-bottom0\",\n          onClick: function onClick() {\n            dayOfWeekModal.openModal({\n              roomTypeId: roomType._id,\n              seasonId: season._id,\n              priceInput: targetPrice\n            });\n          },\n          icon: \"edit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }))));\n      }\n    };\n  });\n  var tableColumns = [{\n    Header: \"\".concat(LANG(\"roomType\"), \" \\\\ \").concat(LANG(\"season\")),\n    accessor: \"name\",\n    Cell: function Cell(_ref4) {\n      var value = _ref4.value,\n          original = _ref4.original,\n          index = _ref4.index;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, value);\n    }\n  }, {\n    Header: LANG(\"basic_price\"),\n    accessor: \"defaultPrice\",\n    Cell: function Cell(_ref5) {\n      var value = _ref5.value,\n          original = _ref5.original,\n          index = _ref5.index;\n      return React.createElement(InputText, {\n        label: LANG(\"room_type_basic_price\"),\n        wrapClassName: \"JDmargin-bottom0\",\n        comma: true,\n        defaultValue: (roomTypePrices[index] ? roomTypePrices[index].defaultPrice || 0 : 0).toString(),\n        onBlur: function onBlur(e) {\n          handleRoomTypeDefaultPriceBlur(original._id, toNumber(e.currentTarget.value));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      });\n    }\n  }].concat(_toConsumableArray(seasonTableColumns));\n  var containerClasses = classNames(\"container\", undefined, {\n    \"container--sm\": seasonData.length < 3,\n    \"container--md\": seasonData.length >= 3 && seasonData.length < 5,\n    \"container--lg\": seasonData.length >= 5 && seasonData.length < 7\n  });\n  return React.createElement(\"div\", {\n    id: \"setPrice\",\n    className: \"setPrice \".concat(containerClasses),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"docs-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, LANG(\"price_setting\")), React.createElement(Button, {\n    onClick: function onClick() {\n      createSeasonModal.openModal();\n    },\n    label: LANG(\"create_season\"),\n    thema: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: function onClick() {\n      handleUpdateBtnClick();\n    },\n    className: \"JDz-index-6\",\n    pulse: shouldSave,\n    label: LANG(\"save\"),\n    thema: \"point\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }), React.createElement(Link, {\n    to: \"/dailyPrice\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, React.createElement(Button, {\n    icon: \"arrowTo\",\n    label: LANG(\"set_daily_price\"),\n    mode: \"border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  })), loading ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, React.createElement(Preloader, {\n    size: \"large\",\n    loading: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  })) : React.createElement(JDtable, Object.assign({\n    className: \"setPrice__table\",\n    marginAtuo: false\n  }, ReactTableDefault, {\n    data: roomTypes,\n    columns: tableColumns,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  })), React.createElement(CreateSeasonModal, {\n    key: roomTypes.toString(),\n    houseId: house._id,\n    roomTypes: roomTypes,\n    modalHook: createSeasonModal,\n    createSeasonMu: createSeasonMu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }), React.createElement(DayOfWeekModal, {\n    priceMap: priceMap,\n    setShouldSave: setShouldSave,\n    setPriceMap: setPriceMap,\n    modalHook: dayOfWeekModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }), React.createElement(JDlist, {\n    marginBottom: \"short\",\n    contents: [React.createElement(\"span\", {\n      className: \"JDtextColor--point\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, LANG(\"price_priority\")), React.createElement(\"span\", {\n      className: \"JDtextColor--point\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, LANG(\"when_season_multiple_applyed_use_left_side_value_will_be_used\"))],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  })));\n};\n\nexport default EerrorProtect(SetPrice);","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/middleServer/setPrice/SetPrice.tsx"],"names":["React","useState","EerrorProtect","Preloader","classNames","Button","Link","JDtable","ReactTableDefault","JDIcon","InputText","toNumber","muResult","CircleIcon","selectOpCreater","SeasonHeader","useModal","useShouldSave","LANG","DayOfWeekModal","CreateSeasonModal","WindowSize","JDlist","SetPrice","defaultPriceMap","priceMap","roomTypes","defaultSeasonData","seasonData","updateSeasonPriceMu","updateSeasonMu","createSeasonMu","createLoaindg","changePriorityMu","deleteSeasonMu","windowWidth","loading","context","house","isPhablet","PHABLET","dayOfWeekModal","createSeasonModal","setSeasons","map","roomType","roomTypeId","_id","defaultPrice","roomTypePrices","setRoomTypePrices","setPriceMap","shouldSave","setShouldSave","priorityOption","count","length","labelAdd","handleRoomTypeDefaultPriceBlur","value","targetPrice","find","prices","handleSeasonDefaultPrice","seasonId","price","get","set","default","dayOfWeekPriceList","copyMap","Map","handleUpdateBtnClick","updatePricesVariables","returnTemp","forEach","season","Error","push","seasonPriceId","variables","defaultRoomTypePriceInputs","seasonPricesInputs","result","seasonTableColumns","Header","accessor","minWidth","maxWidth","Cell","original","index","toString","e","currentTarget","openModal","priceInput","tableColumns","containerClasses","undefined"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {EerrorProtect} from \"../../../utils/errProtect\";\r\nimport \"./SetPrice.scss\";\r\nimport {\r\n  getAllSeasonTable_GetAllRoomType_roomTypes,\r\n  getAllSeasonTable_GetAllSeason_seasons as ISeason,\r\n  createSeason,\r\n  createSeasonVariables,\r\n  changePriority,\r\n  changePriorityVariables,\r\n  deleteSeason,\r\n  deleteSeasonVariables,\r\n  updateSeasonPrices,\r\n  updateSeasonPricesVariables,\r\n  updateSeason,\r\n  updateSeasonVariables,\r\n  UpdateSeasonPriceInput\r\n} from \"../../../types/api\";\r\nimport Preloader from \"../../../atoms/preloader/Preloader\";\r\nimport classNames from \"classnames\";\r\nimport Button from \"../../../atoms/button/Button\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {priceMapResult} from \"./SetPriceWrap\";\r\nimport JDtable, {ReactTableDefault} from \"../../../atoms/table/Table\";\r\nimport {CellInfo} from \"react-table\";\r\nimport JDIcon from \"../../../atoms/icons/Icons\";\r\nimport InputText from \"../../../atoms/forms/inputText/InputText\";\r\nimport {toNumber, muResult} from \"../../../utils/utils\";\r\nimport CircleIcon from \"../../../atoms/circleIcon/CircleIcon\";\r\nimport selectOpCreater from \"../../../utils/selectOptionCreater\";\r\nimport SeasonHeader from \"./components/seasonHeader\";\r\nimport {useModal, useShouldSave, useDayPicker, LANG} from \"../../../hooks/hook\";\r\nimport DayOfWeekModal, {IDayOfWeekModalInfo} from \"./components/dayOfWeekModal\";\r\nimport CreateSeasonModal from \"./components/createSeasonModal\";\r\nimport {MutationFn} from \"react-apollo\";\r\nimport {WindowSizeProps} from \"react-window-size\";\r\nimport {WindowSize} from \"../../../types/enum\";\r\nimport {IContext} from \"../../MiddleServerRouter\";\r\nimport JDlist from \"../../../atoms/list/List\";\r\nimport JDLabel from \"../../../atoms/label/JDLabel\";\r\n\r\ninterface IProps {\r\n  loading?: boolean;\r\n  seasonData: ISeason[];\r\n  priceMap: Map<string, priceMapResult>;\r\n  roomTypes: getAllSeasonTable_GetAllRoomType_roomTypes[];\r\n  context: IContext;\r\n  createSeasonMu: MutationFn<createSeason, createSeasonVariables>;\r\n  createLoaindg: boolean;\r\n  updateSeasonPriceMu: MutationFn<\r\n    updateSeasonPrices,\r\n    updateSeasonPricesVariables\r\n  >;\r\n  updateSeasonMu: MutationFn<updateSeason, updateSeasonVariables>;\r\n  changePriorityMu: MutationFn<changePriority, changePriorityVariables>;\r\n  deleteSeasonMu: MutationFn<deleteSeason, deleteSeasonVariables>;\r\n}\r\n\r\nexport interface IDefaultSeason {\r\n  name: string;\r\n  _id: string;\r\n  color: string;\r\n  end: null;\r\n  start: null;\r\n  priority: number;\r\n  description: string;\r\n}\r\n\r\nconst SetPrice: React.SFC<IProps & WindowSizeProps> = ({\r\n  priceMap: defaultPriceMap,\r\n  roomTypes,\r\n  seasonData: defaultSeasonData,\r\n  updateSeasonPriceMu,\r\n  updateSeasonMu,\r\n  createSeasonMu,\r\n  createLoaindg,\r\n  changePriorityMu,\r\n  deleteSeasonMu,\r\n  windowWidth,\r\n  loading,\r\n  context\r\n}) => {\r\n  const {house} = context;\r\n  const isPhablet = windowWidth <= WindowSize.PHABLET;\r\n  const dayOfWeekModal = useModal<IDayOfWeekModalInfo>(false);\r\n  const createSeasonModal = useModal(false);\r\n  const [seasonData, setSeasons] = useState(defaultSeasonData);\r\n\r\n  const [roomTypePrices, setRoomTypePrices] = useState(\r\n    roomTypes.map(roomType => ({\r\n      roomTypeId: roomType._id,\r\n      defaultPrice: roomType.defaultPrice\r\n    }))\r\n  );\r\n  const [priceMap, setPriceMap] = useState(defaultPriceMap);\r\n  const {shouldSave, setShouldSave} = useShouldSave([priceMap, roomTypePrices]);\r\n\r\n  const priorityOption = selectOpCreater({\r\n    count: seasonData.length,\r\n    labelAdd: LANG(\"nth\")\r\n  });\r\n\r\n  const handleRoomTypeDefaultPriceBlur = (\r\n    roomTypeId: string,\r\n    value: number\r\n  ) => {\r\n    const targetPrice = roomTypePrices.find(\r\n      prices => prices.roomTypeId === roomTypeId\r\n    );\r\n    if (!targetPrice) return;\r\n\r\n    targetPrice.defaultPrice = value;\r\n    setRoomTypePrices([...roomTypePrices]);\r\n  };\r\n\r\n  const handleSeasonDefaultPrice = (\r\n    seasonId: string,\r\n    roomTypeId: string,\r\n    price: number\r\n  ) => {\r\n    const targetPrice = priceMap.get(roomTypeId + seasonId);\r\n    if (!targetPrice) return;\r\n    priceMap.set(roomTypeId + seasonId, {\r\n      _id: targetPrice._id,\r\n      default: price,\r\n      dayOfWeekPriceList: targetPrice ? targetPrice.dayOfWeekPriceList : []\r\n    });\r\n    const copyMap = new Map(priceMap);\r\n    setPriceMap(copyMap);\r\n  };\r\n\r\n  const handleUpdateBtnClick = async () => {\r\n    const updatePricesVariables: UpdateSeasonPriceInput[] = (() => {\r\n      let returnTemp: UpdateSeasonPriceInput[] = [];\r\n      roomTypes.forEach(roomType => {\r\n        seasonData.forEach(season => {\r\n          const targetPrice = priceMap.get(roomType._id + season._id);\r\n          if (!targetPrice)\r\n            throw Error(\"handleUpdateBtnClick :: id none match\");\r\n          returnTemp.push({\r\n            seasonPriceId: targetPrice._id,\r\n            defaultPrice: targetPrice.default,\r\n            dayOfWeekPriceList: targetPrice.dayOfWeekPriceList\r\n          });\r\n        });\r\n      });\r\n      return returnTemp;\r\n    })();\r\n\r\n    const result = await updateSeasonPriceMu({\r\n      variables: {\r\n        defaultRoomTypePriceInputs: roomTypePrices,\r\n        seasonPricesInputs: updatePricesVariables\r\n      }\r\n    });\r\n\r\n    if (muResult(result, \"UpdateSeasonPrices\")) {\r\n      setShouldSave(false);\r\n    }\r\n  };\r\n\r\n  const seasonTableColumns = seasonData.map(season => ({\r\n    Header: (\r\n      <SeasonHeader\r\n        // key={season._id}\r\n        seasons={seasonData}\r\n        setSeasons={setSeasons}\r\n        season={season}\r\n        updateSeasonMu={updateSeasonMu}\r\n        priorityOption={priorityOption}\r\n        deleteSeasonMu={deleteSeasonMu}\r\n        changePriorityMu={changePriorityMu}\r\n        houseId={house._id}\r\n      />\r\n    ),\r\n    accessor: \"index\",\r\n    minWidth: isPhablet ? 130 : 130,\r\n    maxWidth: 234,\r\n    Cell: ({value, original: roomType, index}: CellInfo) => {\r\n      const targetPrice = priceMap.get(roomType._id + season._id);\r\n      return (\r\n        <div>\r\n          {targetPrice && (\r\n            <div className=\"setPrice__priceCell\">\r\n              <InputText\r\n                wrapClassName=\"JDmargin-bottom0\"\r\n                label={LANG(\"season_basic_price\")}\r\n                comma\r\n                defaultValue={targetPrice.default.toString()}\r\n                onBlur={e => {\r\n                  handleSeasonDefaultPrice(\r\n                    season._id,\r\n                    roomType._id,\r\n                    toNumber(e.currentTarget.value)\r\n                  );\r\n                }}\r\n              />\r\n              <CircleIcon>\r\n                <JDIcon\r\n                  tooltip={LANG(\"day_of_week_price\")}\r\n                  className=\"JDmargin-bottom0\"\r\n                  onClick={() => {\r\n                    dayOfWeekModal.openModal({\r\n                      roomTypeId: roomType._id,\r\n                      seasonId: season._id,\r\n                      priceInput: targetPrice\r\n                    });\r\n                  }}\r\n                  icon=\"edit\"\r\n                />\r\n              </CircleIcon>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  }));\r\n\r\n  const tableColumns = [\r\n    {\r\n      Header: `${LANG(\"roomType\")} \\\\ ${LANG(\"season\")}`,\r\n      accessor: \"name\",\r\n      Cell: ({value, original, index}: CellInfo) => {\r\n        return <div>{value}</div>;\r\n      }\r\n    },\r\n    {\r\n      Header: LANG(\"basic_price\"),\r\n      accessor: \"defaultPrice\",\r\n      Cell: ({value, original, index}: CellInfo) => {\r\n        return (\r\n          <InputText\r\n            label={LANG(\"room_type_basic_price\")}\r\n            wrapClassName=\"JDmargin-bottom0\"\r\n            comma\r\n            defaultValue={(roomTypePrices[index]\r\n              ? roomTypePrices[index].defaultPrice || 0\r\n              : 0\r\n            ).toString()}\r\n            onBlur={e => {\r\n              handleRoomTypeDefaultPriceBlur(\r\n                original._id,\r\n                toNumber(e.currentTarget.value)\r\n              );\r\n            }}\r\n          />\r\n        );\r\n      }\r\n    },\r\n    ...seasonTableColumns\r\n  ];\r\n\r\n  const containerClasses = classNames(\"container\", undefined, {\r\n    \"container--sm\": seasonData.length < 3,\r\n    \"container--md\": seasonData.length >= 3 && seasonData.length < 5,\r\n    \"container--lg\": seasonData.length >= 5 && seasonData.length < 7\r\n  });\r\n\r\n  return (\r\n    <div id=\"setPrice\" className={`setPrice ${containerClasses}`}>\r\n      <div className=\"docs-section\">\r\n        <h3>{LANG(\"price_setting\")}</h3>\r\n        <Button\r\n          onClick={() => {\r\n            createSeasonModal.openModal();\r\n          }}\r\n          label={LANG(\"create_season\")}\r\n          thema=\"primary\"\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            handleUpdateBtnClick();\r\n          }}\r\n          className=\"JDz-index-6\"\r\n          pulse={shouldSave}\r\n          label={LANG(\"save\")}\r\n          thema=\"point\"\r\n        />\r\n        <Link to=\"/dailyPrice\">\r\n          <Button\r\n            icon=\"arrowTo\"\r\n            label={LANG(\"set_daily_price\")}\r\n            mode=\"border\"\r\n          />\r\n        </Link>\r\n        {loading ? (\r\n          <div>\r\n            <Preloader size={\"large\"} loading={loading} />\r\n          </div>\r\n        ) : (\r\n          <JDtable\r\n            className=\"setPrice__table\"\r\n            marginAtuo={false}\r\n            {...ReactTableDefault}\r\n            data={roomTypes}\r\n            columns={tableColumns}\r\n          />\r\n        )}\r\n        <CreateSeasonModal\r\n          key={roomTypes.toString()}\r\n          houseId={house._id}\r\n          roomTypes={roomTypes}\r\n          modalHook={createSeasonModal}\r\n          createSeasonMu={createSeasonMu}\r\n        />\r\n        <DayOfWeekModal\r\n          priceMap={priceMap}\r\n          setShouldSave={setShouldSave}\r\n          setPriceMap={setPriceMap}\r\n          modalHook={dayOfWeekModal}\r\n        />\r\n        <JDlist\r\n          marginBottom=\"short\"\r\n          contents={[\r\n            <span className=\"JDtextColor--point\">\r\n              {LANG(\"price_priority\")}\r\n            </span>,\r\n            <span className=\"JDtextColor--point\">\r\n              {LANG(\r\n                \"when_season_multiple_applyed_use_left_side_value_will_be_used\"\r\n              )}\r\n            </span>\r\n          ]}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EerrorProtect(SetPrice);\r\n"]},"metadata":{},"sourceType":"module"}