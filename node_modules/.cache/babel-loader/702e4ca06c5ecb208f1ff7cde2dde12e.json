{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\bookingHost\\\\statistic\\\\Statistic.tsx\";\nimport React, { useState, Fragment } from \"react\";\nimport Card from \"../../../atoms/cards/Card\";\nimport { SalesStatisticsUnit, WindowSize, FLOATING_PRELOADER_SIZE } from \"../../../types/enum\";\nimport { useModal, LANG } from \"../../../hooks/hook\";\nimport Button from \"../../../atoms/button/Button\";\nimport moment from \"moment\";\nimport Preloader from \"../../../atoms/preloader/Preloader\";\nimport \"./Statistic.scss\";\nimport StaticController from \"./component/StaticController\";\nimport reactWindowSize from \"react-window-size\";\nimport StaticIcons from \"./component/StaticIcons\";\nimport StaticsControllerModal from \"./component/StaticsControllerModal\";\nimport { getStaticColors } from \"../../../utils/getStaticColors\";\nimport JDgraph from \"../../../atoms/graph/graph\";\n// refetch 가 Query 컴포넌트 리턴 프로프임\nexport var IGraphViewMode;\n\n(function (IGraphViewMode) {\n  IGraphViewMode[\"list\"] = \"list\";\n  IGraphViewMode[\"line\"] = \"line\";\n  IGraphViewMode[\"doughnut\"] = \"doughnut\";\n})(IGraphViewMode || (IGraphViewMode = {}));\n\nvar Statistic = function Statistic(_ref) {\n  var context = _ref.context,\n      loading = _ref.loading,\n      staticsWrapProps = _ref.staticsWrapProps,\n      windowWidth = _ref.windowWidth;\n  var setQueryOp = staticsWrapProps.setQueryOp,\n      queryOp = staticsWrapProps.queryOp,\n      staticData = staticsWrapProps.staticData,\n      queryDateHook = staticsWrapProps.queryDateHook;\n\n  var _useState = useState(IGraphViewMode.doughnut),\n      _useState2 = _slicedToArray(_useState, 2),\n      viewMode = _useState2[0],\n      setViewMode = _useState2[1];\n\n  var isTabletDown = windowWidth <= WindowSize.TABLET;\n  var staticControllerModalHook = useModal(false); // 각 그래프 형태에따라 데이터셋 변화\n\n  var addtionGraphDataset = viewMode === IGraphViewMode.list ? {\n    borderColor: \"rgba(75,192,192,1)\"\n  } : {}; // 오바른 라벨구하기\n\n  var labels = function () {\n    // 로딩 처리\n    if (loading) return new Array(staticData.length).fill(\"loading\"); // 단위별로 라벨 그룹화\n\n    if (queryOp.unit === SalesStatisticsUnit.BY_DAY_OF_WEEK) return staticData.map(function (data) {\n      return \"\".concat(data.dateInfo.dayOfWeek);\n    });\n    if (queryOp.unit === SalesStatisticsUnit.BY_DATE) return staticData.map(function (data) {\n      return \"\".concat(data.dateInfo.year, \"-\").concat(data.dateInfo.month, \"-\").concat(data.dateInfo.date);\n    });\n    if (queryOp.unit === SalesStatisticsUnit.MONTHLY) return staticData.map(function (data) {\n      return \"\".concat(data.dateInfo.year, \"-\").concat(data.dateInfo.month);\n    });\n    if (queryOp.unit === SalesStatisticsUnit.WEEKLY) return staticData.map(function (data) {\n      return \"\".concat(data.dateInfo.year, \"-\").concat(data.dateInfo.month);\n    });\n    if (queryOp.unit === SalesStatisticsUnit.YEARLY) return staticData.map(function (data) {\n      return \"\".concat(data.dateInfo.year);\n    });\n    return [\"\"];\n  }(); // 그래프 데이터\n\n\n  var graphData = {\n    labels: labels,\n    datasets: [{\n      label: queryOp.selectStatic,\n      data: staticData.map(function (data) {\n        return data.price;\n      }),\n      fill: false,\n      backgroundColor: getStaticColors(staticData.length),\n      hoverBackgroundColor: getStaticColors(staticData.length, {\n        light: true\n      })\n    }]\n  };\n  Object.assign(graphData, addtionGraphDataset); // 오늘날자 통계 선택\n\n  var handleTodaySalesStatic = function handleTodaySalesStatic() {\n    setQueryOp({\n      selectStatic: LANG(\"sales_statistics\"),\n      unit: SalesStatisticsUnit.BY_DAY_OF_WEEK\n    });\n    queryDateHook.setFrom(moment(new Date()).add(-1, \"day\").toDate());\n    queryDateHook.setTo(new Date());\n  }; // 이번달 매출 통계 선택\n\n\n  var handleThisMonthSalesStatic = function handleThisMonthSalesStatic() {\n    setQueryOp({\n      selectStatic: LANG(\"sales_statistics\"),\n      unit: SalesStatisticsUnit.BY_DAY_OF_WEEK\n    });\n    queryDateHook.setFrom(moment(new Date()).startOf(\"month\").toDate());\n    queryDateHook.setTo(new Date());\n  };\n\n  var handleSetDaySalesStatic = function handleSetDaySalesStatic() {\n    setQueryOp({\n      selectStatic: LANG(\"sales_statistics\"),\n      unit: SalesStatisticsUnit.BY_DATE\n    });\n    queryDateHook.setFrom(moment(new Date()).add(-14, \"day\").toDate());\n    queryDateHook.setTo(new Date());\n  };\n\n  var handleSetMonthSalesStatic = function handleSetMonthSalesStatic() {\n    setQueryOp({\n      unit: SalesStatisticsUnit.MONTHLY,\n      selectStatic: \"\"\n    });\n    queryDateHook.setFrom(moment(new Date()).add(-12, \"month\").toDate());\n    queryDateHook.setTo(new Date());\n  };\n\n  var handleSetYearSalesStatic = function handleSetYearSalesStatic() {\n    setQueryOp({\n      unit: SalesStatisticsUnit.YEARLY,\n      selectStatic: \"\"\n    });\n    queryDateHook.setFrom(moment(new Date()).add(-3, \"year\").toDate());\n    queryDateHook.setTo(new Date());\n  };\n\n  var staticsProps = _objectSpread({}, staticsWrapProps, {\n    viewMode: viewMode,\n    setViewMode: setViewMode\n  });\n\n  return React.createElement(\"div\", {\n    className: \"container statistic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"docs-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, LANG(\"statistics\")), React.createElement(\"div\", {\n    className: \"statistic__shortBtnsWrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleTodaySalesStatic,\n    label: LANG(\"today_sales\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleThisMonthSalesStatic,\n    label: LANG(\"this_month_sales\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleSetDaySalesStatic,\n    label: LANG(\"day_sales\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleSetMonthSalesStatic,\n    label: LANG(\"month_sales\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleSetYearSalesStatic,\n    label: LANG(\"year_sales\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"flex-grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"flex-grid__col col--full-6 col--wmd-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(Card, {\n    className: \"statistic__graphCard\",\n    fullHeight: !isTabletDown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, loading ? React.createElement(\"div\", {\n    className: \"statistic__graphPreloader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(Preloader, {\n    wrapClassName: \"\",\n    position: \"center\",\n    noAnimation: true,\n    size: \"large\",\n    loading: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  })) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, !isTabletDown && React.createElement(StaticIcons, {\n    context: context,\n    viewMode: viewMode,\n    setViewMode: setViewMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: (viewMode === \"list\" ? \"statistic__table\" : undefined) + \" statistic__graphWrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, React.createElement(JDgraph, {\n    originalData: staticData,\n    JDtype: viewMode,\n    data: graphData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }))))), windowWidth > WindowSize.TABLET ? React.createElement(\"div\", {\n    className: \"flex-grid__col col--full-6 col--wmd-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(Card, {\n    fullHeight: !isTabletDown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(StaticController, {\n    staticsProps: staticsProps,\n    context: context,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }))) : React.createElement(StaticsControllerModal, {\n    context: context,\n    staticsProps: staticsProps,\n    modalHook: staticControllerModalHook,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  })), windowWidth > WindowSize.TABLET || React.createElement(Button, {\n    mode: \"flat\",\n    onClick: function onClick() {\n      staticControllerModalHook.openModal();\n    },\n    thema: \"primary\",\n    label: LANG(\"change_statistics\"),\n    icon: \"controller\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  })), React.createElement(Preloader, {\n    floating: true,\n    size: FLOATING_PRELOADER_SIZE,\n    loading: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }));\n};\n\nexport default reactWindowSize(Statistic);","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/bookingHost/statistic/Statistic.tsx"],"names":["React","useState","Fragment","Card","SalesStatisticsUnit","WindowSize","FLOATING_PRELOADER_SIZE","useModal","LANG","Button","moment","Preloader","StaticController","reactWindowSize","StaticIcons","StaticsControllerModal","getStaticColors","JDgraph","IGraphViewMode","Statistic","context","loading","staticsWrapProps","windowWidth","setQueryOp","queryOp","staticData","queryDateHook","doughnut","viewMode","setViewMode","isTabletDown","TABLET","staticControllerModalHook","addtionGraphDataset","list","borderColor","labels","Array","length","fill","unit","BY_DAY_OF_WEEK","map","data","dateInfo","dayOfWeek","BY_DATE","year","month","date","MONTHLY","WEEKLY","YEARLY","graphData","datasets","label","selectStatic","price","backgroundColor","hoverBackgroundColor","light","Object","assign","handleTodaySalesStatic","setFrom","Date","add","toDate","setTo","handleThisMonthSalesStatic","startOf","handleSetDaySalesStatic","handleSetMonthSalesStatic","handleSetYearSalesStatic","staticsProps","undefined","openModal"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AAEA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,SACEC,mBADF,EAEEC,UAFF,EAGEC,uBAHF,QAIO,qBAJP;AAMA,SAAuBC,QAAvB,EAAiCC,IAAjC,QAA4C,qBAA5C;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AAEA,OAAO,kBAAP;AAEA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,eAAP,MAA+C,mBAA/C;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,sBAAP,MAAmC,oCAAnC;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AAmBA;AAEA,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAMZ,IAAMC,SAA6C,GAAG,SAAhDA,SAAgD,OAKhD;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,OAGI,QAHJA,OAGI;AAAA,MAFJC,gBAEI,QAFJA,gBAEI;AAAA,MADJC,WACI,QADJA,WACI;AAAA,MACGC,UADH,GACqDF,gBADrD,CACGE,UADH;AAAA,MACeC,OADf,GACqDH,gBADrD,CACeG,OADf;AAAA,MACwBC,UADxB,GACqDJ,gBADrD,CACwBI,UADxB;AAAA,MACoCC,aADpC,GACqDL,gBADrD,CACoCK,aADpC;;AAAA,kBAE4B1B,QAAQ,CACtCiB,cAAc,CAACU,QADuB,CAFpC;AAAA;AAAA,MAEGC,QAFH;AAAA,MAEaC,WAFb;;AAKJ,MAAMC,YAAY,GAAGR,WAAW,IAAIlB,UAAU,CAAC2B,MAA/C;AACA,MAAMC,yBAAyB,GAAG1B,QAAQ,CAAC,KAAD,CAA1C,CANI,CAQJ;;AACA,MAAM2B,mBAAmB,GACvBL,QAAQ,KAAKX,cAAc,CAACiB,IAA5B,GACI;AACEC,IAAAA,WAAW,EAAE;AADf,GADJ,GAII,EALN,CATI,CAgBJ;;AACA,MAAMC,MAAM,GAAI,YAAgB;AAC9B;AACA,QAAIhB,OAAJ,EAAa,OAAO,IAAIiB,KAAJ,CAAUZ,UAAU,CAACa,MAArB,EAA6BC,IAA7B,CAAkC,SAAlC,CAAP,CAFiB,CAI9B;;AACA,QAAIf,OAAO,CAACgB,IAAR,KAAiBrC,mBAAmB,CAACsC,cAAzC,EACE,OAAOhB,UAAU,CAACiB,GAAX,CAAe,UAAAC,IAAI;AAAA,uBAAOA,IAAI,CAACC,QAAL,CAAcC,SAArB;AAAA,KAAnB,CAAP;AAEF,QAAIrB,OAAO,CAACgB,IAAR,KAAiBrC,mBAAmB,CAAC2C,OAAzC,EACE,OAAOrB,UAAU,CAACiB,GAAX,CACL,UAAAC,IAAI;AAAA,uBACCA,IAAI,CAACC,QAAL,CAAcG,IADf,cACuBJ,IAAI,CAACC,QAAL,CAAcI,KADrC,cAC8CL,IAAI,CAACC,QAAL,CAAcK,IAD5D;AAAA,KADC,CAAP;AAKF,QAAIzB,OAAO,CAACgB,IAAR,KAAiBrC,mBAAmB,CAAC+C,OAAzC,EACE,OAAOzB,UAAU,CAACiB,GAAX,CACL,UAAAC,IAAI;AAAA,uBAAOA,IAAI,CAACC,QAAL,CAAcG,IAArB,cAA6BJ,IAAI,CAACC,QAAL,CAAcI,KAA3C;AAAA,KADC,CAAP;AAIF,QAAIxB,OAAO,CAACgB,IAAR,KAAiBrC,mBAAmB,CAACgD,MAAzC,EACE,OAAO1B,UAAU,CAACiB,GAAX,CACL,UAAAC,IAAI;AAAA,uBAAOA,IAAI,CAACC,QAAL,CAAcG,IAArB,cAA6BJ,IAAI,CAACC,QAAL,CAAcI,KAA3C;AAAA,KADC,CAAP;AAIF,QAAIxB,OAAO,CAACgB,IAAR,KAAiBrC,mBAAmB,CAACiD,MAAzC,EACE,OAAO3B,UAAU,CAACiB,GAAX,CAAe,UAAAC,IAAI;AAAA,uBAAOA,IAAI,CAACC,QAAL,CAAcG,IAArB;AAAA,KAAnB,CAAP;AACF,WAAO,CAAC,EAAD,CAAP;AACD,GA3Bc,EAAf,CAjBI,CA8CJ;;;AACA,MAAMM,SAAqC,GAAG;AAC5CjB,IAAAA,MAAM,EAANA,MAD4C;AAE5CkB,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE/B,OAAO,CAACgC,YADjB;AAEEb,MAAAA,IAAI,EAAElB,UAAU,CAACiB,GAAX,CAAe,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACc,KAAT;AAAA,OAAnB,CAFR;AAGElB,MAAAA,IAAI,EAAE,KAHR;AAIEmB,MAAAA,eAAe,EAAE3C,eAAe,CAACU,UAAU,CAACa,MAAZ,CAJlC;AAKEqB,MAAAA,oBAAoB,EAAE5C,eAAe,CAACU,UAAU,CAACa,MAAZ,EAAoB;AAACsB,QAAAA,KAAK,EAAE;AAAR,OAApB;AALvC,KADQ;AAFkC,GAA9C;AAaAC,EAAAA,MAAM,CAACC,MAAP,CAAcT,SAAd,EAAyBpB,mBAAzB,EA5DI,CA8DJ;;AACA,MAAM8B,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnCxC,IAAAA,UAAU,CAAC;AACTiC,MAAAA,YAAY,EAAEjD,IAAI,CAAC,kBAAD,CADT;AAETiC,MAAAA,IAAI,EAAErC,mBAAmB,CAACsC;AAFjB,KAAD,CAAV;AAIAf,IAAAA,aAAa,CAACsC,OAAd,CACEvD,MAAM,CAAC,IAAIwD,IAAJ,EAAD,CAAN,CACGC,GADH,CACO,CAAC,CADR,EACW,KADX,EAEGC,MAFH,EADF;AAKAzC,IAAAA,aAAa,CAAC0C,KAAd,CAAoB,IAAIH,IAAJ,EAApB;AACD,GAXD,CA/DI,CA4EJ;;;AACA,MAAMI,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAM;AACvC9C,IAAAA,UAAU,CAAC;AACTiC,MAAAA,YAAY,EAAEjD,IAAI,CAAC,kBAAD,CADT;AAETiC,MAAAA,IAAI,EAAErC,mBAAmB,CAACsC;AAFjB,KAAD,CAAV;AAIAf,IAAAA,aAAa,CAACsC,OAAd,CACEvD,MAAM,CAAC,IAAIwD,IAAJ,EAAD,CAAN,CACGK,OADH,CACW,OADX,EAEGH,MAFH,EADF;AAKAzC,IAAAA,aAAa,CAAC0C,KAAd,CAAoB,IAAIH,IAAJ,EAApB;AACD,GAXD;;AAaA,MAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpChD,IAAAA,UAAU,CAAC;AACTiC,MAAAA,YAAY,EAAEjD,IAAI,CAAC,kBAAD,CADT;AAETiC,MAAAA,IAAI,EAAErC,mBAAmB,CAAC2C;AAFjB,KAAD,CAAV;AAIApB,IAAAA,aAAa,CAACsC,OAAd,CACEvD,MAAM,CAAC,IAAIwD,IAAJ,EAAD,CAAN,CACGC,GADH,CACO,CAAC,EADR,EACY,KADZ,EAEGC,MAFH,EADF;AAKAzC,IAAAA,aAAa,CAAC0C,KAAd,CAAoB,IAAIH,IAAJ,EAApB;AACD,GAXD;;AAaA,MAAMO,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AACtCjD,IAAAA,UAAU,CAAC;AACTiB,MAAAA,IAAI,EAAErC,mBAAmB,CAAC+C,OADjB;AAETM,MAAAA,YAAY,EAAE;AAFL,KAAD,CAAV;AAIA9B,IAAAA,aAAa,CAACsC,OAAd,CACEvD,MAAM,CAAC,IAAIwD,IAAJ,EAAD,CAAN,CACGC,GADH,CACO,CAAC,EADR,EACY,OADZ,EAEGC,MAFH,EADF;AAKAzC,IAAAA,aAAa,CAAC0C,KAAd,CAAoB,IAAIH,IAAJ,EAApB;AACD,GAXD;;AAaA,MAAMQ,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AACrClD,IAAAA,UAAU,CAAC;AACTiB,MAAAA,IAAI,EAAErC,mBAAmB,CAACiD,MADjB;AAETI,MAAAA,YAAY,EAAE;AAFL,KAAD,CAAV;AAIA9B,IAAAA,aAAa,CAACsC,OAAd,CACEvD,MAAM,CAAC,IAAIwD,IAAJ,EAAD,CAAN,CACGC,GADH,CACO,CAAC,CADR,EACW,MADX,EAEGC,MAFH,EADF;AAKAzC,IAAAA,aAAa,CAAC0C,KAAd,CAAoB,IAAIH,IAAJ,EAApB;AACD,GAXD;;AAaA,MAAMS,YAA2B,qBAC5BrD,gBAD4B;AAE/BO,IAAAA,QAAQ,EAARA,QAF+B;AAG/BC,IAAAA,WAAW,EAAXA;AAH+B,IAAjC;;AAMA,SACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKtB,IAAI,CAAC,YAAD,CAAT,CADF,EAEE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEwD,sBADX;AAEE,IAAA,KAAK,EAAExD,IAAI,CAAC,aAAD,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE8D,0BADX;AAEE,IAAA,KAAK,EAAE9D,IAAI,CAAC,kBAAD,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EASE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEgE,uBAAjB;AAA0C,IAAA,KAAK,EAAEhE,IAAI,CAAC,WAAD,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAUE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEiE,yBADX;AAEE,IAAA,KAAK,EAAEjE,IAAI,CAAC,aAAD,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAcE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEkE,wBADX;AAEE,IAAA,KAAK,EAAElE,IAAI,CAAC,YAAD,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CAFF,EAqBE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,sBAAhB;AAAuC,IAAA,UAAU,EAAE,CAACuB,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,OAAO,GACN;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,aAAa,EAAC,EADhB;AAEE,IAAA,QAAQ,EAAC,QAFX;AAGE,IAAA,WAAW,MAHb;AAIE,IAAA,IAAI,EAAE,OAJR;AAKE,IAAA,OAAO,EAAEA,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADM,GAWN,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEG,CAACU,YAAD,IACC,oBAAC,WAAD;AACE,IAAA,OAAO,EAAEX,OADX;AAEE,IAAA,QAAQ,EAAES,QAFZ;AAGE,IAAA,WAAW,EAAEC,WAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAUE;AACE,IAAA,SAAS,EACP,CAACD,QAAQ,KAAK,MAAb,GAAsB,kBAAtB,GAA2C+C,SAA5C,IACA,uBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,OAAD;AACE,IAAA,YAAY,EAAElD,UADhB;AAEE,IAAA,MAAM,EAAEG,QAFV;AAGE,IAAA,IAAI,EAAEyB,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAVF,CAZJ,CADF,CADF,EAwCG/B,WAAW,GAAGlB,UAAU,CAAC2B,MAAzB,GACC;AAAK,IAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,UAAU,EAAE,CAACD,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AACE,IAAA,YAAY,EAAE4C,YADhB;AAEE,IAAA,OAAO,EAAEvD,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADD,GAUC,oBAAC,sBAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,YAAY,EAAEuD,YAFhB;AAGE,IAAA,SAAS,EAAE1C,yBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlDJ,CArBF,EA8EGV,WAAW,GAAGlB,UAAU,CAAC2B,MAAzB,IACC,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbC,MAAAA,yBAAyB,CAAC4C,SAA1B;AACD,KAJH;AAKE,IAAA,KAAK,EAAC,SALR;AAME,IAAA,KAAK,EAAErE,IAAI,CAAC,mBAAD,CANb;AAOE,IAAA,IAAI,EAAC,YAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/EJ,CADF,EA2FE,oBAAC,SAAD;AAAW,IAAA,QAAQ,MAAnB;AAAoB,IAAA,IAAI,EAAEF,uBAA1B;AAAmD,IAAA,OAAO,EAAEe,OAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3FF,CADF;AA+FD,CA3OD;;AA6OA,eAAeR,eAAe,CAACM,SAAD,CAA9B","sourcesContent":["import React, {useState, Fragment} from \"react\";\r\nimport {ChartData} from \"react-chartjs-2\";\r\nimport Card from \"../../../atoms/cards/Card\";\r\nimport {\r\n  SalesStatisticsUnit,\r\n  WindowSize,\r\n  FLOATING_PRELOADER_SIZE\r\n} from \"../../../types/enum\";\r\nimport {IQueryOp} from \"./StatisticWrap\";\r\nimport {IUseDayPicker, useModal, LANG} from \"../../../hooks/hook\";\r\nimport Button from \"../../../atoms/button/Button\";\r\nimport moment from \"moment\";\r\nimport Preloader from \"../../../atoms/preloader/Preloader\";\r\nimport {getSalesStatistic_GetSalesStatistic_data} from \"../../../types/api\";\r\nimport \"./Statistic.scss\";\r\nimport {IContext} from \"../BookingHostRouter\";\r\nimport StaticController from \"./component/StaticController\";\r\nimport reactWindowSize, {WindowSizeProps} from \"react-window-size\";\r\nimport StaticIcons from \"./component/StaticIcons\";\r\nimport StaticsControllerModal from \"./component/StaticsControllerModal\";\r\nimport {getStaticColors} from \"../../../utils/getStaticColors\";\r\nimport JDgraph from \"../../../atoms/graph/graph\";\r\n\r\nexport interface IStaticsWrapProps {\r\n  queryOp: IQueryOp;\r\n  queryDateHook: IUseDayPicker;\r\n  staticData: getSalesStatistic_GetSalesStatistic_data[];\r\n  setQueryOp: React.Dispatch<React.SetStateAction<IQueryOp>>;\r\n}\r\n\r\nexport interface IStaticsProps extends IStaticsWrapProps {\r\n  setViewMode: React.Dispatch<React.SetStateAction<IGraphViewMode>>;\r\n  viewMode: IGraphViewMode;\r\n}\r\n\r\ninterface IProps {\r\n  staticsWrapProps: IStaticsWrapProps;\r\n  loading: boolean;\r\n  context: IContext;\r\n}\r\n// refetch 가 Query 컴포넌트 리턴 프로프임\r\n\r\nexport enum IGraphViewMode {\r\n  list = \"list\",\r\n  line = \"line\",\r\n  doughnut = \"doughnut\"\r\n}\r\n\r\nconst Statistic: React.FC<IProps & WindowSizeProps> = ({\r\n  context,\r\n  loading,\r\n  staticsWrapProps,\r\n  windowWidth\r\n}) => {\r\n  const {setQueryOp, queryOp, staticData, queryDateHook} = staticsWrapProps;\r\n  const [viewMode, setViewMode] = useState<IGraphViewMode>(\r\n    IGraphViewMode.doughnut\r\n  );\r\n  const isTabletDown = windowWidth <= WindowSize.TABLET;\r\n  const staticControllerModalHook = useModal(false);\r\n\r\n  // 각 그래프 형태에따라 데이터셋 변화\r\n  const addtionGraphDataset =\r\n    viewMode === IGraphViewMode.list\r\n      ? {\r\n          borderColor: \"rgba(75,192,192,1)\"\r\n        }\r\n      : {};\r\n\r\n  // 오바른 라벨구하기\r\n  const labels = ((): string[] => {\r\n    // 로딩 처리\r\n    if (loading) return new Array(staticData.length).fill(\"loading\");\r\n\r\n    // 단위별로 라벨 그룹화\r\n    if (queryOp.unit === SalesStatisticsUnit.BY_DAY_OF_WEEK)\r\n      return staticData.map(data => `${data.dateInfo.dayOfWeek}`);\r\n\r\n    if (queryOp.unit === SalesStatisticsUnit.BY_DATE)\r\n      return staticData.map(\r\n        data =>\r\n          `${data.dateInfo.year}-${data.dateInfo.month}-${data.dateInfo.date}`\r\n      );\r\n\r\n    if (queryOp.unit === SalesStatisticsUnit.MONTHLY)\r\n      return staticData.map(\r\n        data => `${data.dateInfo.year}-${data.dateInfo.month}`\r\n      );\r\n\r\n    if (queryOp.unit === SalesStatisticsUnit.WEEKLY)\r\n      return staticData.map(\r\n        data => `${data.dateInfo.year}-${data.dateInfo.month}`\r\n      );\r\n\r\n    if (queryOp.unit === SalesStatisticsUnit.YEARLY)\r\n      return staticData.map(data => `${data.dateInfo.year}`);\r\n    return [\"\"];\r\n  })();\r\n\r\n  // 그래프 데이터\r\n  const graphData: ChartData<Chart.ChartData> = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: queryOp.selectStatic,\r\n        data: staticData.map(data => data.price),\r\n        fill: false,\r\n        backgroundColor: getStaticColors(staticData.length),\r\n        hoverBackgroundColor: getStaticColors(staticData.length, {light: true})\r\n      }\r\n    ]\r\n  };\r\n\r\n  Object.assign(graphData, addtionGraphDataset);\r\n\r\n  // 오늘날자 통계 선택\r\n  const handleTodaySalesStatic = () => {\r\n    setQueryOp({\r\n      selectStatic: LANG(\"sales_statistics\"),\r\n      unit: SalesStatisticsUnit.BY_DAY_OF_WEEK\r\n    });\r\n    queryDateHook.setFrom(\r\n      moment(new Date())\r\n        .add(-1, \"day\")\r\n        .toDate()\r\n    );\r\n    queryDateHook.setTo(new Date());\r\n  };\r\n\r\n  // 이번달 매출 통계 선택\r\n  const handleThisMonthSalesStatic = () => {\r\n    setQueryOp({\r\n      selectStatic: LANG(\"sales_statistics\"),\r\n      unit: SalesStatisticsUnit.BY_DAY_OF_WEEK\r\n    });\r\n    queryDateHook.setFrom(\r\n      moment(new Date())\r\n        .startOf(\"month\")\r\n        .toDate()\r\n    );\r\n    queryDateHook.setTo(new Date());\r\n  };\r\n\r\n  const handleSetDaySalesStatic = () => {\r\n    setQueryOp({\r\n      selectStatic: LANG(\"sales_statistics\"),\r\n      unit: SalesStatisticsUnit.BY_DATE\r\n    });\r\n    queryDateHook.setFrom(\r\n      moment(new Date())\r\n        .add(-14, \"day\")\r\n        .toDate()\r\n    );\r\n    queryDateHook.setTo(new Date());\r\n  };\r\n\r\n  const handleSetMonthSalesStatic = () => {\r\n    setQueryOp({\r\n      unit: SalesStatisticsUnit.MONTHLY,\r\n      selectStatic: \"\"\r\n    });\r\n    queryDateHook.setFrom(\r\n      moment(new Date())\r\n        .add(-12, \"month\")\r\n        .toDate()\r\n    );\r\n    queryDateHook.setTo(new Date());\r\n  };\r\n\r\n  const handleSetYearSalesStatic = () => {\r\n    setQueryOp({\r\n      unit: SalesStatisticsUnit.YEARLY,\r\n      selectStatic: \"\"\r\n    });\r\n    queryDateHook.setFrom(\r\n      moment(new Date())\r\n        .add(-3, \"year\")\r\n        .toDate()\r\n    );\r\n    queryDateHook.setTo(new Date());\r\n  };\r\n\r\n  const staticsProps: IStaticsProps = {\r\n    ...staticsWrapProps,\r\n    viewMode,\r\n    setViewMode\r\n  };\r\n\r\n  return (\r\n    <div className=\"container statistic\">\r\n      <div className=\"docs-section\">\r\n        <h3>{LANG(\"statistics\")}</h3>\r\n        <div className=\"statistic__shortBtnsWrap\">\r\n          <Button\r\n            onClick={handleTodaySalesStatic}\r\n            label={LANG(\"today_sales\")}\r\n          />\r\n          <Button\r\n            onClick={handleThisMonthSalesStatic}\r\n            label={LANG(\"this_month_sales\")}\r\n          />\r\n          <Button onClick={handleSetDaySalesStatic} label={LANG(\"day_sales\")} />\r\n          <Button\r\n            onClick={handleSetMonthSalesStatic}\r\n            label={LANG(\"month_sales\")}\r\n          />\r\n          <Button\r\n            onClick={handleSetYearSalesStatic}\r\n            label={LANG(\"year_sales\")}\r\n          />\r\n        </div>\r\n        <div className=\"flex-grid\">\r\n          <div className=\"flex-grid__col col--full-6 col--wmd-12\">\r\n            <Card className=\"statistic__graphCard\" fullHeight={!isTabletDown}>\r\n              {loading ? (\r\n                <div className=\"statistic__graphPreloader\">\r\n                  <Preloader\r\n                    wrapClassName=\"\"\r\n                    position=\"center\"\r\n                    noAnimation\r\n                    size={\"large\"}\r\n                    loading={loading}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <Fragment>\r\n                  {/* 통계 아이콘랩 */}\r\n                  {!isTabletDown && (\r\n                    <StaticIcons\r\n                      context={context}\r\n                      viewMode={viewMode}\r\n                      setViewMode={setViewMode}\r\n                    />\r\n                  )}\r\n                  {/* 그래프 랩 */}\r\n                  <div\r\n                    className={\r\n                      (viewMode === \"list\" ? \"statistic__table\" : undefined) +\r\n                      \" statistic__graphWrap\"\r\n                    }\r\n                  >\r\n                    <JDgraph\r\n                      originalData={staticData}\r\n                      JDtype={viewMode}\r\n                      data={graphData}\r\n                    />\r\n                  </div>\r\n                </Fragment>\r\n              )}\r\n            </Card>\r\n          </div>\r\n          {windowWidth > WindowSize.TABLET ? (\r\n            <div className=\"flex-grid__col col--full-6 col--wmd-12\">\r\n              <Card fullHeight={!isTabletDown}>\r\n                <StaticController\r\n                  staticsProps={staticsProps}\r\n                  context={context}\r\n                />\r\n              </Card>\r\n            </div>\r\n          ) : (\r\n            <StaticsControllerModal\r\n              context={context}\r\n              staticsProps={staticsProps}\r\n              modalHook={staticControllerModalHook}\r\n            />\r\n          )}\r\n        </div>\r\n        {windowWidth > WindowSize.TABLET || (\r\n          <Button\r\n            mode=\"flat\"\r\n            onClick={() => {\r\n              staticControllerModalHook.openModal();\r\n            }}\r\n            thema=\"primary\"\r\n            label={LANG(\"change_statistics\")}\r\n            icon=\"controller\"\r\n          />\r\n        )}\r\n      </div>\r\n      <Preloader floating size={FLOATING_PRELOADER_SIZE} loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default reactWindowSize(Statistic);\r\n"]},"metadata":{},"sourceType":"module"}