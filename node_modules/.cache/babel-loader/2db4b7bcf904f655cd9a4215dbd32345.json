{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _interactjs = require('interactjs');\n\nvar _interactjs2 = _interopRequireDefault(_interactjs);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _generic = require('../utility/generic');\n\nvar _events = require('../utility/events');\n\nvar _defaultItemRenderer = require('./defaultItemRenderer');\n\nvar _calendar = require('../utility/calendar');\n\nvar _domHelpers = require('../utility/dom-helpers');\n\nvar _styles = require('./styles');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Item = function (_Component) {\n  _inherits(Item, _Component);\n\n  function Item(props) {\n    _classCallCheck(this, Item);\n\n    var _this = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.cacheDataFromProps(props);\n\n    _this.state = {\n      interactMounted: false,\n      dragging: null,\n      dragStart: null,\n      preDragPosition: null,\n      dragTime: null,\n      dragGroupDelta: null,\n      resizing: null,\n      resizeEdge: null,\n      resizeStart: null,\n      resizeTime: null\n    };\n    return _this;\n  } // removed prop type check for SPEED!\n  // they are coming from a trusted component anyway\n  // (this complicates performance debugging otherwise)\n\n\n  _createClass(Item, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var shouldUpdate = nextState.dragging !== this.state.dragging || nextState.dragTime !== this.state.dragTime || nextState.dragGroupDelta !== this.state.dragGroupDelta || nextState.resizing !== this.state.resizing || nextState.resizeTime !== this.state.resizeTime || nextProps.keys !== this.props.keys || !(0, _generic.deepObjectCompare)(nextProps.itemProps, this.props.itemProps) || nextProps.selected !== this.props.selected || nextProps.item !== this.props.item || nextProps.canvasTimeStart !== this.props.canvasTimeStart || nextProps.canvasTimeEnd !== this.props.canvasTimeEnd || nextProps.canvasWidth !== this.props.canvasWidth || (nextProps.order ? nextProps.order.index : undefined) !== (this.props.order ? this.props.order.index : undefined) || nextProps.dragSnap !== this.props.dragSnap || nextProps.minResizeWidth !== this.props.minResizeWidth || nextProps.canChangeGroup !== this.props.canChangeGroup || nextProps.canSelect !== this.props.canSelect || nextProps.canMove !== this.props.canMove || nextProps.canResizeLeft !== this.props.canResizeLeft || nextProps.canResizeRight !== this.props.canResizeRight || nextProps.dimensions !== this.props.dimensions;\n      return shouldUpdate;\n    }\n  }, {\n    key: 'cacheDataFromProps',\n    value: function cacheDataFromProps(props) {\n      this.itemId = (0, _generic._get)(props.item, props.keys.itemIdKey);\n      this.itemTitle = (0, _generic._get)(props.item, props.keys.itemTitleKey);\n      this.itemDivTitle = props.keys.itemDivTitleKey ? (0, _generic._get)(props.item, props.keys.itemDivTitleKey) : this.itemTitle;\n      this.itemTimeStart = (0, _generic._get)(props.item, props.keys.itemTimeStartKey);\n      this.itemTimeEnd = (0, _generic._get)(props.item, props.keys.itemTimeEndKey);\n    }\n  }, {\n    key: 'getTimeRatio',\n    value: function getTimeRatio() {\n      var _props = this.props,\n          canvasTimeStart = _props.canvasTimeStart,\n          canvasTimeEnd = _props.canvasTimeEnd,\n          canvasWidth = _props.canvasWidth;\n      return (0, _calendar.coordinateToTimeRatio)(canvasTimeStart, canvasTimeEnd, canvasWidth);\n    }\n  }, {\n    key: 'dragTimeSnap',\n    value: function dragTimeSnap(dragTime, considerOffset) {\n      var dragSnap = this.props.dragSnap;\n\n      if (dragSnap) {\n        var offset = considerOffset ? (0, _moment2.default)().utcOffset() * 60 * 1000 : 0;\n        return Math.round(dragTime / dragSnap) * dragSnap - offset % dragSnap;\n      } else {\n        return dragTime;\n      }\n    }\n  }, {\n    key: 'resizeTimeSnap',\n    value: function resizeTimeSnap(dragTime) {\n      var dragSnap = this.props.dragSnap;\n\n      if (dragSnap) {\n        var endTime = this.itemTimeEnd % dragSnap;\n        return Math.round((dragTime - endTime) / dragSnap) * dragSnap + endTime;\n      } else {\n        return dragTime;\n      }\n    }\n  }, {\n    key: 'dragTime',\n    value: function dragTime(e) {\n      var startTime = (0, _moment2.default)(this.itemTimeStart);\n\n      if (this.state.dragging) {\n        return this.dragTimeSnap(this.timeFor(e) + this.state.dragStart.offset, true);\n      } else {\n        return startTime;\n      }\n    }\n  }, {\n    key: 'timeFor',\n    value: function timeFor(e) {\n      var ratio = (0, _calendar.coordinateToTimeRatio)(this.props.canvasTimeStart, this.props.canvasTimeEnd, this.props.canvasWidth);\n      var offset = (0, _domHelpers.getSumOffset)(this.props.scrollRef).offsetLeft;\n      var scrolls = (0, _domHelpers.getSumScroll)(this.props.scrollRef);\n      return (e.pageX - offset + scrolls.scrollLeft) * ratio + this.props.canvasTimeStart;\n    }\n  }, {\n    key: 'dragGroupDelta',\n    value: function dragGroupDelta(e) {\n      var _props2 = this.props,\n          groupTops = _props2.groupTops,\n          order = _props2.order;\n\n      if (this.state.dragging) {\n        if (!this.props.canChangeGroup) {\n          return 0;\n        }\n\n        var groupDelta = 0;\n        var offset = (0, _domHelpers.getSumOffset)(this.props.scrollRef).offsetTop;\n        var scrolls = (0, _domHelpers.getSumScroll)(this.props.scrollRef);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Object.keys(groupTops)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var key = _step.value;\n            var groupTop = groupTops[key];\n\n            if (e.pageY - offset + scrolls.scrollTop > groupTop) {\n              groupDelta = parseInt(key, 10) - order.index;\n            } else {\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (this.props.order.index + groupDelta < 0) {\n          return 0 - this.props.order.index;\n        } else {\n          return groupDelta;\n        }\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: 'resizeTimeDelta',\n    value: function resizeTimeDelta(e, resizeEdge) {\n      var length = this.itemTimeEnd - this.itemTimeStart;\n      var timeDelta = this.dragTimeSnap((e.pageX - this.state.resizeStart) * this.getTimeRatio());\n\n      if (length + (resizeEdge === 'left' ? -timeDelta : timeDelta) < (this.props.dragSnap || 1000)) {\n        if (resizeEdge === 'left') {\n          return length - (this.props.dragSnap || 1000);\n        } else {\n          return (this.props.dragSnap || 1000) - length;\n        }\n      } else {\n        return timeDelta;\n      }\n    }\n  }, {\n    key: 'mountInteract',\n    value: function mountInteract() {\n      var _this2 = this;\n\n      var leftResize = this.props.useResizeHandle ? \".rct-item-handler-resize-left\" : true;\n      var rightResize = this.props.useResizeHandle ? \".rct-item-handler-resize-right\" : true;\n      (0, _interactjs2.default)(this.item).resizable({\n        edges: {\n          left: this.canResizeLeft() && leftResize,\n          right: this.canResizeRight() && rightResize,\n          top: false,\n          bottom: false\n        },\n        enabled: this.props.selected && (this.canResizeLeft() || this.canResizeRight())\n      }).draggable({\n        enabled: this.props.selected && this.canMove()\n      }).styleCursor(false).on('dragstart', function (e) {\n        if (_this2.props.selected) {\n          var clickTime = _this2.timeFor(e);\n\n          _this2.setState({\n            dragging: true,\n            dragStart: {\n              x: e.pageX,\n              y: e.pageY,\n              offset: _this2.itemTimeStart - clickTime\n            },\n            preDragPosition: {\n              x: e.target.offsetLeft,\n              y: e.target.offsetTop\n            },\n            dragTime: _this2.itemTimeStart,\n            dragGroupDelta: 0\n          });\n        } else {\n          return false;\n        }\n      }).on('dragmove', function (e) {\n        if (_this2.state.dragging) {\n          var dragTime = _this2.dragTime(e);\n\n          var dragGroupDelta = _this2.dragGroupDelta(e);\n\n          if (_this2.props.moveResizeValidator) {\n            dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);\n          }\n\n          if (_this2.props.onDrag) {\n            _this2.props.onDrag(_this2.itemId, dragTime, _this2.props.order.index + dragGroupDelta);\n          }\n\n          _this2.setState({\n            dragTime: dragTime,\n            dragGroupDelta: dragGroupDelta\n          });\n        }\n      }).on('dragend', function (e) {\n        if (_this2.state.dragging) {\n          if (_this2.props.onDrop) {\n            var dragTime = _this2.dragTime(e);\n\n            if (_this2.props.moveResizeValidator) {\n              dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);\n            }\n\n            _this2.props.onDrop(_this2.itemId, dragTime, _this2.props.order.index + _this2.dragGroupDelta(e));\n          }\n\n          _this2.setState({\n            dragging: false,\n            dragStart: null,\n            preDragPosition: null,\n            dragTime: null,\n            dragGroupDelta: null\n          });\n        }\n      }).on('resizestart', function (e) {\n        if (_this2.props.selected) {\n          _this2.setState({\n            resizing: true,\n            resizeEdge: null,\n            // we don't know yet\n            resizeStart: e.pageX,\n            resizeTime: 0\n          });\n        } else {\n          return false;\n        }\n      }).on('resizemove', function (e) {\n        if (_this2.state.resizing) {\n          var resizeEdge = _this2.state.resizeEdge;\n\n          if (!resizeEdge) {\n            resizeEdge = e.deltaRect.left !== 0 ? 'left' : 'right';\n\n            _this2.setState({\n              resizeEdge: resizeEdge\n            });\n          }\n\n          var resizeTime = _this2.resizeTimeSnap(_this2.timeFor(e));\n\n          if (_this2.props.moveResizeValidator) {\n            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);\n          }\n\n          if (_this2.props.onResizing) {\n            _this2.props.onResizing(_this2.itemId, resizeTime, resizeEdge);\n          }\n\n          _this2.setState({\n            resizeTime: resizeTime\n          });\n        }\n      }).on('resizeend', function (e) {\n        if (_this2.state.resizing) {\n          var resizeEdge = _this2.state.resizeEdge;\n\n          var resizeTime = _this2.resizeTimeSnap(_this2.timeFor(e));\n\n          if (_this2.props.moveResizeValidator) {\n            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);\n          }\n\n          if (_this2.props.onResized) {\n            _this2.props.onResized(_this2.itemId, resizeTime, resizeEdge, _this2.resizeTimeDelta(e, resizeEdge));\n          }\n\n          _this2.setState({\n            resizing: null,\n            resizeStart: null,\n            resizeEdge: null,\n            resizeTime: null\n          });\n        }\n      }).on('tap', function (e) {\n        _this2.actualClick(e, e.pointerType === 'mouse' ? 'click' : 'touch');\n      });\n      this.setState({\n        interactMounted: true\n      });\n    }\n  }, {\n    key: 'canResizeLeft',\n    value: function canResizeLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if (!props.canResizeLeft) {\n        return false;\n      }\n\n      var width = parseInt(props.dimensions.width, 10);\n      return width >= props.minResizeWidth;\n    }\n  }, {\n    key: 'canResizeRight',\n    value: function canResizeRight() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if (!props.canResizeRight) {\n        return false;\n      }\n\n      var width = parseInt(props.dimensions.width, 10);\n      return width >= props.minResizeWidth;\n    }\n  }, {\n    key: 'canMove',\n    value: function canMove() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      return !!props.canMove;\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      this.cacheDataFromProps(this.props);\n      var interactMounted = this.state.interactMounted;\n      var couldDrag = prevProps.selected && this.canMove(prevProps);\n      var couldResizeLeft = prevProps.selected && this.canResizeLeft(prevProps);\n      var couldResizeRight = prevProps.selected && this.canResizeRight(prevProps);\n      var willBeAbleToDrag = this.props.selected && this.canMove(this.props);\n      var willBeAbleToResizeLeft = this.props.selected && this.canResizeLeft(this.props);\n      var willBeAbleToResizeRight = this.props.selected && this.canResizeRight(this.props);\n\n      if (this.props.selected && !interactMounted) {\n        this.mountInteract();\n        interactMounted = true;\n      }\n\n      if (interactMounted && (couldResizeLeft !== willBeAbleToResizeLeft || couldResizeRight !== willBeAbleToResizeRight)) {\n        var leftResize = this.props.useResizeHandle ? this.dragLeft : true;\n        var rightResize = this.props.useResizeHandle ? this.dragRight : true;\n        (0, _interactjs2.default)(this.item).resizable({\n          enabled: willBeAbleToResizeLeft || willBeAbleToResizeRight,\n          edges: {\n            top: false,\n            bottom: false,\n            left: willBeAbleToResizeLeft && leftResize,\n            right: willBeAbleToResizeRight && rightResize\n          }\n        });\n      }\n\n      if (interactMounted && couldDrag !== willBeAbleToDrag) {\n        (0, _interactjs2.default)(this.item).draggable({\n          enabled: willBeAbleToDrag\n        });\n      }\n    }\n  }, {\n    key: 'actualClick',\n    value: function actualClick(e, clickType) {\n      if (this.props.canSelect && this.props.onSelect) {\n        this.props.onSelect(this.itemId, clickType, e);\n      }\n    }\n  }, {\n    key: 'getItemStyle',\n    value: function getItemStyle(props) {\n      var dimensions = this.props.dimensions;\n      var baseStyles = {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        left: dimensions.left + 'px',\n        top: dimensions.top + 'px',\n        width: dimensions.width + 'px',\n        height: dimensions.height + 'px',\n        lineHeight: dimensions.height + 'px'\n      };\n      var finalStyle = Object.assign({}, _styles.overridableStyles, this.props.selected ? _styles.selectedStyle : {}, this.props.selected & this.canMove(this.props) ? _styles.selectedAndCanMove : {}, this.props.selected & this.canResizeLeft(this.props) ? _styles.selectedAndCanResizeLeft : {}, this.props.selected & this.canResizeLeft(this.props) & this.state.dragging ? _styles.selectedAndCanResizeLeftAndDragLeft : {}, this.props.selected & this.canResizeRight(this.props) ? _styles.selectedAndCanResizeRight : {}, this.props.selected & this.canResizeRight(this.props) & this.state.dragging ? _styles.selectedAndCanResizeRightAndDragRight : {}, props.style, baseStyles);\n      return finalStyle;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (typeof this.props.order === 'undefined' || this.props.order === null) {\n        return null;\n      }\n\n      var timelineContext = this.context.getTimelineContext();\n      var itemContext = {\n        dimensions: this.props.dimensions,\n        useResizeHandle: this.props.useResizeHandle,\n        title: this.itemTitle,\n        canMove: this.canMove(this.props),\n        canResizeLeft: this.canResizeLeft(this.props),\n        canResizeRight: this.canResizeRight(this.props),\n        selected: this.props.selected,\n        dragging: this.state.dragging,\n        dragStart: this.state.dragStart,\n        dragTime: this.state.dragTime,\n        dragGroupDelta: this.state.dragGroupDelta,\n        resizing: this.state.resizing,\n        resizeEdge: this.state.resizeEdge,\n        resizeStart: this.state.resizeStart,\n        resizeTime: this.state.resizeTime,\n        width: this.props.dimensions.width\n      };\n      return this.props.itemRenderer({\n        item: this.props.item,\n        timelineContext: timelineContext,\n        itemContext: itemContext,\n        getItemProps: this.getItemProps,\n        getResizeProps: this.getResizeProps\n      });\n    }\n  }]);\n\n  return Item;\n}(_react.Component);\n\nItem.propTypes = {\n  canvasTimeStart: _propTypes2.default.number.isRequired,\n  canvasTimeEnd: _propTypes2.default.number.isRequired,\n  canvasWidth: _propTypes2.default.number.isRequired,\n  order: _propTypes2.default.object,\n  dragSnap: _propTypes2.default.number,\n  minResizeWidth: _propTypes2.default.number,\n  selected: _propTypes2.default.bool,\n  canChangeGroup: _propTypes2.default.bool.isRequired,\n  canMove: _propTypes2.default.bool.isRequired,\n  canResizeLeft: _propTypes2.default.bool.isRequired,\n  canResizeRight: _propTypes2.default.bool.isRequired,\n  keys: _propTypes2.default.object.isRequired,\n  item: _propTypes2.default.object.isRequired,\n  onSelect: _propTypes2.default.func,\n  onDrag: _propTypes2.default.func,\n  onDrop: _propTypes2.default.func,\n  onResizing: _propTypes2.default.func,\n  onResized: _propTypes2.default.func,\n  onContextMenu: _propTypes2.default.func,\n  itemRenderer: _propTypes2.default.func,\n  itemProps: _propTypes2.default.object,\n  canSelect: _propTypes2.default.bool,\n  dimensions: _propTypes2.default.object,\n  groupTops: _propTypes2.default.array,\n  useResizeHandle: _propTypes2.default.bool,\n  moveResizeValidator: _propTypes2.default.func,\n  onItemDoubleClick: _propTypes2.default.func,\n  scrollRef: _propTypes2.default.object\n};\nItem.defaultProps = {\n  selected: false,\n  itemRenderer: _defaultItemRenderer.defaultItemRenderer\n};\nItem.contextTypes = {\n  getTimelineContext: _propTypes2.default.func\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.onMouseDown = function (e) {\n    if (!_this3.state.interactMounted) {\n      e.preventDefault();\n      _this3.startedClicking = true;\n    }\n  };\n\n  this.onMouseUp = function (e) {\n    if (!_this3.state.interactMounted && _this3.startedClicking) {\n      _this3.startedClicking = false;\n\n      _this3.actualClick(e, 'click');\n    }\n  };\n\n  this.onTouchStart = function (e) {\n    if (!_this3.state.interactMounted) {\n      e.preventDefault();\n      _this3.startedTouching = true;\n    }\n  };\n\n  this.onTouchEnd = function (e) {\n    if (!_this3.state.interactMounted && _this3.startedTouching) {\n      _this3.startedTouching = false;\n\n      _this3.actualClick(e, 'touch');\n    }\n  };\n\n  this.handleDoubleClick = function (e) {\n    e.stopPropagation();\n\n    if (_this3.props.onItemDoubleClick) {\n      _this3.props.onItemDoubleClick(_this3.itemId, e);\n    }\n  };\n\n  this.handleContextMenu = function (e) {\n    if (_this3.props.onContextMenu) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this3.props.onContextMenu(_this3.itemId, e);\n    }\n  };\n\n  this.getItemRef = function (el) {\n    return _this3.item = el;\n  };\n\n  this.getDragLeftRef = function (el) {\n    return _this3.dragLeft = el;\n  };\n\n  this.getDragRightRef = function (el) {\n    return _this3.dragRight = el;\n  };\n\n  this.getItemProps = function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; //TODO: maybe shouldnt include all of these classes\n\n    var classNames = 'rct-item' + (_this3.props.item.className ? ' ' + _this3.props.item.className : '');\n    return {\n      key: _this3.itemId,\n      ref: _this3.getItemRef,\n      title: _this3.itemDivTitle,\n      className: classNames + (' ' + (props.className ? props.className : '')),\n      onMouseDown: (0, _events.composeEvents)(_this3.onMouseDown, props.onMouseDown),\n      onMouseUp: (0, _events.composeEvents)(_this3.onMouseUp, props.onMouseUp),\n      onTouchStart: (0, _events.composeEvents)(_this3.onTouchStart, props.onTouchStart),\n      onTouchEnd: (0, _events.composeEvents)(_this3.onTouchEnd, props.onTouchEnd),\n      onDoubleClick: (0, _events.composeEvents)(_this3.handleDoubleClick, props.onDoubleClick),\n      onContextMenu: (0, _events.composeEvents)(_this3.handleContextMenu, props.onContextMenu),\n      style: Object.assign({}, _this3.getItemStyle(props))\n    };\n  };\n\n  this.getResizeProps = function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var leftName = \"rct-item-handler rct-item-handler-left rct-item-handler-resize-left\";\n\n    if (props.leftClassName) {\n      leftName += ' ' + props.leftClassName;\n    }\n\n    var rightName = \"rct-item-handler rct-item-handler-right rct-item-handler-resize-right\";\n\n    if (props.rightClassName) {\n      rightName += ' ' + props.rightClassName;\n    }\n\n    return {\n      left: {\n        ref: _this3.getDragLeftRef,\n        className: leftName,\n        style: Object.assign({}, _styles.leftResizeStyle, props.leftStyle)\n      },\n      right: {\n        ref: _this3.getDragRightRef,\n        className: rightName,\n        style: Object.assign({}, _styles.rightResizeStyle, props.rightStyle)\n      }\n    };\n  };\n};\n\nexports.default = Item;","map":null,"metadata":{},"sourceType":"script"}