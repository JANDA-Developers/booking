{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.minCellWidth = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.coordinateToTimeRatio = coordinateToTimeRatio;\nexports.calculateXPositionForTime = calculateXPositionForTime;\nexports.calculateTimeForXPosition = calculateTimeForXPosition;\nexports.iterateTimes = iterateTimes;\nexports.getMinUnit = getMinUnit;\nexports.getNextUnit = getNextUnit;\nexports.calculateInteractionNewTimes = calculateInteractionNewTimes;\nexports.calculateDimensions = calculateDimensions;\nexports.getGroupOrders = getGroupOrders;\nexports.getGroupedItems = getGroupedItems;\nexports.getVisibleItems = getVisibleItems;\nexports.collision = collision;\nexports.groupStack = groupStack;\nexports.groupNoStack = groupNoStack;\nexports.stackAll = stackAll;\nexports.stackGroup = stackGroup;\nexports.stackTimelineItems = stackTimelineItems;\nexports.getCanvasWidth = getCanvasWidth;\nexports.getItemDimensions = getItemDimensions;\nexports.getItemWithInteractions = getItemWithInteractions;\nexports.getCanvasBoundariesFromVisibleTime = getCanvasBoundariesFromVisibleTime;\nexports.calculateScrollCanvas = calculateScrollCanvas;\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _generic = require('./generic');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Calculate the ms / pixel ratio of the timeline state\n * @param {number} canvasTimeStart\n * @param {number} canvasTimeEnd\n * @param {number} canvasWidth\n * @returns {number}\n */\n\n\nfunction coordinateToTimeRatio(canvasTimeStart, canvasTimeEnd, canvasWidth) {\n  return (canvasTimeEnd - canvasTimeStart) / canvasWidth;\n}\n/**\n * For a given time, calculate the pixel position given timeline state\n * (timeline width in px, canvas time range)\n * @param {number} canvasTimeStart\n * @param {number} canvasTimeEnd\n * @param {number} canvasWidth\n * @param {number} time\n * @returns {number}\n */\n\n\nfunction calculateXPositionForTime(canvasTimeStart, canvasTimeEnd, canvasWidth, time) {\n  var widthToZoomRatio = canvasWidth / (canvasTimeEnd - canvasTimeStart);\n  var timeOffset = time - canvasTimeStart;\n  return timeOffset * widthToZoomRatio;\n}\n/**\n * For a given x position (leftOffset) in pixels, calculate time based on\n * timeline state (timeline width in px, canvas time range)\n * @param {number} canvasTimeStart\n * @param {number} canvasTimeEnd\n * @param {number} canvasWidth\n * @param {number} leftOffset\n * @returns {number}\n */\n\n\nfunction calculateTimeForXPosition(canvasTimeStart, canvasTimeEnd, canvasWidth, leftOffset) {\n  var timeToPxRatio = (canvasTimeEnd - canvasTimeStart) / canvasWidth;\n  var timeFromCanvasTimeStart = timeToPxRatio * leftOffset;\n  return timeFromCanvasTimeStart + canvasTimeStart;\n}\n\nfunction iterateTimes(start, end, unit, timeSteps, callback) {\n  var time = (0, _moment2.default)(start).startOf(unit);\n\n  if (timeSteps[unit] && timeSteps[unit] > 1) {\n    var value = time.get(unit);\n    time.set(unit, value - value % timeSteps[unit]);\n  }\n\n  while (time.valueOf() < end) {\n    var nextTime = (0, _moment2.default)(time).add(timeSteps[unit] || 1, unit + 's');\n    callback(time, nextTime);\n    time = nextTime;\n  }\n} // this function is VERY HOT as its used in Timeline.js render function\n// TODO: check if there are performance implications here\n// when \"weeks\" feature is implemented, this function will be modified heavily\n\n/** determine the current rendered time unit based on timeline time span\n *\n * zoom: (in milliseconds) difference between time start and time end of timeline canvas\n * width: (in pixels) pixel width of timeline canvas\n * timeSteps: map of timeDividers with number to indicate step of each divider\n */\n// the smallest cell we want to render is 17px\n// this can be manipulated to make the breakpoints change more/less\n// i.e. on zoom how often do we switch to the next unit of time\n// i think this is the distance between cell lines\n\n\nvar minCellWidth = exports.minCellWidth = 17;\n\nfunction getMinUnit(zoom, width, timeSteps) {\n  // for supporting weeks, its important to remember that each of these\n  // units has a natural progression to the other. i.e. a year is 12 months\n  // a month is 24 days, a day is 24 hours.\n  // with weeks this isnt the case so weeks needs to be handled specially\n  var timeDividers = {\n    second: 1000,\n    minute: 60,\n    hour: 60,\n    day: 24,\n    month: 30,\n    year: 12\n  };\n  var minUnit = 'year'; // this timespan is in ms initially\n\n  var nextTimeSpanInUnitContext = zoom;\n  Object.keys(timeDividers).some(function (unit) {\n    // converts previous time span to current unit\n    // (e.g. milliseconds to seconds, seconds to minutes, etc)\n    nextTimeSpanInUnitContext = nextTimeSpanInUnitContext / timeDividers[unit]; // timeSteps is \"\n    // With what step to display different units. E.g. 15 for minute means only minutes 0, 15, 30 and 45 will be shown.\"\n    // how many cells would be rendered given this time span, for this unit?\n    // e.g. for time span of 60 minutes, and time step of 1, we would render 60 cells\n\n    var cellsToBeRenderedForCurrentUnit = nextTimeSpanInUnitContext / timeSteps[unit]; // what is happening here? why 3 if time steps are greater than 1??\n\n    var cellWidthToUse = timeSteps[unit] && timeSteps[unit] > 1 ? 3 * minCellWidth : minCellWidth; // for the minWidth of a cell, how many cells would be rendered given\n    // the current pixel width\n    // i.e. f\n\n    var minimumCellsToRenderUnit = width / cellWidthToUse;\n\n    if (cellsToBeRenderedForCurrentUnit < minimumCellsToRenderUnit) {\n      // for the current zoom, the number of cells we'd need to render all parts of this unit\n      // is less than the minimum number of cells needed at minimum cell width\n      minUnit = unit;\n      return true;\n    }\n  });\n  return minUnit;\n}\n\nfunction getNextUnit(unit) {\n  var nextUnits = {\n    second: 'minute',\n    minute: 'hour',\n    hour: 'day',\n    day: 'month',\n    month: 'year',\n    year: 'year'\n  };\n\n  if (!nextUnits[unit]) {\n    throw new Error('unit ' + unit + ' in not acceptable');\n  }\n\n  return nextUnits[unit];\n}\n/**\n * get the new start and new end time of item that is being\n * dragged or resized\n * @param {*} itemTimeStart original item time in milliseconds\n * @param {*} itemTimeEnd original item time in milliseconds\n * @param {*} dragTime new start time if item is dragged in milliseconds\n * @param {*} isDragging is item being dragged\n * @param {*} isResizing is item being resized\n * @param {`right` or `left`} resizingEdge resize edge\n * @param {*} resizeTime new resize time in milliseconds\n */\n\n\nfunction calculateInteractionNewTimes(_ref) {\n  var itemTimeStart = _ref.itemTimeStart,\n      itemTimeEnd = _ref.itemTimeEnd,\n      dragTime = _ref.dragTime,\n      isDragging = _ref.isDragging,\n      isResizing = _ref.isResizing,\n      resizingEdge = _ref.resizingEdge,\n      resizeTime = _ref.resizeTime;\n  var originalItemRange = itemTimeEnd - itemTimeStart;\n  var itemStart = isResizing && resizingEdge === 'left' ? resizeTime : itemTimeStart;\n  var itemEnd = isResizing && resizingEdge === 'right' ? resizeTime : itemTimeEnd;\n  return [isDragging ? dragTime : itemStart, isDragging ? dragTime + originalItemRange : itemEnd];\n}\n\nfunction calculateDimensions(_ref2) {\n  var itemTimeStart = _ref2.itemTimeStart,\n      itemTimeEnd = _ref2.itemTimeEnd,\n      canvasTimeStart = _ref2.canvasTimeStart,\n      canvasTimeEnd = _ref2.canvasTimeEnd,\n      canvasWidth = _ref2.canvasWidth;\n  var itemTimeRange = itemTimeEnd - itemTimeStart; // restrict startTime and endTime to be bounded by canvasTimeStart and canvasTimeEnd\n\n  var effectiveStartTime = Math.max(itemTimeStart, canvasTimeStart);\n  var effectiveEndTime = Math.min(itemTimeEnd, canvasTimeEnd);\n  var left = calculateXPositionForTime(canvasTimeStart, canvasTimeEnd, canvasWidth, effectiveStartTime);\n  var right = calculateXPositionForTime(canvasTimeStart, canvasTimeEnd, canvasWidth, effectiveEndTime);\n  var itemWidth = right - left;\n  var dimensions = {\n    left: left,\n    width: Math.max(itemWidth, 3),\n    collisionLeft: itemTimeStart,\n    collisionWidth: itemTimeRange\n  };\n  return dimensions;\n}\n/**\n * Get the order of groups based on their keys\n * @param {*} groups array of groups\n * @param {*} keys the keys object\n * @returns Ordered hash of objects with their array index and group\n */\n\n\nfunction getGroupOrders(groups, keys) {\n  var groupIdKey = keys.groupIdKey;\n  var groupOrders = {};\n\n  for (var i = 0; i < groups.length; i++) {\n    groupOrders[(0, _generic._get)(groups[i], groupIdKey)] = {\n      index: i,\n      group: groups[i]\n    };\n  }\n\n  return groupOrders;\n}\n/**\n * Adds items relevant to each group to the result of getGroupOrders\n * @param {*} items list of all items\n * @param {*} groupOrders the result of getGroupOrders\n */\n\n\nfunction getGroupedItems(items, groupOrders) {\n  var groupedItems = {};\n  var keys = Object.keys(groupOrders); // Initialize with result object for each group\n\n  for (var i = 0; i < keys.length; i++) {\n    var groupOrder = groupOrders[keys[i]];\n    groupedItems[i] = {\n      index: groupOrder.index,\n      group: groupOrder.group,\n      items: []\n    };\n  } // Populate groups\n\n\n  for (var _i = 0; _i < items.length; _i++) {\n    if (items[_i].dimensions.order !== undefined) {\n      var groupItem = groupedItems[items[_i].dimensions.order.index];\n\n      if (groupItem) {\n        groupItem.items.push(items[_i]);\n      }\n    }\n  }\n\n  return groupedItems;\n}\n\nfunction getVisibleItems(items, canvasTimeStart, canvasTimeEnd, keys) {\n  var itemTimeStartKey = keys.itemTimeStartKey,\n      itemTimeEndKey = keys.itemTimeEndKey;\n  return items.filter(function (item) {\n    return (0, _generic._get)(item, itemTimeStartKey) <= canvasTimeEnd && (0, _generic._get)(item, itemTimeEndKey) >= canvasTimeStart;\n  });\n}\n\nvar EPSILON = 0.001;\n\nfunction collision(a, b, lineHeight) {\n  var collisionPadding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : EPSILON; // 2d collisions detection - https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection\n\n  var verticalMargin = 0;\n  return a.collisionLeft + collisionPadding < b.collisionLeft + b.collisionWidth && a.collisionLeft + a.collisionWidth - collisionPadding > b.collisionLeft && a.top - verticalMargin + collisionPadding < b.top + b.height && a.top + a.height + verticalMargin - collisionPadding > b.top;\n}\n/**\n * Calculate the position of a given item for a group that\n * is being stacked\n */\n\n\nfunction groupStack(lineHeight, item, group, groupHeight, groupTop, itemIndex) {\n  // calculate non-overlapping positions\n  var curHeight = groupHeight;\n  var verticalMargin = (lineHeight - item.dimensions.height) / 2;\n\n  if (item.dimensions.stack && item.dimensions.top === null) {\n    item.dimensions.top = groupTop + verticalMargin;\n    curHeight = Math.max(curHeight, lineHeight);\n\n    do {\n      var collidingItem = null; //Items are placed from i=0 onwards, only check items with index < i\n\n      for (var j = itemIndex - 1, jj = 0; j >= jj; j--) {\n        var other = group[j];\n\n        if (other.dimensions.top !== null && other.dimensions.stack && collision(item.dimensions, other.dimensions, lineHeight)) {\n          collidingItem = other;\n          break;\n        } else {// console.log('dont test', other.top !== null, other !== item, other.stack);\n        }\n      }\n\n      if (collidingItem != null) {\n        // There is a collision. Reposition the items above the colliding element\n        item.dimensions.top = collidingItem.dimensions.top + lineHeight;\n        curHeight = Math.max(curHeight, item.dimensions.top + item.dimensions.height + verticalMargin - groupTop);\n      }\n    } while (collidingItem);\n  }\n\n  return {\n    groupHeight: curHeight,\n    verticalMargin: verticalMargin,\n    itemTop: item.dimensions.top\n  };\n} // Calculate the position of this item for a group that is not being stacked\n\n\nfunction groupNoStack(lineHeight, item, groupHeight, groupTop) {\n  var verticalMargin = (lineHeight - item.dimensions.height) / 2;\n\n  if (item.dimensions.top === null) {\n    item.dimensions.top = groupTop + verticalMargin;\n    groupHeight = Math.max(groupHeight, lineHeight);\n  }\n\n  return {\n    groupHeight: groupHeight,\n    verticalMargin: 0,\n    itemTop: item.dimensions.top\n  };\n}\n\nfunction sum() {\n  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return arr.reduce(function (acc, i) {\n    return acc + i;\n  }, 0);\n}\n/**\n * Stack all groups\n * @param {*} items items to be stacked\n * @param {*} groupOrders the groupOrders object\n * @param {*} lineHeight\n * @param {*} stackItems should items be stacked?\n */\n\n\nfunction stackAll(itemsDimensions, groupOrders, lineHeight, stackItems) {\n  var groupHeights = [];\n  var groupTops = [];\n  var groupedItems = getGroupedItems(itemsDimensions, groupOrders);\n\n  for (var index in groupedItems) {\n    var groupItems = groupedItems[index];\n    var _itemsDimensions = groupItems.items,\n        group = groupItems.group;\n    var groupTop = sum(groupHeights); // Is group being stacked?\n\n    var isGroupStacked = group.stackItems !== undefined ? group.stackItems : stackItems;\n\n    var _stackGroup = stackGroup(_itemsDimensions, isGroupStacked, lineHeight, groupTop),\n        groupHeight = _stackGroup.groupHeight,\n        verticalMargin = _stackGroup.verticalMargin; // If group height is overridden, push new height\n    // Do this late as item position still needs to be calculated\n\n\n    groupTops.push(groupTop);\n\n    if (group.height) {\n      groupHeights.push(group.height);\n    } else {\n      groupHeights.push(Math.max(groupHeight, lineHeight));\n    }\n  }\n\n  return {\n    height: sum(groupHeights),\n    groupHeights: groupHeights,\n    groupTops: groupTops\n  };\n}\n/**\n * \n * @param {*} itemsDimensions \n * @param {*} isGroupStacked \n * @param {*} lineHeight \n * @param {*} groupTop \n */\n\n\nfunction stackGroup(itemsDimensions, isGroupStacked, lineHeight, groupTop) {\n  var groupHeight = 0;\n  var verticalMargin = 0; // Find positions for each item in group\n\n  for (var itemIndex = 0; itemIndex < itemsDimensions.length; itemIndex++) {\n    var r = {};\n\n    if (isGroupStacked) {\n      r = groupStack(lineHeight, itemsDimensions[itemIndex], itemsDimensions, groupHeight, groupTop, itemIndex);\n    } else {\n      r = groupNoStack(lineHeight, itemsDimensions[itemIndex], groupHeight, groupTop);\n    }\n\n    groupHeight = r.groupHeight;\n    verticalMargin = r.verticalMargin;\n  }\n\n  return {\n    groupHeight: groupHeight,\n    verticalMargin: verticalMargin\n  };\n}\n/**\n * Stack the items that will be visible\n * within the canvas area\n * @param {item[]} items\n * @param {group[]} groups\n * @param {number} canvasWidth\n * @param {number} canvasTimeStart\n * @param {number} canvasTimeEnd\n * @param {*} keys\n * @param {number} lineHeight\n * @param {number} itemHeightRatio\n * @param {boolean} stackItems\n * @param {*} draggingItem\n * @param {*} resizingItem\n * @param {number} dragTime\n * @param {left or right} resizingEdge\n * @param {number} resizeTime\n * @param {number} newGroupOrder\n */\n\n\nfunction stackTimelineItems(items, groups, canvasWidth, canvasTimeStart, canvasTimeEnd, keys, lineHeight, itemHeightRatio, stackItems, draggingItem, resizingItem, dragTime, resizingEdge, resizeTime, newGroupOrder) {\n  var visibleItems = getVisibleItems(items, canvasTimeStart, canvasTimeEnd, keys);\n  var visibleItemsWithInteraction = visibleItems.map(function (item) {\n    return getItemWithInteractions({\n      item: item,\n      keys: keys,\n      draggingItem: draggingItem,\n      resizingItem: resizingItem,\n      dragTime: dragTime,\n      resizingEdge: resizingEdge,\n      resizeTime: resizeTime,\n      groups: groups,\n      newGroupOrder: newGroupOrder\n    });\n  }); // if there are no groups return an empty array of dimensions\n\n  if (groups.length === 0) {\n    return {\n      dimensionItems: [],\n      height: 0,\n      groupHeights: [],\n      groupTops: []\n    };\n  } // Get the order of groups based on their id key\n\n\n  var groupOrders = getGroupOrders(groups, keys);\n  var dimensionItems = visibleItemsWithInteraction.map(function (item) {\n    return getItemDimensions({\n      item: item,\n      keys: keys,\n      canvasTimeStart: canvasTimeStart,\n      canvasTimeEnd: canvasTimeEnd,\n      canvasWidth: canvasWidth,\n      groupOrders: groupOrders,\n      lineHeight: lineHeight,\n      itemHeightRatio: itemHeightRatio\n    });\n  }).filter(function (item) {\n    return !!item;\n  }); // Get a new array of groupOrders holding the stacked items\n\n  var _stackAll = stackAll(dimensionItems, groupOrders, lineHeight, stackItems),\n      height = _stackAll.height,\n      groupHeights = _stackAll.groupHeights,\n      groupTops = _stackAll.groupTops;\n\n  return {\n    dimensionItems: dimensionItems,\n    height: height,\n    groupHeights: groupHeights,\n    groupTops: groupTops\n  };\n}\n/**\n * get canvas width from visible width\n * @param {*} width\n * @param {*} buffer\n */\n\n\nfunction getCanvasWidth(width) {\n  var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  return width * buffer;\n}\n/**\n * get item's position, dimensions and collisions\n * @param {*} item\n * @param {*} keys\n * @param {*} canvasTimeStart\n * @param {*} canvasTimeEnd\n * @param {*} canvasWidth\n * @param {*} groupOrders\n * @param {*} lineHeight\n * @param {*} itemHeightRatio\n */\n\n\nfunction getItemDimensions(_ref3) {\n  var item = _ref3.item,\n      keys = _ref3.keys,\n      canvasTimeStart = _ref3.canvasTimeStart,\n      canvasTimeEnd = _ref3.canvasTimeEnd,\n      canvasWidth = _ref3.canvasWidth,\n      groupOrders = _ref3.groupOrders,\n      lineHeight = _ref3.lineHeight,\n      itemHeightRatio = _ref3.itemHeightRatio;\n  var itemId = (0, _generic._get)(item, keys.itemIdKey);\n  var dimension = calculateDimensions({\n    itemTimeStart: (0, _generic._get)(item, keys.itemTimeStartKey),\n    itemTimeEnd: (0, _generic._get)(item, keys.itemTimeEndKey),\n    canvasTimeStart: canvasTimeStart,\n    canvasTimeEnd: canvasTimeEnd,\n    canvasWidth: canvasWidth\n  });\n\n  if (dimension) {\n    dimension.top = null;\n    dimension.order = groupOrders[(0, _generic._get)(item, keys.itemGroupKey)];\n    dimension.stack = !item.isOverlay;\n    dimension.height = lineHeight * itemHeightRatio;\n    return {\n      id: itemId,\n      dimensions: dimension\n    };\n  }\n}\n/**\n * get new item with changed  `itemTimeStart` , `itemTimeEnd` and `itemGroupKey` according to user interaction\n * user interaction is dragging an item and resize left and right\n * @param {*} item\n * @param {*} keys\n * @param {*} draggingItem\n * @param {*} resizingItem\n * @param {*} dragTime\n * @param {*} resizingEdge\n * @param {*} resizeTime\n * @param {*} groups\n * @param {*} newGroupOrder\n */\n\n\nfunction getItemWithInteractions(_ref4) {\n  var _extends2;\n\n  var item = _ref4.item,\n      keys = _ref4.keys,\n      draggingItem = _ref4.draggingItem,\n      resizingItem = _ref4.resizingItem,\n      dragTime = _ref4.dragTime,\n      resizingEdge = _ref4.resizingEdge,\n      resizeTime = _ref4.resizeTime,\n      groups = _ref4.groups,\n      newGroupOrder = _ref4.newGroupOrder;\n  if (!resizingItem && !draggingItem) return item;\n  var itemId = (0, _generic._get)(item, keys.itemIdKey);\n  var isDragging = itemId === draggingItem;\n  var isResizing = itemId === resizingItem;\n\n  var _calculateInteraction = calculateInteractionNewTimes({\n    itemTimeStart: (0, _generic._get)(item, keys.itemTimeStartKey),\n    itemTimeEnd: (0, _generic._get)(item, keys.itemTimeEndKey),\n    isDragging: isDragging,\n    isResizing: isResizing,\n    dragTime: dragTime,\n    resizingEdge: resizingEdge,\n    resizeTime: resizeTime\n  }),\n      _calculateInteraction2 = _slicedToArray(_calculateInteraction, 2),\n      itemTimeStart = _calculateInteraction2[0],\n      itemTimeEnd = _calculateInteraction2[1];\n\n  var newItem = _extends({}, item, (_extends2 = {}, _defineProperty(_extends2, keys.itemTimeStartKey, itemTimeStart), _defineProperty(_extends2, keys.itemTimeEndKey, itemTimeEnd), _defineProperty(_extends2, keys.itemGroupKey, isDragging ? (0, _generic._get)(groups[newGroupOrder], keys.groupIdKey) : (0, _generic._get)(item, keys.itemGroupKey)), _extends2));\n\n  return newItem;\n}\n/**\n * get canvas start and end time from visible start and end time\n * @param {number} visibleTimeStart\n * @param {number} visibleTimeEnd\n */\n\n\nfunction getCanvasBoundariesFromVisibleTime(visibleTimeStart, visibleTimeEnd) {\n  var zoom = visibleTimeEnd - visibleTimeStart;\n  var canvasTimeStart = visibleTimeStart - (visibleTimeEnd - visibleTimeStart);\n  var canvasTimeEnd = canvasTimeStart + zoom * 3;\n  return [canvasTimeStart, canvasTimeEnd];\n}\n/**\n * Get the the canvas area for a given visible time\n * Will shift the start/end of the canvas if the visible time\n * does not fit within the existing\n * @param {number} visibleTimeStart\n * @param {number} visibleTimeEnd\n * @param {boolean} forceUpdateDimensions\n * @param {*} items\n * @param {*} groups\n * @param {*} props\n * @param {*} state\n */\n\n\nfunction calculateScrollCanvas(visibleTimeStart, visibleTimeEnd, forceUpdateDimensions, items, groups, props, state) {\n  var oldCanvasTimeStart = state.canvasTimeStart;\n  var oldZoom = state.visibleTimeEnd - state.visibleTimeStart;\n  var newZoom = visibleTimeEnd - visibleTimeStart;\n  var newState = {\n    visibleTimeStart: visibleTimeStart,\n    visibleTimeEnd: visibleTimeEnd // Check if the current canvas covers the new times\n\n  };\n  var canKeepCanvas = newZoom === oldZoom && visibleTimeStart >= oldCanvasTimeStart + oldZoom * 0.5 && visibleTimeStart <= oldCanvasTimeStart + oldZoom * 1.5 && visibleTimeEnd >= oldCanvasTimeStart + oldZoom * 1.5 && visibleTimeEnd <= oldCanvasTimeStart + oldZoom * 2.5;\n\n  if (!canKeepCanvas || forceUpdateDimensions) {\n    var _getCanvasBoundariesF = getCanvasBoundariesFromVisibleTime(visibleTimeStart, visibleTimeEnd),\n        _getCanvasBoundariesF2 = _slicedToArray(_getCanvasBoundariesF, 2),\n        canvasTimeStart = _getCanvasBoundariesF2[0],\n        canvasTimeEnd = _getCanvasBoundariesF2[1];\n\n    newState.canvasTimeStart = canvasTimeStart;\n    newState.canvasTimeEnd = canvasTimeEnd;\n\n    var mergedState = _extends({}, state, newState);\n\n    var canvasWidth = getCanvasWidth(mergedState.width); // The canvas cannot be kept, so calculate the new items position\n\n    Object.assign(newState, stackTimelineItems(items, groups, canvasWidth, mergedState.canvasTimeStart, mergedState.canvasTimeEnd, props.keys, props.lineHeight, props.itemHeightRatio, props.stackItems, mergedState.draggingItem, mergedState.resizingItem, mergedState.dragTime, mergedState.resizingEdge, mergedState.resizeTime, mergedState.newGroupOrder));\n  }\n\n  return newState;\n}","map":null,"metadata":{},"sourceType":"script"}