{"ast":null,"code":"import { STATISTICS_TYPE_OP, SMS_TARGET_OP, PRODUCT_STATUS_OP, PAYMETHOD_FOR_BOOKER_OP, PAYMETHOD_FOR_HOST_OP, GET_SMS_TARGET_OP, PRICING_TYPE_OP, PAYMENT_STATUS_OP, ROOM_GENDER_OP, PRICING_TYPE_OP_EXPEND, GENDER_OP, BOOKING_STATUS_OP, AUTO_SEND_OP, STATISTICS_OP, FUNNELS_OP } from \"../types/enum\";\nimport { LANG } from \"../hooks/hook\";\nimport { isArray } from \"util\";\nexport var globalLanguageSetting = function globalLanguageSetting() {\n  var setArrayWithLang = function setArrayWithLang(set, enumKey) {\n    if (!enumKey) {\n      set.forEach(function (setIn) {\n        setIn.label = LANG(setIn.value);\n      });\n    } else {\n      set.forEach(function (setIn) {\n        setIn.label = LANG(enumKey)[setIn.value];\n      });\n    }\n  };\n\n  var settings = [{\n    value: PAYMENT_STATUS_OP,\n    enumKey: \"PaymentStatus\"\n  }, STATISTICS_TYPE_OP, STATISTICS_OP, {\n    value: SMS_TARGET_OP,\n    enumKey: \"SendTarget\"\n  }, PRODUCT_STATUS_OP, BOOKING_STATUS_OP, PAYMETHOD_FOR_BOOKER_OP, PAYMETHOD_FOR_HOST_OP, GET_SMS_TARGET_OP, PRICING_TYPE_OP, {\n    value: FUNNELS_OP,\n    enumKey: \"Funnels\"\n  }, {\n    value: ROOM_GENDER_OP,\n    enumKey: \"RoomGender\"\n  }, PRICING_TYPE_OP_EXPEND, GENDER_OP, AUTO_SEND_OP];\n  settings.forEach(function (set) {\n    if (!isArray(set)) {\n      // lang객체에 네임스페이스가 있는 OP 들일경우\n      if (set.hasOwnProperty(\"enumKey\")) {\n        setArrayWithLang(set.value, set.enumKey);\n      } // 네임스페이스가 없는 일반 객체일 경우\n\n\n      for (var key in set) {\n        // @ts-ignore\n        set[key] = LANG(key);\n      }\n    } else {\n      setArrayWithLang(set);\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/utils/globalLagnSet.ts"],"names":["STATISTICS_TYPE_OP","SMS_TARGET_OP","PRODUCT_STATUS_OP","PAYMETHOD_FOR_BOOKER_OP","PAYMETHOD_FOR_HOST_OP","GET_SMS_TARGET_OP","PRICING_TYPE_OP","PAYMENT_STATUS_OP","ROOM_GENDER_OP","PRICING_TYPE_OP_EXPEND","GENDER_OP","BOOKING_STATUS_OP","AUTO_SEND_OP","STATISTICS_OP","FUNNELS_OP","LANG","isArray","globalLanguageSetting","setArrayWithLang","set","enumKey","forEach","setIn","label","value","settings","hasOwnProperty","key"],"mappings":"AAAA,SACEA,kBADF,EAEEC,aAFF,EAGEC,iBAHF,EAIEC,uBAJF,EAKEC,qBALF,EAMEC,iBANF,EAOEC,eAPF,EAQEC,iBARF,EASEC,cATF,EAUEC,sBAVF,EAWEC,SAXF,EAYEC,iBAZF,EAaEC,YAbF,EAcEC,aAdF,EAeEC,UAfF,QAgBO,eAhBP;AAiBA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AACzC,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAkBC,OAAlB,EAAuC;AAC9D,QAAI,CAACA,OAAL,EAAc;AACZD,MAAAA,GAAG,CAACE,OAAJ,CAAY,UAACC,KAAD,EAAgB;AAC1BA,QAAAA,KAAK,CAACC,KAAN,GAAcR,IAAI,CAACO,KAAK,CAACE,KAAP,CAAlB;AACD,OAFD;AAGD,KAJD,MAIO;AACLL,MAAAA,GAAG,CAACE,OAAJ,CAAY,UAACC,KAAD,EAAgB;AAC1BA,QAAAA,KAAK,CAACC,KAAN,GAAcR,IAAI,CAACK,OAAD,CAAJ,CAAcE,KAAK,CAACE,KAApB,CAAd;AACD,OAFD;AAGD;AACF,GAVD;;AAYA,MAAMC,QAAQ,GAAG,CACf;AAAED,IAAAA,KAAK,EAAEjB,iBAAT;AAA4Ba,IAAAA,OAAO,EAAE;AAArC,GADe,EAEfpB,kBAFe,EAGfa,aAHe,EAIf;AAAEW,IAAAA,KAAK,EAAEvB,aAAT;AAAwBmB,IAAAA,OAAO,EAAE;AAAjC,GAJe,EAKflB,iBALe,EAMfS,iBANe,EAOfR,uBAPe,EAQfC,qBARe,EASfC,iBATe,EAUfC,eAVe,EAWf;AAAEkB,IAAAA,KAAK,EAAEV,UAAT;AAAqBM,IAAAA,OAAO,EAAE;AAA9B,GAXe,EAYf;AAAEI,IAAAA,KAAK,EAAEhB,cAAT;AAAyBY,IAAAA,OAAO,EAAE;AAAlC,GAZe,EAafX,sBAbe,EAcfC,SAde,EAefE,YAfe,CAAjB;AAiBAa,EAAAA,QAAQ,CAACJ,OAAT,CAAiB,UAACF,GAAD,EAAc;AAC7B,QAAI,CAACH,OAAO,CAACG,GAAD,CAAZ,EAAmB;AACjB;AACA,UAAIA,GAAG,CAACO,cAAJ,CAAmB,SAAnB,CAAJ,EAAmC;AACjCR,QAAAA,gBAAgB,CAACC,GAAG,CAACK,KAAL,EAAYL,GAAG,CAACC,OAAhB,CAAhB;AACD,OAJgB,CAKjB;;;AACA,WAAK,IAAMO,GAAX,IAAkBR,GAAlB,EAAuB;AACrB;AACAA,QAAAA,GAAG,CAACQ,GAAD,CAAH,GAAWZ,IAAI,CAACY,GAAD,CAAf;AACD;AACF,KAVD,MAUO;AACLT,MAAAA,gBAAgB,CAACC,GAAD,CAAhB;AACD;AACF,GAdD;AAeD,CA7CM","sourcesContent":["import {\r\n  STATISTICS_TYPE_OP,\r\n  SMS_TARGET_OP,\r\n  PRODUCT_STATUS_OP,\r\n  PAYMETHOD_FOR_BOOKER_OP,\r\n  PAYMETHOD_FOR_HOST_OP,\r\n  GET_SMS_TARGET_OP,\r\n  PRICING_TYPE_OP,\r\n  PAYMENT_STATUS_OP,\r\n  ROOM_GENDER_OP,\r\n  PRICING_TYPE_OP_EXPEND,\r\n  GENDER_OP,\r\n  BOOKING_STATUS_OP,\r\n  AUTO_SEND_OP,\r\n  STATISTICS_OP,\r\n  FUNNELS_OP\r\n} from \"../types/enum\";\r\nimport { LANG } from \"../hooks/hook\";\r\nimport { isArray } from \"util\";\r\n\r\nexport const globalLanguageSetting = () => {\r\n  const setArrayWithLang = (set: Array<any>, enumKey?: string) => {\r\n    if (!enumKey) {\r\n      set.forEach((setIn: any) => {\r\n        setIn.label = LANG(setIn.value);\r\n      });\r\n    } else {\r\n      set.forEach((setIn: any) => {\r\n        setIn.label = LANG(enumKey)[setIn.value];\r\n      });\r\n    }\r\n  };\r\n\r\n  const settings = [\r\n    { value: PAYMENT_STATUS_OP, enumKey: \"PaymentStatus\" },\r\n    STATISTICS_TYPE_OP,\r\n    STATISTICS_OP,\r\n    { value: SMS_TARGET_OP, enumKey: \"SendTarget\" },\r\n    PRODUCT_STATUS_OP,\r\n    BOOKING_STATUS_OP,\r\n    PAYMETHOD_FOR_BOOKER_OP,\r\n    PAYMETHOD_FOR_HOST_OP,\r\n    GET_SMS_TARGET_OP,\r\n    PRICING_TYPE_OP,\r\n    { value: FUNNELS_OP, enumKey: \"Funnels\" },\r\n    { value: ROOM_GENDER_OP, enumKey: \"RoomGender\" },\r\n    PRICING_TYPE_OP_EXPEND,\r\n    GENDER_OP,\r\n    AUTO_SEND_OP\r\n  ];\r\n  settings.forEach((set: any) => {\r\n    if (!isArray(set)) {\r\n      // lang객체에 네임스페이스가 있는 OP 들일경우\r\n      if (set.hasOwnProperty(\"enumKey\")) {\r\n        setArrayWithLang(set.value, set.enumKey);\r\n      }\r\n      // 네임스페이스가 없는 일반 객체일 경우\r\n      for (const key in set) {\r\n        // @ts-ignore\r\n        set[key] = LANG(key);\r\n      }\r\n    } else {\r\n      setArrayWithLang(set);\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}