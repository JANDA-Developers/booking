{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nexport var geoCode =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(address) {\n    var URL, _ref2, data, results, firstPlace, formatedAddress, _firstPlace$geometry$, lat, lng;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            URL = \"https://maps.googleapis.com/maps/api/geocode/json?address=\".concat(address, \"&key=\").concat(process.env.REACT_APP_API_MAP_KEY, \"&language=ko&region=KO\");\n            _context.next = 3;\n            return axios(URL);\n\n          case 3:\n            _ref2 = _context.sent;\n            data = _ref2.data;\n\n            if (data.error_message) {\n              _context.next = 12;\n              break;\n            }\n\n            results = data.results;\n            firstPlace = results[0];\n\n            if (firstPlace) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 10:\n            formatedAddress = firstPlace.formatted_address, _firstPlace$geometry$ = firstPlace.geometry.location, lat = _firstPlace$geometry$.lat, lng = _firstPlace$geometry$.lng;\n            return _context.abrupt(\"return\", {\n              formatedAddress: formatedAddress,\n              lat: lat,\n              lng: lng\n            });\n\n          case 12:\n            return _context.abrupt(\"return\", false);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function geoCode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var reverseGeoCode =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(lat, lng) {\n    var URL, _ref4, data, results, firstPlace, address;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            URL = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\".concat(lat, \",\").concat(lng, \"&key=\").concat(MAPS_KEY, \"&language=ko&region=KO\");\n            _context2.next = 3;\n            return axios(URL);\n\n          case 3:\n            _ref4 = _context2.sent;\n            data = _ref4.data;\n\n            if (data.error_message) {\n              _context2.next = 10;\n              break;\n            }\n\n            results = data.results;\n            firstPlace = results[0];\n            address = firstPlace.formatted_address;\n            return _context2.abrupt(\"return\", address);\n\n          case 10:\n            return _context2.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function reverseGeoCode(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/middleServer/createHouse/mapHelper.tsx"],"names":["axios","geoCode","address","URL","process","env","REACT_APP_API_MAP_KEY","data","error_message","results","firstPlace","formatedAddress","formatted_address","geometry","location","lat","lng","reverseGeoCode","MAPS_KEY"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,GADe,uEACoDD,OADpD,kBACmEE,OAAO,CAACC,GAAR,CAAYC,qBAD/E;AAAA;AAAA,mBAEEN,KAAK,CAACG,GAAD,CAFP;;AAAA;AAAA;AAEbI,YAAAA,IAFa,SAEbA,IAFa;;AAAA,gBAGhBA,IAAI,CAACC,aAHW;AAAA;AAAA;AAAA;;AAIXC,YAAAA,OAJW,GAICF,IAJD,CAIXE,OAJW;AAKbC,YAAAA,UALa,GAKAD,OAAO,CAAC,CAAD,CALP;;AAAA,gBAMdC,UANc;AAAA;AAAA;AAAA;;AAAA,6CAMK,KANL;;AAAA;AAQEC,YAAAA,eARF,GAYfD,UAZe,CAQjBE,iBARiB,0BAYfF,UAZe,CASjBG,QATiB,CAUfC,QAVe,EAUHC,GAVG,yBAUHA,GAVG,EAUEC,GAVF,yBAUEA,GAVF;AAAA,6CAaZ;AAAEL,cAAAA,eAAe,EAAfA,eAAF;AAAmBI,cAAAA,GAAG,EAAHA,GAAnB;AAAwBC,cAAAA,GAAG,EAAHA;AAAxB,aAbY;;AAAA;AAAA,6CAed,KAfc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPf,OAAO;AAAA;AAAA;AAAA,GAAb;AAkBP,OAAO,IAAMgB,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOF,GAAP,EAAoBC,GAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtBb,YAAAA,GADsB,sEAC4CY,GAD5C,cACmDC,GADnD,kBAC8DE,QAD9D;AAAA;AAAA,mBAELlB,KAAK,CAACG,GAAD,CAFA;;AAAA;AAAA;AAEpBI,YAAAA,IAFoB,SAEpBA,IAFoB;;AAAA,gBAGvBA,IAAI,CAACC,aAHkB;AAAA;AAAA;AAAA;;AAIlBC,YAAAA,OAJkB,GAINF,IAJM,CAIlBE,OAJkB;AAKpBC,YAAAA,UALoB,GAKPD,OAAO,CAAC,CAAD,CALA;AAMpBP,YAAAA,OANoB,GAMVQ,UAAU,CAACE,iBAND;AAAA,8CAOnBV,OAPmB;;AAAA;AAAA,8CASrB,KATqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAde,cAAc;AAAA;AAAA;AAAA,GAApB","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const geoCode = async (address: string) => {\r\n  const URL = `https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=${process.env.REACT_APP_API_MAP_KEY}&language=ko&region=KO`;\r\n  const { data } = await axios(URL);\r\n  if (!data.error_message) {\r\n    const { results } = data;\r\n    const firstPlace = results[0];\r\n    if (!firstPlace) return false;\r\n    const {\r\n      formatted_address: formatedAddress,\r\n      geometry: {\r\n        location: { lat, lng }\r\n      }\r\n    } = firstPlace;\r\n    return { formatedAddress, lat, lng };\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const reverseGeoCode = async (lat: number, lng: number) => {\r\n  const URL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${MAPS_KEY}&language=ko&region=KO`;\r\n  const { data } = await axios(URL);\r\n  if (!data.error_message) {\r\n    const { results } = data;\r\n    const firstPlace = results[0];\r\n    const address = firstPlace.formatted_address;\r\n    return address;\r\n  }\r\n  return false;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}