{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\bookingHost\\\\helper.tsx\";\nimport React from \"react\";\nimport { getCookie, setCookie } from \"../../utils/cookies\";\nimport { TimePerMs } from \"../../types/enum\";\nimport GreetingBox from \"./dashboard/components/greetingBox\";\nimport { toast } from \"react-toastify\";\nimport { DEFAULT_HOUSE_CONFIG } from \"../../types/defaults\";\nimport { removeNullOfObject, mergeObject, isEmpty } from \"../../utils/utils\";\n\nvar houseConfigSetting = function houseConfigSetting(currentHouse) {\n  var houseConfig = DEFAULT_HOUSE_CONFIG;\n\n  if (currentHouse) {\n    removeNullOfObject(currentHouse.houseConfig);\n    houseConfig = mergeObject(DEFAULT_HOUSE_CONFIG, currentHouse.houseConfig);\n    currentHouse.houseConfig = houseConfig;\n  }\n\n  return houseConfig;\n}; // 메모중에 알림 있는것 알려줌\n\n\nvar alertMemo = function alertMemo(modalHook, memos) {\n  if (!sessionStorage.getItem(\"dontShowMemoAlert\") && !getCookie(\"dontShowMemoToday\")) {\n    if (memos) {\n      var haveAlert = memos.find(function (data) {\n        return data.enableAlert;\n      });\n      haveAlert && modalHook.openModal();\n    }\n  }\n}; // 인사\n\n\nvar greet =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var lastConnectTime;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            lastConnectTime = getCookie(\"lastConnect\");\n\n            if (lastConnectTime === undefined || parseInt(lastConnectTime) < new Date().valueOf() - TimePerMs.H * 3) {\n              toast(React.createElement(GreetingBox, {\n                userData: context.user,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 46\n                },\n                __self: this\n              }));\n            }\n\n            setCookie(\"lastConnect\", \"\".concat(new Date().valueOf()), 999);\n            return _context.abrupt(\"return\", \"\");\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function greet(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // expire 토스트 수정필요\n\n\nvar testPeriodShow =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(context) {\n    var lastConnectTime;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            lastConnectTime = getCookie(\"lastConnect\");\n\n            if (lastConnectTime === undefined || parseInt(lastConnectTime) < new Date().valueOf() - TimePerMs.H * 3) {\n              toast(React.createElement(GreetingBox, {\n                userData: context.user,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 59\n                },\n                __self: this\n              }));\n            }\n\n            setCookie(\"lastConnect\", \"\".concat(new Date().valueOf()), 999);\n            return _context2.abrupt(\"return\", \"\");\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function testPeriodShow(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // 현재 선택된 숙소를 가져옴\n\n\nvar getCurrentHouse = function getCurrentHouse(houses, tempLastSelectedHouse) {\n  var lastSelectedHouse = houses.find(function (house) {\n    return house._id === tempLastSelectedHouse.value;\n  }); // 마지막으로 선택한 하우스 또는 첫번째 하우스\n\n  var selectedHouse = lastSelectedHouse || houses[0]; // 최근에 선택된 숙소가 없다면 선택된 숙소는 첫번째 숙소입니다.\n\n  if (!selectedHouse && !isEmpty(houses)) {\n    var _houses = _slicedToArray(houses, 1);\n\n    selectedHouse = _houses[0];\n  }\n\n  return selectedHouse;\n};\n\nexport { alertMemo, testPeriodShow, greet, houseConfigSetting, getCurrentHouse };","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/bookingHost/helper.tsx"],"names":["React","getCookie","setCookie","TimePerMs","GreetingBox","toast","DEFAULT_HOUSE_CONFIG","removeNullOfObject","mergeObject","isEmpty","houseConfigSetting","currentHouse","houseConfig","alertMemo","modalHook","memos","sessionStorage","getItem","haveAlert","find","data","enableAlert","openModal","greet","context","lastConnectTime","undefined","parseInt","Date","valueOf","H","user","testPeriodShow","getCurrentHouse","houses","tempLastSelectedHouse","lastSelectedHouse","house","_id","value","selectedHouse"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { IUseModal } from \"../../hooks/hook\";\r\nimport { getMemos_GetMemos_memos } from \"../../types/api\";\r\nimport { getCookie, setCookie } from \"../../utils/cookies\";\r\nimport { TimePerMs } from \"../../types/enum\";\r\nimport GreetingBox from \"./dashboard/components/greetingBox\";\r\nimport { toast } from \"react-toastify\";\r\nimport { IContext } from \"./BookingHostRouter\";\r\nimport { IHouse, IHouseConfigFull } from \"../../types/interface\";\r\nimport { DEFAULT_HOUSE_CONFIG } from \"../../types/defaults\";\r\nimport { removeNullOfObject, mergeObject, isEmpty } from \"../../utils/utils\";\r\n\r\nconst houseConfigSetting = (currentHouse: IHouse | undefined) => {\r\n  let houseConfig = DEFAULT_HOUSE_CONFIG;\r\n  if (currentHouse) {\r\n    removeNullOfObject(currentHouse.houseConfig);\r\n    houseConfig = mergeObject<IHouseConfigFull>(\r\n      DEFAULT_HOUSE_CONFIG,\r\n      currentHouse.houseConfig\r\n    );\r\n    currentHouse.houseConfig = houseConfig;\r\n  }\r\n  return houseConfig;\r\n};\r\n\r\n// 메모중에 알림 있는것 알려줌\r\nconst alertMemo = (modalHook: IUseModal, memos: getMemos_GetMemos_memos[]) => {\r\n  if (\r\n    !sessionStorage.getItem(\"dontShowMemoAlert\") &&\r\n    !getCookie(\"dontShowMemoToday\")\r\n  ) {\r\n    if (memos) {\r\n      const haveAlert = memos.find(data => data.enableAlert);\r\n      haveAlert && modalHook.openModal();\r\n    }\r\n  }\r\n};\r\n\r\n// 인사\r\nconst greet = async (context: IContext) => {\r\n  const lastConnectTime = getCookie(\"lastConnect\");\r\n  if (\r\n    lastConnectTime === undefined ||\r\n    parseInt(lastConnectTime) < new Date().valueOf() - TimePerMs.H * 3\r\n  ) {\r\n    toast(<GreetingBox userData={context.user} />);\r\n  }\r\n  setCookie(\"lastConnect\", `${new Date().valueOf()}`, 999);\r\n  return \"\";\r\n};\r\n\r\n// expire 토스트 수정필요\r\nconst testPeriodShow = async (context: IContext) => {\r\n  const lastConnectTime = getCookie(\"lastConnect\");\r\n  if (\r\n    lastConnectTime === undefined ||\r\n    parseInt(lastConnectTime) < new Date().valueOf() - TimePerMs.H * 3\r\n  ) {\r\n    toast(<GreetingBox userData={context.user} />);\r\n  }\r\n  setCookie(\"lastConnect\", `${new Date().valueOf()}`, 999);\r\n  return \"\";\r\n};\r\n\r\n// 현재 선택된 숙소를 가져옴\r\nconst getCurrentHouse = (\r\n  houses: IHouse[],\r\n  tempLastSelectedHouse: any\r\n): IHouse | undefined => {\r\n  const lastSelectedHouse = houses.find(\r\n    house => house._id === tempLastSelectedHouse.value\r\n  );\r\n\r\n  // 마지막으로 선택한 하우스 또는 첫번째 하우스\r\n  let selectedHouse = lastSelectedHouse || houses[0];\r\n\r\n  // 최근에 선택된 숙소가 없다면 선택된 숙소는 첫번째 숙소입니다.\r\n  if (!selectedHouse && !isEmpty(houses)) [selectedHouse] = houses;\r\n\r\n  return selectedHouse;\r\n};\r\n\r\nexport {\r\n  alertMemo,\r\n  testPeriodShow,\r\n  greet,\r\n  houseConfigSetting,\r\n  getCurrentHouse\r\n};\r\n"]},"metadata":{},"sourceType":"module"}