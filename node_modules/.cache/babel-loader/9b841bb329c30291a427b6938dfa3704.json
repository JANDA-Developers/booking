{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\components\\\\noti\\\\NotiWrap.tsx\";\nimport React, { Fragment } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport { GET_NOTI, CONFIRM_NOTI } from \"../../queries\";\nimport { queryDataFormater, s4 } from \"../../utils/utils\";\nimport Noti from \"./Noti\";\nimport { getOperationName } from \"apollo-link\";\nimport moment from \"moment\";\nimport { FLOATING_PRELOADER_SIZE, NotiType, NotiLevel } from \"../../types/enum\";\nimport Preloader from \"../../atoms/preloader/Preloader\";\nimport { LANG } from \"../../hooks/hook\";\n\nvar GetNotiQu =\n/*#__PURE__*/\nfunction (_Query) {\n  _inherits(GetNotiQu, _Query);\n\n  function GetNotiQu() {\n    _classCallCheck(this, GetNotiQu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GetNotiQu).apply(this, arguments));\n  }\n\n  return GetNotiQu;\n}(Query);\n\nvar ConfirmMutation =\n/*#__PURE__*/\nfunction (_Mutation) {\n  _inherits(ConfirmMutation, _Mutation);\n\n  function ConfirmMutation() {\n    _classCallCheck(this, ConfirmMutation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConfirmMutation).apply(this, arguments));\n  }\n\n  return ConfirmMutation;\n}(Mutation);\n\nvar addExpiredWarnNoti = function addExpiredWarnNoti(notis, product) {\n  if (!product) return;\n  var isExpired = product.isExpired,\n      daysLeftToExpire = product.daysLeftToExpire; // 몇일 남았는지는 toast로 넣고 만료 직전에 노티를 넣자\n\n  var sharedProp = {\n    _id: s4(),\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    validPeriod: moment().add(3, \"days\")\n  };\n\n  if (isExpired) {\n    notis.push(_objectSpread({}, sharedProp, {\n      __typename: \"Noti\",\n      notiType: NotiType.PRODUCT_EXPIRE,\n      title: LANG(\"product_has_expired\"),\n      isConfirm: false,\n      notiLevel: NotiLevel.WARN,\n      msg: LANG(\"the_current_product_has_expired_normal_service_is_not_possible_Please_proceed_with_the_payment\")\n    }));\n  } else if (daysLeftToExpire < 4) {\n    notis.push(_objectSpread({}, sharedProp, {\n      __typename: \"Noti\",\n      notiType: NotiType.PRODUCT_EXPIRE,\n      title: LANG(\"F_have_x_days_left_to_try_for_free\")(daysLeftToExpire),\n      isConfirm: false,\n      notiLevel: NotiLevel.WARN,\n      msg: LANG(\"F_you_have_x_free_trial_left_y__is_about_to_expire\")(daysLeftToExpire, moment(product.expireDate).local().format(\"YYYY/MM/DD\"))\n    }));\n  }\n};\n\nvar NotiWrap = function NotiWrap(_ref) {\n  var context = _ref.context,\n      icon = _ref.icon;\n  var house = context.house,\n      applyedProduct = context.applyedProduct;\n  return React.createElement(GetNotiQu, {\n    skip: !house,\n    query: GET_NOTI,\n    variables: {\n      houseId: house._id,\n      count: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, function (_ref2) {\n    var data = _ref2.data,\n        loading = _ref2.loading;\n    var notis = queryDataFormater(data, \"GetNotis\", \"notis\", []) || [];\n    var filterdNotis = notis.filter(function (noti) {\n      return true;\n    });\n\n    if (applyedProduct) {\n      addExpiredWarnNoti(filterdNotis, applyedProduct);\n    }\n\n    return React.createElement(ConfirmMutation, {\n      mutation: CONFIRM_NOTI,\n      refetchQueries: [getOperationName(GET_NOTI)],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, function (confirmMutationMu, _ref3) {\n      var confirmMutationLoading = _ref3.loading;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Preloader, {\n        floating: true,\n        size: FLOATING_PRELOADER_SIZE,\n        loading: confirmMutationLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(Noti, {\n        icon: icon,\n        loading: loading,\n        context: context,\n        confirmMutationMu: confirmMutationMu,\n        notis: filterdNotis,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }));\n    });\n  });\n};\n\nexport default NotiWrap;","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/components/noti/NotiWrap.tsx"],"names":["React","Fragment","Mutation","Query","GET_NOTI","CONFIRM_NOTI","queryDataFormater","s4","Noti","getOperationName","moment","FLOATING_PRELOADER_SIZE","NotiType","NotiLevel","Preloader","LANG","GetNotiQu","ConfirmMutation","addExpiredWarnNoti","notis","product","isExpired","daysLeftToExpire","sharedProp","_id","createdAt","Date","updatedAt","validPeriod","add","push","__typename","notiType","PRODUCT_EXPIRE","title","isConfirm","notiLevel","WARN","msg","expireDate","local","format","NotiWrap","context","icon","house","applyedProduct","houseId","count","data","loading","filterdNotis","filter","noti","confirmMutationMu","confirmMutationLoading"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\r\nimport {Mutation, Query} from \"react-apollo\";\r\nimport {\r\n  UPDATE_MYPROFILE,\r\n  GET_USER_INFO,\r\n  GET_NOTI,\r\n  CONFIRM_NOTI\r\n} from \"../../queries\";\r\nimport {\r\n  showError,\r\n  onCompletedMessage,\r\n  queryDataFormater,\r\n  s4\r\n} from \"../../utils/utils\";\r\nimport {IUser, IHouse, IDiv} from \"../../types/interface\";\r\nimport {\r\n  getNotis,\r\n  getNotisVariables,\r\n  confirmBooking,\r\n  confirmBookingVariables,\r\n  confirmNoti,\r\n  confirmNotiVariables,\r\n  getNotis_GetNotis_notis,\r\n  getMyProfile_GetMyProfile_user_houses_product\r\n} from \"../../types/api\";\r\nimport Noti from \"./Noti\";\r\nimport {IContext} from \"../../pages/MiddleServerRouter\";\r\nimport {getOperationName} from \"apollo-link\";\r\nimport moment from \"moment\";\r\nimport {FLOATING_PRELOADER_SIZE, NotiType, NotiLevel} from \"../../types/enum\";\r\nimport Preloader from \"../../atoms/preloader/Preloader\";\r\nimport {LANG} from \"../../hooks/hook\";\r\n\r\nclass GetNotiQu extends Query<getNotis, getNotisVariables> {}\r\n\r\nclass ConfirmMutation extends Mutation<confirmNoti, confirmNotiVariables> {}\r\n\r\ninterface IProps {\r\n  context: IContext;\r\n  icon: JSX.Element;\r\n}\r\n\r\nconst addExpiredWarnNoti = (\r\n  notis: getNotis_GetNotis_notis[],\r\n  product?: getMyProfile_GetMyProfile_user_houses_product\r\n): void => {\r\n  if (!product) return;\r\n\r\n  const {isExpired, daysLeftToExpire} = product;\r\n\r\n  // 몇일 남았는지는 toast로 넣고 만료 직전에 노티를 넣자\r\n\r\n  const sharedProp = {\r\n    _id: s4(),\r\n    createdAt: new Date(),\r\n    updatedAt: new Date(),\r\n    validPeriod: moment().add(3, \"days\")\r\n  };\r\n\r\n  if (isExpired) {\r\n    notis.push({\r\n      ...sharedProp,\r\n      __typename: \"Noti\",\r\n      notiType: NotiType.PRODUCT_EXPIRE,\r\n      title: LANG(\"product_has_expired\"),\r\n      isConfirm: false,\r\n      notiLevel: NotiLevel.WARN,\r\n      msg: LANG(\r\n        \"the_current_product_has_expired_normal_service_is_not_possible_Please_proceed_with_the_payment\"\r\n      )\r\n    });\r\n  } else if (daysLeftToExpire < 4) {\r\n    notis.push({\r\n      ...sharedProp,\r\n      __typename: \"Noti\",\r\n      notiType: NotiType.PRODUCT_EXPIRE,\r\n      title: LANG(\"F_have_x_days_left_to_try_for_free\")(daysLeftToExpire),\r\n      isConfirm: false,\r\n      notiLevel: NotiLevel.WARN,\r\n      msg: LANG(\"F_you_have_x_free_trial_left_y__is_about_to_expire\")(\r\n        daysLeftToExpire,\r\n        moment(product.expireDate)\r\n          .local()\r\n          .format(\"YYYY/MM/DD\")\r\n      )\r\n    });\r\n  }\r\n};\r\n\r\nconst NotiWrap: React.FC<IProps> = ({context, icon}) => {\r\n  const {house, applyedProduct} = context;\r\n\r\n  return (\r\n    <GetNotiQu\r\n      skip={!house}\r\n      query={GET_NOTI}\r\n      variables={{houseId: house._id, count: 20}}\r\n    >\r\n      {({data, loading}) => {\r\n        const notis = queryDataFormater(data, \"GetNotis\", \"notis\", []) || [];\r\n        const filterdNotis = notis.filter(noti => true);\r\n\r\n        if (applyedProduct) {\r\n          addExpiredWarnNoti(filterdNotis, applyedProduct);\r\n        }\r\n\r\n        return (\r\n          <ConfirmMutation\r\n            mutation={CONFIRM_NOTI}\r\n            refetchQueries={[getOperationName(GET_NOTI)!]}\r\n          >\r\n            {(confirmMutationMu, {loading: confirmMutationLoading}) => (\r\n              <Fragment>\r\n                <Preloader\r\n                  floating\r\n                  size={FLOATING_PRELOADER_SIZE}\r\n                  loading={confirmMutationLoading}\r\n                />\r\n                <Noti\r\n                  icon={icon}\r\n                  loading={loading}\r\n                  context={context}\r\n                  confirmMutationMu={confirmMutationMu}\r\n                  notis={filterdNotis}\r\n                />\r\n              </Fragment>\r\n            )}\r\n          </ConfirmMutation>\r\n        );\r\n      }}\r\n    </GetNotiQu>\r\n  );\r\n};\r\n\r\nexport default NotiWrap;\r\n"]},"metadata":{},"sourceType":"module"}