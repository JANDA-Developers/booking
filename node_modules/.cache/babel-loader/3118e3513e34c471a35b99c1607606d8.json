{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\middleServer\\\\Login\\\\Login.tsx\";\nimport React from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport { toast } from \"react-toastify\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"../../../atoms/cards/Card\";\nimport InputText from \"../../../atoms/forms/inputText/InputText\";\nimport Button from \"../../../atoms/button/Button\";\nimport \"./Login.scss\";\nimport { LOG_USER_IN } from \"../../../clientQueries\";\nimport { EMAIL_SIGN_IN, GET_USER_INFO } from \"../../../queries\";\nimport { useInput, LANG } from \"../../../hooks/hook\";\nimport utils from \"../../../utils/utils\";\nimport client from \"../../../apolloClient\";\nimport PreloaderModal from \"../../../atoms/preloaderModal/PreloaderModal\";\n\nvar Login = function Login(_ref) {\n  var context = _ref.context;\n  var history = context.history;\n  var lastLoginEmail = localStorage.getItem(\"lastLogin\") || \"\";\n  var emailHook = useInput(lastLoginEmail, true);\n  var passwordHook = useInput(\"\");\n  return React.createElement(\"div\", {\n    id: \"loginPage\",\n    className: \"container container--centerlize\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Login\"), React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Mutation, {\n    mutation: LOG_USER_IN,\n    refetchQueries: [{\n      query: GET_USER_INFO\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, function (logUserIn, _ref2) {\n    var loginMuLoading = _ref2.loading;\n\n    var emailSignIn = function emailSignIn(e) {\n      if (loginMuLoading) return;\n      e.preventDefault();\n\n      if (!emailHook.isValid) {\n        toast.warn(LANG(\"username_must_be_email\"));\n        return;\n      }\n\n      if (!passwordHook.isValid) {\n        toast.warn(LANG(\"invalid_password\"));\n        return;\n      }\n\n      client.query({\n        query: EMAIL_SIGN_IN,\n        variables: {\n          email: emailHook.value,\n          password: passwordHook.value\n        }\n      }).then(function (_ref3) {\n        var _ref3$data$EmailSignI = _ref3.data.EmailSignIn,\n            ok = _ref3$data$EmailSignI.ok,\n            token = _ref3$data$EmailSignI.token,\n            error = _ref3$data$EmailSignI.error;\n\n        if (ok) {\n          if (token) {\n            logUserIn({\n              variables: {\n                token: token\n              }\n            });\n            localStorage.setItem(\"lastLogin\", emailHook.value); // toast.success(LANG(\"login_complete\"));\n\n            history.replace(\"/dashboard\");\n          }\n        }\n\n        if (error) {\n          if (error === \"Wrong Password\") toast.warn(LANG(\"passwords_do_not_match\"));else toast.warn(LANG(\"cant_find_this_email\"));\n        }\n      });\n    };\n\n    return React.createElement(\"form\", {\n      onSubmit: emailSignIn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(PreloaderModal, {\n      loading: loginMuLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(InputText, Object.assign({}, emailHook, {\n      validation: utils.isEmail,\n      label: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(InputText, Object.assign({}, passwordHook, {\n      validation: utils.isPassword,\n      type: \"password\",\n      label: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }))), React.createElement(Button, {\n      type: \"submit\",\n      thema: \"primary\",\n      label: LANG(\"login\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Link, {\n      to: \"/signUp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Button, {\n      thema: \"primary\",\n      label: LANG(\"signUp\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })));\n  }))));\n};\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/middleServer/Login/Login.tsx"],"names":["React","Mutation","toast","Link","Card","InputText","Button","LOG_USER_IN","EMAIL_SIGN_IN","GET_USER_INFO","useInput","LANG","utils","client","PreloaderModal","Login","context","history","lastLoginEmail","localStorage","getItem","emailHook","passwordHook","query","logUserIn","loginMuLoading","loading","emailSignIn","e","preventDefault","isValid","warn","variables","email","value","password","then","data","EmailSignIn","ok","token","error","setItem","replace","isEmail","isPassword"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"../../../atoms/cards/Card\";\r\nimport InputText from \"../../../atoms/forms/inputText/InputText\";\r\nimport Button from \"../../../atoms/button/Button\";\r\nimport \"./Login.scss\";\r\nimport { LOG_USER_IN } from \"../../../clientQueries\";\r\nimport { EMAIL_SIGN_IN, GET_USER_INFO } from \"../../../queries\";\r\nimport { useInput, LANG } from \"../../../hooks/hook\";\r\nimport utils from \"../../../utils/utils\";\r\nimport { IContext } from \"../../MiddleServerRouter\";\r\nimport client from \"../../../apolloClient\";\r\nimport PreloaderModal from \"../../../atoms/preloaderModal/PreloaderModal\";\r\n\r\ninterface Iprops {\r\n  context: IContext;\r\n}\r\n\r\nconst Login: React.FC<Iprops> = ({ context }) => {\r\n  const { history } = context;\r\n  const lastLoginEmail = localStorage.getItem(\"lastLogin\") || \"\";\r\n  const emailHook = useInput(lastLoginEmail, true);\r\n  const passwordHook = useInput(\"\");\r\n\r\n  return (\r\n    <div id=\"loginPage\" className=\"container container--centerlize\">\r\n      <div>\r\n        <h1>Login</h1>\r\n        <Card>\r\n          {/* 로그인 뮤테이션 (로컬 ) */}\r\n          <Mutation\r\n            mutation={LOG_USER_IN}\r\n            refetchQueries={[{ query: GET_USER_INFO }]}\r\n          >\r\n            {(logUserIn: any, { loading: loginMuLoading }: any) => {\r\n              const emailSignIn = (e: any) => {\r\n                if (loginMuLoading) return;\r\n\r\n                e.preventDefault();\r\n                if (!emailHook.isValid) {\r\n                  toast.warn(LANG(\"username_must_be_email\"));\r\n                  return;\r\n                }\r\n                if (!passwordHook.isValid) {\r\n                  toast.warn(LANG(\"invalid_password\"));\r\n                  return;\r\n                }\r\n\r\n                client\r\n                  .query({\r\n                    query: EMAIL_SIGN_IN,\r\n                    variables: {\r\n                      email: emailHook.value,\r\n                      password: passwordHook.value\r\n                    }\r\n                  })\r\n                  .then(\r\n                    ({\r\n                      data: {\r\n                        EmailSignIn: { ok, token, error }\r\n                      }\r\n                    }) => {\r\n                      if (ok) {\r\n                        if (token) {\r\n                          logUserIn({\r\n                            variables: {\r\n                              token\r\n                            }\r\n                          });\r\n                          localStorage.setItem(\"lastLogin\", emailHook.value);\r\n                          // toast.success(LANG(\"login_complete\"));\r\n                          history.replace(\"/dashboard\");\r\n                        }\r\n                      }\r\n                      if (error) {\r\n                        if (error === \"Wrong Password\")\r\n                          toast.warn(LANG(\"passwords_do_not_match\"));\r\n                        else toast.warn(LANG(\"cant_find_this_email\"));\r\n                      }\r\n                    }\r\n                  );\r\n              };\r\n\r\n              return (\r\n                <form onSubmit={emailSignIn}>\r\n                  <PreloaderModal loading={loginMuLoading} />\r\n                  <div>\r\n                    <InputText\r\n                      {...emailHook}\r\n                      validation={utils.isEmail}\r\n                      label=\"Email\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <InputText\r\n                      {...passwordHook}\r\n                      validation={utils.isPassword}\r\n                      type=\"password\"\r\n                      label=\"Password\"\r\n                    />\r\n                  </div>\r\n                  <Button type=\"submit\" thema=\"primary\" label={LANG(\"login\")} />\r\n                  <Link to=\"/signUp\">\r\n                    <Button thema=\"primary\" label={LANG(\"signUp\")} />\r\n                  </Link>\r\n                </form>\r\n              );\r\n            }}\r\n          </Mutation>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}