{"ast":null,"code":"//  전화번호 형식에 맞추어 - 붙임\nvar autoHypenPhone = function autoHypenPhone() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var inStr = str.replace(/[^0-9]/g, \"\");\n  var tmp = \"\";\n\n  if (inStr.length < 4) {\n    return inStr;\n  }\n\n  if (inStr.length < 7) {\n    tmp += inStr.substr(0, 3);\n    tmp += \"-\";\n    tmp += inStr.substr(3);\n    return tmp;\n  }\n\n  if (inStr.length < 11) {\n    tmp += inStr.substr(0, 3);\n    tmp += \"-\";\n    tmp += inStr.substr(3, 3);\n    tmp += \"-\";\n    tmp += inStr.substr(6);\n    return tmp;\n  }\n\n  if (inStr.length >= 11) {\n    tmp += inStr.substr(0, 3);\n    tmp += \"-\";\n    tmp += inStr.substr(3, 4);\n    tmp += \"-\";\n    tmp += inStr.substr(7);\n    return tmp;\n  }\n\n  return inStr;\n}; //  3글자 마다 ,붙여줌\n\n\nvar autoComma = function autoComma() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  if (typeof str === \"number\") return autoComma(str.toString());\n  var t = \"\".concat(str);\n  var comma = /,/g;\n  t = t.replace(comma, \"\");\n  var x = t.split(\".\");\n  var x1 = x[0];\n  var x2 = x.length > 1 ? \".\".concat(x[1]) : \"\";\n  var rgx = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, \"$1\" + \",\" + \"$2\");\n  }\n\n  return x1 + x2;\n}; // 숫자로된 string 타입을 반환\n\n\nvar numberStr = function numberStr() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return str.replace(/[^0-9.]/g, \"\");\n}; // 스트링을 숫자로 만듬\n\n\nvar toNumber = function toNumber() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  if (typeof value === \"number\") return value;\n  return parseInt(value.replace(/[^0-9.]/g, \"\"), 10);\n};\n\nexport default autoHypenPhone;\nexport { autoComma, numberStr, toNumber };","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/utils/autoFormat.tsx"],"names":["autoHypenPhone","str","inStr","replace","tmp","length","substr","autoComma","toString","t","comma","x","split","x1","x2","rgx","test","numberStr","toNumber","value","parseInt"],"mappings":"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","sourcesContent":["//  전화번호 형식에 맞추어 - 붙임\r\nconst autoHypenPhone = (str: string = \"\"): string => {\r\n  const inStr = str.replace(/[^0-9]/g, \"\");\r\n  let tmp = \"\";\r\n  if (inStr.length < 4) {\r\n    return inStr;\r\n  }\r\n  if (inStr.length < 7) {\r\n    tmp += inStr.substr(0, 3);\r\n    tmp += \"-\";\r\n    tmp += inStr.substr(3);\r\n    return tmp;\r\n  }\r\n  if (inStr.length < 11) {\r\n    tmp += inStr.substr(0, 3);\r\n    tmp += \"-\";\r\n    tmp += inStr.substr(3, 3);\r\n    tmp += \"-\";\r\n    tmp += inStr.substr(6);\r\n    return tmp;\r\n  }\r\n  if (inStr.length >= 11) {\r\n    tmp += inStr.substr(0, 3);\r\n    tmp += \"-\";\r\n    tmp += inStr.substr(3, 4);\r\n    tmp += \"-\";\r\n    tmp += inStr.substr(7);\r\n    return tmp;\r\n  }\r\n\r\n  return inStr;\r\n};\r\n\r\n//  3글자 마다 ,붙여줌\r\nconst autoComma = (str: string | number = \"\"): string => {\r\n  if (typeof str === \"number\") return autoComma(str.toString());\r\n  let t = `${str}`;\r\n  const comma = /,/g;\r\n  t = t.replace(comma, \"\");\r\n  const x = t.split(\".\");\r\n  let x1 = x[0];\r\n  const x2 = x.length > 1 ? `.${x[1]}` : \"\";\r\n  const rgx = /(\\d+)(\\d{3})/;\r\n  while (rgx.test(x1)) {\r\n    x1 = x1.replace(rgx, \"$1\" + \",\" + \"$2\");\r\n  }\r\n\r\n  return x1 + x2;\r\n};\r\n\r\n// 숫자로된 string 타입을 반환\r\nconst numberStr = (str: string = \"\"): string => str.replace(/[^0-9.]/g, \"\");\r\n// 스트링을 숫자로 만듬\r\nconst toNumber = (value: string | number = \"\"): number => {\r\n  if (typeof value === \"number\") return value;\r\n  return parseInt(value.replace(/[^0-9.]/g, \"\"), 10);\r\n};\r\n\r\nexport default autoHypenPhone;\r\nexport {autoComma, numberStr, toNumber};\r\n"]},"metadata":{},"sourceType":"module"}