{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\atoms\\\\searchInput\\\\SearchInput.tsx\";\n// 참고: https://codepen.io/manpreet/pen/EyXwrE\nimport $ from \"jquery\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport List from \"./list\";\nimport \"./searchInput.scss\";\nimport Icon from \"../icons/Icons\";\nimport Preloader from \"../preloader/Preloader\";\nimport searchListFormat from \"../../utils/searchListFormater\";\n\nvar JDsearchInput = function JDsearchInput(_ref) {\n  var dataList = _ref.dataList,\n      staticList = _ref.staticList,\n      placeholder = _ref.placeholder,\n      label = _ref.label,\n      onFindOne = _ref.onFindOne,\n      filter = _ref.filter,\n      onListClick = _ref.onListClick,\n      onTypeChange = _ref.onTypeChange,\n      onTypeValue = _ref.onTypeValue,\n      isMatched = _ref.isMatched,\n      setIsMatched = _ref.setIsMatched,\n      alwaysListShow = _ref.alwaysListShow,\n      setTypeWhenFindOne = _ref.setTypeWhenFindOne,\n      asName = _ref.asName,\n      asDetail = _ref.asDetail,\n      isLoading = _ref.isLoading,\n      feedBackMessage = _ref.feedBackMessage,\n      maxCount = _ref.maxCount,\n      onSearch = _ref.onSearch,\n      asId = _ref.asId;\n  // Naming Format\n  var formatDataList = searchListFormat(dataList && dataList.slice(0, maxCount), asName, asDetail, asId);\n\n  var _useState = useState(formatDataList),\n      _useState2 = _slicedToArray(_useState, 2),\n      filteredDataList = _useState2[0],\n      SetFilteredDataList = _useState2[1];\n\n  var inputRef = useRef(null);\n  var ulRef = useRef(null); //  value와 메치되는 리스트를 찾습니다.\n\n  var setList = function setList() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : inputRef.current.value;\n\n    // CASE: 필터할경우\n    if (filter) {\n      var filteredItems = []; // if value == '' filter all\n\n      if (value) {\n        filteredItems = formatDataList.filter(function (item) {\n          return item.name.toLowerCase().includes(value.toLowerCase());\n        });\n      }\n\n      SetFilteredDataList(filteredItems);\n    } else if (value || alwaysListShow) SetFilteredDataList(formatDataList); // CASE: input has no value\n\n\n    if (!value && !alwaysListShow) SetFilteredDataList([]);\n  };\n\n  var autoScrollList = function autoScrollList(target) {\n    $(target).parent().scrollTop(target.offsetTop);\n  }; // Handler - input : onKeyPress\n\n\n  var handleOnKeyPress = function handleOnKeyPress(e) {\n    // CASE: 엔터를 쳤을경우에\n    if (e.key === \"Enter\") {\n      e.preventDefault(); // 키보드에 의해서 선택된것 또는 그런게없다면 완벽하게 일치하는것을 찾음\n\n      var selectedNode = $(ulRef.current).find(\".JDsearchInput__li--selected\").get(0) || $(ulRef.current).find(\".JDsearchInput__li--correspond\").get(0);\n      onSearch && onSearch(e.currentTarget.value); // CASE: 키보드상 선택된 노드가 있을경우에\n\n      if (selectedNode) {\n        !isLoading && onFindOne && onFindOne($(selectedNode).attr(\"value\"), $(selectedNode).attr(\"id\"));\n        setTypeWhenFindOne && onTypeChange && onTypeChange($(selectedNode).attr(\"value\"));\n        $(inputRef.current).blur();\n      }\n    } // ⌨️ 키보드 위아래로 움직일경우에 노드 선택\n\n\n    if (e.key === \"ArrowDown\" || e.key === \"ArrowUp\") {\n      e.preventDefault(); // CASE: ul has no children\n\n      if (!ulRef.current) return;\n      if (!ulRef.current.children) return;\n\n      var _selectedNode = $(ulRef.current).find(\".JDsearchInput__li--selected\"); // CASE: li is selected\n\n\n      if (_selectedNode.length) {\n        // active select\n        if (e.key === \"ArrowUp\") {\n          var target = $(_selectedNode).prev();\n          if (!target.get(0)) return;\n          target.addClass(\"JDsearchInput__li--selected\");\n          autoScrollList(target.get(0));\n        } else {\n          var _target = $(_selectedNode).next();\n\n          if (!_target.get(0)) return;\n\n          _target.addClass(\"JDsearchInput__li--selected\");\n\n          autoScrollList(_target.get(0));\n        } // remove select\n\n\n        $(_selectedNode).removeClass(\"JDsearchInput__li--selected\"); // first select\n      } else if (e.key === \"ArrowDown\") ulRef.current.children[0].classList.add(\"JDsearchInput__li--selected\");\n    }\n  }; // Handler - 인풋 : onChange\n\n\n  var handleChange = function handleChange(e) {\n    e.preventDefault();\n    if (filter) setList(e.target.value);\n    onTypeChange && onTypeChange(e.target.value);\n  }; // Handler - 인풋 : onFocus\n\n\n  var handleOnFocus = function handleOnFocus(e) {\n    e.preventDefault();\n    setTimeout(function () {\n      $(ulRef.current).removeClass(\"JDsearchInput__ul--hide\");\n    }, 100);\n  }; // Handler - 인풋 : onBlur\n\n\n  var handleOnBlur = function handleOnBlur(e) {\n    e.preventDefault(); // 여기 setTimeOut 이 있는이유는 이벤트 파서가 도착하기전에 css 가 먼저 반응하기 떄문이다.\n\n    setTimeout(function () {\n      $(ulRef.current).addClass(\"JDsearchInput__ul--hide\");\n    }, 500);\n  }; // Handler - 리스트 : onClick\n\n\n  var handleOnListClick =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e) {\n      var value, id;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              value = $(e.currentTarget).attr(\"value\");\n              id = $(e.currentTarget).attr(\"id\");\n\n              if (!onListClick && onFindOne) {\n                onFindOne(value, id);\n              }\n\n              if (!onListClick && onTypeChange) {\n                onTypeChange(value);\n              }\n\n              _context.t0 = onListClick;\n\n              if (!_context.t0) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 9;\n              return onListClick(value, id);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleOnListClick(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Handler - 리스트 : onKeyPress - 🚫 useless\n\n\n  var handleOnListKeyPress = function handleOnListKeyPress(e) {\n    e.preventDefault();\n  }; // Handler - 아이콘 : onClick\n\n\n  var handleOnSearchClick = function handleOnSearchClick() {\n    onSearch && onSearch(inputRef.current.value);\n  };\n\n  var classes = classNames({\n    JDsearchInput: true,\n    \"JDsearchInput--staticList\": staticList === true,\n    \"JDsearchInput--labeled\": label\n  });\n  useEffect(setList, [dataList]); // 유저 리스트가 변할때마다 새롭게 리스트를 찾습니다.\n  // 매칭된 리스트가 있을경우에 클래스를 붙여줍니다.\n\n  useEffect(function () {\n    if (isMatched) $(inputRef.current).addClass(\"JDsearchInput__input--matched\");\n  }, [isMatched]);\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"JDsearchInput__input_wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, label && React.createElement(\"span\", {\n    className: \"JDsearchInput__label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, label), React.createElement(\"input\", {\n    onFocus: handleOnFocus,\n    onBlur: handleOnBlur,\n    onKeyDown: handleOnKeyPress,\n    ref: inputRef,\n    className: \"JDsearchInput__input\",\n    onChange: handleChange,\n    placeholder: placeholder,\n    value: onTypeValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    tabIndex: 0,\n    role: \"button\",\n    onClick: handleOnSearchClick,\n    onKeyDown: handleOnKeyPress,\n    className: \"JDsearchInput__icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(Preloader, {\n    noAnimation: true,\n    loading: isLoading || false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }), isLoading || React.createElement(Icon, {\n    hover: true,\n    icon: \"magnifier\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  })), feedBackMessage && React.createElement(\"span\", {\n    className: \"JDsearchInput__feedBack\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, \"\".concat(feedBackMessage))), React.createElement(List, {\n    currentValue: onTypeValue,\n    onListKeyPress: handleOnListKeyPress,\n    onListClick: handleOnListClick,\n    refContainer: ulRef,\n    dataList: filteredDataList,\n    setIsMatched: setIsMatched,\n    alwaysListShow: alwaysListShow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }));\n};\n\nJDsearchInput.defaultProps = {\n  dataList: [],\n  staticList: false,\n  filter: true,\n  isMatched: false,\n  alwaysListShow: false,\n  isLoading: false,\n  onTypeValue: \"\",\n  placeholder: \"search\",\n  asName: \"name\",\n  asDetail: \"detail\",\n  onFindOne: function onFindOne() {},\n  setIsMatched: function setIsMatched() {},\n  onTypeChange: function onTypeChange() {},\n  maxCount: 999\n};\nexport default JDsearchInput;","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/atoms/searchInput/SearchInput.tsx"],"names":["$","React","useState","useRef","useEffect","classNames","List","Icon","Preloader","searchListFormat","JDsearchInput","dataList","staticList","placeholder","label","onFindOne","filter","onListClick","onTypeChange","onTypeValue","isMatched","setIsMatched","alwaysListShow","setTypeWhenFindOne","asName","asDetail","isLoading","feedBackMessage","maxCount","onSearch","asId","formatDataList","slice","filteredDataList","SetFilteredDataList","inputRef","ulRef","setList","value","current","filteredItems","item","name","toLowerCase","includes","autoScrollList","target","parent","scrollTop","offsetTop","handleOnKeyPress","e","key","preventDefault","selectedNode","find","get","currentTarget","attr","blur","children","length","prev","addClass","next","removeClass","classList","add","handleChange","handleOnFocus","setTimeout","handleOnBlur","handleOnListClick","id","handleOnListKeyPress","handleOnSearchClick","classes","defaultProps"],"mappings":"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","sourcesContent":["// 참고: https://codepen.io/manpreet/pen/EyXwrE\r\nimport $ from \"jquery\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, {useState, useRef, useEffect} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport List from \"./list\";\r\nimport \"./searchInput.scss\";\r\nimport Icon from \"../icons/Icons\";\r\nimport Preloader from \"../preloader/Preloader\";\r\nimport searchListFormat from \"../../utils/searchListFormater\";\r\nimport {isEmpty} from \"../../utils/utils\";\r\n\r\ninterface IProps {\r\n  dataList: Array<any>;\r\n  onListClick?(value: string | undefined, id: string | undefined): void;\r\n  placeholder?: string;\r\n  label?: string;\r\n  onFindOne?(label?: string | null, id?: string): any;\r\n  setIsMatched?(foo?: boolean): any;\r\n  onTypeChange?(foo?: string): any;\r\n  onSearch?(value?: string): any;\r\n  staticList?: boolean;\r\n  filter?: boolean;\r\n  isMatched?: boolean;\r\n  isLoading?: boolean;\r\n  alwaysListShow?: boolean;\r\n  setTypeWhenFindOne?: boolean;\r\n  onTypeValue?: string;\r\n  asName?: string;\r\n  asDetail?: string;\r\n  asId?: string;\r\n  feedBackMessage?: string;\r\n  maxCount?: number;\r\n}\r\n\r\nconst JDsearchInput: React.FC<IProps> = ({\r\n  dataList,\r\n  staticList,\r\n  placeholder,\r\n  label,\r\n  onFindOne,\r\n  filter,\r\n  onListClick,\r\n  onTypeChange,\r\n  onTypeValue,\r\n  isMatched,\r\n  setIsMatched,\r\n  alwaysListShow,\r\n  setTypeWhenFindOne,\r\n  asName,\r\n  asDetail,\r\n  isLoading,\r\n  feedBackMessage,\r\n  maxCount,\r\n  onSearch,\r\n  asId\r\n}) => {\r\n  // Naming Format\r\n  const formatDataList: Array<any> = searchListFormat(\r\n    dataList && dataList.slice(0, maxCount),\r\n    asName,\r\n    asDetail,\r\n    asId\r\n  );\r\n  const [filteredDataList, SetFilteredDataList] = useState(formatDataList);\r\n  const inputRef: any = useRef(null);\r\n  const ulRef: any = useRef(null);\r\n\r\n  //  value와 메치되는 리스트를 찾습니다.\r\n  const setList = (value = inputRef.current.value) => {\r\n    // CASE: 필터할경우\r\n    if (filter) {\r\n      let filteredItems = []; // if value == '' filter all\r\n      if (value) {\r\n        filteredItems = formatDataList.filter(item =>\r\n          item.name.toLowerCase().includes(value.toLowerCase())\r\n        );\r\n      }\r\n      SetFilteredDataList(filteredItems);\r\n    } else if (value || alwaysListShow) SetFilteredDataList(formatDataList);\r\n    // CASE: input has no value\r\n    if (!value && !alwaysListShow) SetFilteredDataList([]);\r\n  };\r\n\r\n  const autoScrollList = (target: HTMLElement) => {\r\n    $(target)\r\n      .parent()\r\n      .scrollTop(target.offsetTop);\r\n  };\r\n\r\n  // Handler - input : onKeyPress\r\n  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    // CASE: 엔터를 쳤을경우에\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      // 키보드에 의해서 선택된것 또는 그런게없다면 완벽하게 일치하는것을 찾음\r\n      const selectedNode =\r\n        $(ulRef.current)\r\n          .find(\".JDsearchInput__li--selected\")\r\n          .get(0) ||\r\n        $(ulRef.current)\r\n          .find(\".JDsearchInput__li--correspond\")\r\n          .get(0);\r\n      onSearch && onSearch(e.currentTarget.value);\r\n      // CASE: 키보드상 선택된 노드가 있을경우에\r\n      if (selectedNode) {\r\n        !isLoading &&\r\n          onFindOne &&\r\n          onFindOne($(selectedNode).attr(\"value\"), $(selectedNode).attr(\"id\"));\r\n\r\n        setTypeWhenFindOne &&\r\n          onTypeChange &&\r\n          onTypeChange($(selectedNode).attr(\"value\"));\r\n\r\n        $(inputRef.current).blur();\r\n      }\r\n    }\r\n\r\n    // ⌨️ 키보드 위아래로 움직일경우에 노드 선택\r\n    if (e.key === \"ArrowDown\" || e.key === \"ArrowUp\") {\r\n      e.preventDefault();\r\n      // CASE: ul has no children\r\n      if (!ulRef.current) return;\r\n      if (!ulRef.current.children) return;\r\n\r\n      const selectedNode = $(ulRef.current).find(\r\n        \".JDsearchInput__li--selected\"\r\n      );\r\n\r\n      // CASE: li is selected\r\n      if (selectedNode.length) {\r\n        // active select\r\n        if (e.key === \"ArrowUp\") {\r\n          const target = $(selectedNode).prev();\r\n          if (!target.get(0)) return;\r\n          target.addClass(\"JDsearchInput__li--selected\");\r\n          autoScrollList(target.get(0));\r\n        } else {\r\n          const target = $(selectedNode).next();\r\n          if (!target.get(0)) return;\r\n          target.addClass(\"JDsearchInput__li--selected\");\r\n          autoScrollList(target.get(0));\r\n        }\r\n        // remove select\r\n        $(selectedNode).removeClass(\"JDsearchInput__li--selected\");\r\n\r\n        // first select\r\n      } else if (e.key === \"ArrowDown\")\r\n        ulRef.current.children[0].classList.add(\"JDsearchInput__li--selected\");\r\n    }\r\n  };\r\n\r\n  // Handler - 인풋 : onChange\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    if (filter) setList(e.target.value);\r\n    onTypeChange && onTypeChange(e.target.value);\r\n  };\r\n\r\n  // Handler - 인풋 : onFocus\r\n  const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    setTimeout(() => {\r\n      $(ulRef.current).removeClass(\"JDsearchInput__ul--hide\");\r\n    }, 100);\r\n  };\r\n\r\n  // Handler - 인풋 : onBlur\r\n  const handleOnBlur = (e: React.FocusEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n\r\n    // 여기 setTimeOut 이 있는이유는 이벤트 파서가 도착하기전에 css 가 먼저 반응하기 떄문이다.\r\n    setTimeout(() => {\r\n      $(ulRef.current).addClass(\"JDsearchInput__ul--hide\");\r\n    }, 500);\r\n  };\r\n\r\n  // Handler - 리스트 : onClick\r\n  const handleOnListClick = async (e: React.MouseEvent<HTMLElement>) => {\r\n    e.preventDefault();\r\n    const value = $(e.currentTarget).attr(\"value\");\r\n    const id = $(e.currentTarget).attr(\"id\");\r\n    if (!onListClick && onFindOne) {\r\n      onFindOne(value, id);\r\n    }\r\n    if (!onListClick && onTypeChange) {\r\n      onTypeChange(value);\r\n    }\r\n    onListClick && (await onListClick(value, id));\r\n    // $(inputRef.current).val(value || \"\");\r\n    // onFindOne && onFindOne(value, id);\r\n  };\r\n\r\n  // Handler - 리스트 : onKeyPress - 🚫 useless\r\n  const handleOnListKeyPress = (e: any) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  // Handler - 아이콘 : onClick\r\n  const handleOnSearchClick = () => {\r\n    onSearch && onSearch(inputRef.current.value);\r\n  };\r\n\r\n  const classes = classNames({\r\n    JDsearchInput: true,\r\n    \"JDsearchInput--staticList\": staticList === true,\r\n    \"JDsearchInput--labeled\": label\r\n  });\r\n\r\n  useEffect(setList, [dataList]); // 유저 리스트가 변할때마다 새롭게 리스트를 찾습니다.\r\n  // 매칭된 리스트가 있을경우에 클래스를 붙여줍니다.\r\n  useEffect(() => {\r\n    if (isMatched)\r\n      $(inputRef.current).addClass(\"JDsearchInput__input--matched\");\r\n  }, [isMatched]);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"JDsearchInput__input_wrapper\">\r\n        {label && <span className=\"JDsearchInput__label\">{label}</span>}\r\n        <input\r\n          onFocus={handleOnFocus}\r\n          onBlur={handleOnBlur}\r\n          onKeyDown={handleOnKeyPress}\r\n          ref={inputRef}\r\n          className=\"JDsearchInput__input\"\r\n          onChange={handleChange}\r\n          placeholder={placeholder}\r\n          value={onTypeValue}\r\n        />\r\n        <span\r\n          tabIndex={0}\r\n          role=\"button\"\r\n          onClick={handleOnSearchClick}\r\n          onKeyDown={handleOnKeyPress}\r\n          className=\"JDsearchInput__icon\"\r\n        >\r\n          <Preloader noAnimation loading={isLoading || false} />\r\n          {isLoading || <Icon hover icon=\"magnifier\" />}\r\n        </span>\r\n        {feedBackMessage && (\r\n          <span className=\"JDsearchInput__feedBack\">{`${feedBackMessage}`}</span>\r\n        )}\r\n      </div>\r\n      <List\r\n        currentValue={onTypeValue}\r\n        onListKeyPress={handleOnListKeyPress}\r\n        onListClick={handleOnListClick}\r\n        refContainer={ulRef}\r\n        dataList={filteredDataList}\r\n        setIsMatched={setIsMatched}\r\n        alwaysListShow={alwaysListShow}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nJDsearchInput.defaultProps = {\r\n  dataList: [],\r\n  staticList: false,\r\n  filter: true,\r\n  isMatched: false,\r\n  alwaysListShow: false,\r\n  isLoading: false,\r\n  onTypeValue: \"\",\r\n  placeholder: \"search\",\r\n  asName: \"name\",\r\n  asDetail: \"detail\",\r\n  onFindOne: () => {},\r\n  setIsMatched: () => {},\r\n  onTypeChange: () => {},\r\n  maxCount: 999\r\n};\r\nexport default JDsearchInput;\r\n"]},"metadata":{},"sourceType":"module"}