{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\apolloClient.tsx\";\nimport { ApolloClient } from \"apollo-client\";\nimport React from \"react\";\nimport dotenv from \"dotenv\";\nimport uri from \"./uri\";\nimport resolvers from \"./resolvers\";\nimport { toast } from \"react-toastify\";\nimport { InMemoryCache, IntrospectionFragmentMatcher } from \"apollo-cache-inmemory\";\nimport introspectionQueryResultData from \"./fragmentTypes.json\";\nimport ToastError from \"./components/toasts/ErrorToast\";\nimport { JDlang } from \"./langs/JDlang\";\nimport { CURRENT_LANG } from \"./hooks/hook\";\nimport { Observable, ApolloLink } from \"apollo-link\";\nimport { withClientState } from \"apollo-link-state\";\nimport { onError } from \"apollo-link-error\";\nimport { createUploadLink } from \"apollo-upload-client\";\nvar fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData: introspectionQueryResultData\n});\n\nvar request =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(operation) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            operation.setContext({\n              headers: {\n                \"X-JWT\": localStorage.getItem(\"jwt\") || \"\",\n                \"HP-Key\": sessionStorage.getItem(\"hpk\") || \"\",\n                \"HM-Key\": sessionStorage.getItem(\"hmk\") || \"\"\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function request(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar requestLink = new ApolloLink(function (operation, forward) {\n  return new Observable(function (observer) {\n    var handle;\n    Promise.resolve(operation).then(function (oper) {\n      return request(oper);\n    }).then(function () {\n      handle = forward(operation).subscribe({\n        next: observer.next.bind(observer),\n        error: observer.error.bind(observer),\n        complete: observer.complete.bind(observer)\n      });\n    }).catch(observer.error.bind(observer));\n    return function () {\n      if (handle) handle.unsubscribe();\n    };\n  });\n});\nvar cache = new InMemoryCache({\n  addTypename: true,\n  fragmentMatcher: fragmentMatcher\n});\n\nvar hanldeError = function hanldeError(_ref2) {\n  var graphQLErrors = _ref2.graphQLErrors,\n      networkError = _ref2.networkError;\n\n  if (graphQLErrors) {\n    graphQLErrors.map(function (_ref3) {\n      var message = _ref3.message,\n          locations = _ref3.locations,\n          path = _ref3.path;\n      console.warn(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n    });\n    toast.warn(React.createElement(ToastError, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  } else if (networkError) {\n    console.error(networkError);\n    console.error(\"[Network error]: \".concat(networkError));\n    toast.warn(JDlang(CURRENT_LANG, \"check_net_status\")); // 로그아웃 처리\n    // localStorage.removeItem(\"jwt\");\n  }\n};\n\ndotenv.config({\n  path: \"../.env\"\n});\nvar clinetStatuss = {\n  defaults: {\n    auth: {\n      __typename: \"Auth\",\n      isLogIn: Boolean(localStorage.getItem(\"jwt\"))\n    },\n    lastSelectedHouse: {\n      __typename: \"House\",\n      value: localStorage.getItem(\"selectId\"),\n      label: localStorage.getItem(\"selectHouseLabel\")\n    }\n  },\n  resolvers: resolvers,\n  cache: cache\n};\nvar client = new ApolloClient({\n  link: ApolloLink.from([onError(hanldeError), requestLink, withClientState(clinetStatuss), createUploadLink({\n    uri: uri,\n    credentials: \"omit\"\n  })]),\n  cache: cache\n});\nexport default client;","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/apolloClient.tsx"],"names":["ApolloClient","React","dotenv","uri","resolvers","toast","InMemoryCache","IntrospectionFragmentMatcher","introspectionQueryResultData","ToastError","JDlang","CURRENT_LANG","Observable","ApolloLink","withClientState","onError","createUploadLink","fragmentMatcher","request","operation","setContext","headers","localStorage","getItem","sessionStorage","requestLink","forward","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","unsubscribe","cache","addTypename","hanldeError","graphQLErrors","networkError","map","message","locations","path","console","warn","config","clinetStatuss","defaults","auth","__typename","isLogIn","Boolean","lastSelectedHouse","value","label","client","link","from","credentials"],"mappings":"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","sourcesContent":["import { ApolloClient } from \"apollo-client\";\r\nimport React from \"react\";\r\nimport dotenv from \"dotenv\";\r\nimport uri from \"./uri\";\r\nimport resolvers from \"./resolvers\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  InMemoryCache,\r\n  IntrospectionFragmentMatcher\r\n} from \"apollo-cache-inmemory\";\r\nimport introspectionQueryResultData from \"./fragmentTypes.json\";\r\nimport ToastError from \"./components/toasts/ErrorToast\";\r\nimport { JDlang } from \"./langs/JDlang\";\r\nimport { CURRENT_LANG } from \"./hooks/hook\";\r\nimport { Observable, ApolloLink } from \"apollo-link\";\r\nimport { withClientState } from \"apollo-link-state\";\r\nimport { onError, ErrorResponse } from \"apollo-link-error\";\r\nimport { createUploadLink } from \"apollo-upload-client\";\r\n\r\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\r\n  introspectionQueryResultData\r\n});\r\n\r\nconst request = async (operation: any) => {\r\n  operation.setContext({\r\n    headers: {\r\n      \"X-JWT\": localStorage.getItem(\"jwt\") || \"\",\r\n      \"HP-Key\": sessionStorage.getItem(\"hpk\") || \"\",\r\n      \"HM-Key\": sessionStorage.getItem(\"hmk\") || \"\"\r\n    }\r\n  });\r\n};\r\n\r\nconst requestLink = new ApolloLink(\r\n  (operation, forward) =>\r\n    new Observable((observer: any) => {\r\n      let handle: any;\r\n      Promise.resolve(operation)\r\n        .then(oper => request(oper))\r\n        .then(() => {\r\n          handle = forward(operation).subscribe({\r\n            next: observer.next.bind(observer),\r\n            error: observer.error.bind(observer),\r\n            complete: observer.complete.bind(observer)\r\n          });\r\n        })\r\n        .catch(observer.error.bind(observer));\r\n\r\n      return () => {\r\n        if (handle) handle.unsubscribe();\r\n      };\r\n    })\r\n);\r\n\r\nconst cache = new InMemoryCache({ addTypename: true, fragmentMatcher });\r\n\r\nconst hanldeError = ({ graphQLErrors, networkError }: ErrorResponse) => {\r\n  if (graphQLErrors) {\r\n    graphQLErrors.map(({ message, locations, path }) => {\r\n      console.warn(\r\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n      );\r\n    });\r\n    toast.warn(<ToastError />);\r\n  } else if (networkError) {\r\n    console.error(networkError);\r\n    console.error(`[Network error]: ${networkError}`);\r\n    toast.warn(JDlang(CURRENT_LANG, \"check_net_status\"));\r\n    // 로그아웃 처리\r\n    // localStorage.removeItem(\"jwt\");\r\n  }\r\n};\r\n\r\ndotenv.config({\r\n  path: \"../.env\"\r\n});\r\n\r\nconst clinetStatuss = {\r\n  defaults: {\r\n    auth: {\r\n      __typename: \"Auth\",\r\n      isLogIn: Boolean(localStorage.getItem(\"jwt\"))\r\n    },\r\n    lastSelectedHouse: {\r\n      __typename: \"House\",\r\n      value: localStorage.getItem(\"selectId\"),\r\n      label: localStorage.getItem(\"selectHouseLabel\")\r\n    }\r\n  },\r\n  resolvers,\r\n  cache\r\n};\r\n\r\nconst client = new ApolloClient({\r\n  link: ApolloLink.from([\r\n    onError(hanldeError),\r\n    requestLink,\r\n    withClientState(clinetStatuss),\r\n    createUploadLink({\r\n      uri,\r\n      credentials: \"omit\"\r\n    })\r\n  ]),\r\n  cache\r\n});\r\n\r\nexport default client;\r\n"]},"metadata":{},"sourceType":"module"}