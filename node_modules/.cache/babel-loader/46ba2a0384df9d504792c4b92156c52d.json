{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\atoms\\\\modal\\\\Modal.tsx\";\nimport React, { Fragment, useState } from \"react\";\nimport ReactModal from \"react-modal\";\nimport \"./Modal.scss\";\nimport classNames from \"classnames\";\nimport Button from \"../button/Button\";\nimport { LANG } from \"../../hooks/hook\";\nimport { s4 } from \"../../utils/utils\";\nimport JDanimation, { Animation } from \"../animation/Animations\";\n\n// let CAN_CLOSE_MODAL = false;\nvar JDmodal = function JDmodal(_ref) {\n  var info = _ref.info,\n      center = _ref.center,\n      className = _ref.className,\n      isUnderHeader = _ref.isUnderHeader,\n      isOpen = _ref.isOpen,\n      minContentsWidth = _ref.minContentsWidth,\n      minWidth = _ref.minWidth,\n      closeModal = _ref.closeModal,\n      isAlert = _ref.isAlert,\n      children = _ref.children,\n      confirm = _ref.confirm,\n      paddingSize = _ref.paddingSize,\n      confirmCallBackFn = _ref.confirmCallBackFn,\n      visibleOverflow = _ref.visibleOverflow,\n      trueMessage = _ref.trueMessage,\n      _ref$noAnimation = _ref.noAnimation,\n      noAnimation = _ref$noAnimation === void 0 ? true : _ref$noAnimation,\n      falseMessage = _ref.falseMessage,\n      _ref$appElement = _ref.appElement,\n      appElement = _ref$appElement === void 0 ? document.getElementById(\"root\") || undefined : _ref$appElement,\n      props = _objectWithoutProperties(_ref, [\"info\", \"center\", \"className\", \"isUnderHeader\", \"isOpen\", \"minContentsWidth\", \"minWidth\", \"closeModal\", \"isAlert\", \"children\", \"confirm\", \"paddingSize\", \"confirmCallBackFn\", \"visibleOverflow\", \"trueMessage\", \"noAnimation\", \"falseMessage\", \"appElement\"]);\n\n  var _useState = useState(!noAnimation),\n      _useState2 = _slicedToArray(_useState, 2),\n      shouldAnimation = _useState2[0],\n      setShouldAnimation = _useState2[1]; // 여기에서 info로 들어온것과 openModal 명렁으로 들어온것들 조합함\n\n\n  var inInfo = function () {\n    var inInInfo = {};\n\n    if (info && info.trueBtns) {\n      inInInfo.trueMessage = info.trueBtns || trueMessage;\n    }\n\n    if (info && info.falseBtns) {\n      inInInfo.falseMessage = info.falseBtns || falseMessage;\n    }\n\n    return inInInfo;\n  }(); // 👿 curtton => overlay\n\n\n  var overlayClassNames = classNames(\"JDmodal-overlay\", undefined, {\n    \"JDmodal-overlay--noAnimation\": !shouldAnimation,\n    \"JDmodal-overlay--underHeader\": isUnderHeader\n  });\n  var classes = classNames(\"Modal JDmodal\", className, {\n    \"JDmodal--center\": center,\n    \"JDmodal--visibleOverflow\": visibleOverflow,\n    \"JDmodal--alert\": isAlert || confirm,\n    \"JDmodal--alertWaring\": info && info.thema === \"warn\",\n    \"JDmodal--noAnimation\": !shouldAnimation,\n    \"JDmodal--paddingLarge\": paddingSize === \"large\"\n  });\n  var defualtJDmodalProps = {\n    className: \"Modal \".concat(classes),\n    overlayClassName: \"Overlay\"\n  };\n\n  var hanldeClickBtn = function hanldeClickBtn(flag, key) {\n    confirmCallBackFn && confirmCallBackFn(flag, key);\n    info.callBack && info.callBack(flag, key);\n    closeModal();\n  };\n\n  var sharedTrueBtnProp = {\n    thema: \"primary\",\n    mode: \"flat\",\n    onClick: function onClick() {\n      hanldeClickBtn(true);\n    },\n    label: trueMessage || LANG(\"confirm\")\n  };\n  var sharedFalseBtnProp = {\n    mode: \"flat\",\n    thema: \"warn\",\n    onClick: function onClick() {\n      hanldeClickBtn(false);\n    },\n    label: falseMessage || LANG(\"cancel\")\n  };\n\n  var misClickPreventCloseModal = function misClickPreventCloseModal() {\n    // if (CAN_CLOSE_MODAL) {\n    closeModal(); // }\n  };\n\n  var modalStyle = {\n    minWidth: minWidth\n  };\n  var modalContentsStyle = {\n    minWidth: minContentsWidth\n  };\n\n  var getChildren = function getChildren() {\n    return React.createElement(\"div\", {\n      style: modalContentsStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, children, info && info.children, typeof info === \"string\" && info, info && info.txt);\n  };\n\n  return React.createElement(JDanimation, {\n    animation: [Animation.zoomIn, Animation.zoomOut],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(ReactModal, Object.assign({\n    isOpen: isOpen,\n    onRequestClose: misClickPreventCloseModal,\n    appElement: appElement\n  }, props, defualtJDmodalProps, {\n    style: {\n      content: _objectSpread({}, modalStyle)\n    },\n    overlayClassName: overlayClassNames,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), getChildren(), confirm && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"JDmodal__endSection JDmodal__endSection--confirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, inInfo.trueMessage instanceof Array ? inInfo.trueMessage.map(function (message) {\n    return React.createElement(Button, Object.assign({\n      key: s4()\n    }, sharedTrueBtnProp, {\n      label: \"\".concat(message.msg),\n      onClick: function onClick() {\n        hanldeClickBtn(true, message.callBackKey);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }));\n  }) : React.createElement(Button, Object.assign({}, sharedTrueBtnProp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  })), inInfo.falseMessage instanceof Array ? inInfo.falseMessage.map(function (message) {\n    return React.createElement(Button, Object.assign({\n      key: s4()\n    }, sharedFalseBtnProp, {\n      label: \"\".concat(message),\n      onClick: function onClick() {\n        hanldeClickBtn(false, message.callBackKey);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }));\n  }) : React.createElement(Button, Object.assign({}, sharedFalseBtnProp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }))))));\n};\n\nJDmodal.defaultProps = {\n  center: false\n};\nexport default JDmodal;\nvar JDtoastModal = JDmodal;\nexport { JDtoastModal };","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/atoms/modal/Modal.tsx"],"names":["React","Fragment","useState","ReactModal","classNames","Button","LANG","s4","JDanimation","Animation","JDmodal","info","center","className","isUnderHeader","isOpen","minContentsWidth","minWidth","closeModal","isAlert","children","confirm","paddingSize","confirmCallBackFn","visibleOverflow","trueMessage","noAnimation","falseMessage","appElement","document","getElementById","undefined","props","shouldAnimation","setShouldAnimation","inInfo","inInInfo","trueBtns","falseBtns","overlayClassNames","classes","thema","defualtJDmodalProps","overlayClassName","hanldeClickBtn","flag","key","callBack","sharedTrueBtnProp","mode","onClick","label","sharedFalseBtnProp","misClickPreventCloseModal","modalStyle","modalContentsStyle","getChildren","txt","zoomIn","zoomOut","content","Array","map","message","msg","callBackKey","defaultProps","JDtoastModal"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport ReactModal from \"react-modal\";\r\nimport \"./Modal.scss\";\r\nimport classNames from \"classnames\";\r\nimport Button from \"../button/Button\";\r\nimport { IUseModal, LANG } from \"../../hooks/hook\";\r\nimport { s4 } from \"../../utils/utils\";\r\nimport JDanimation, { Animation } from \"../animation/Animations\";\r\n\r\ninterface IProps extends ReactModal.Props, IUseModal {\r\n  center?: boolean;\r\n  className?: string;\r\n  isAlert?: boolean;\r\n  isUnderHeader?: boolean;\r\n  confirm?: boolean;\r\n  children?: any;\r\n  minContentsWidth?: string;\r\n  noAnimation?: boolean;\r\n  minWidth?: string;\r\n  paddingSize?: \"large\";\r\n  visibleOverflow?: boolean;\r\n  falseMessage?: string | any[];\r\n  trueMessage?: string | any[];\r\n  confirmCallBackFn?(flag: boolean, key?: string): any;\r\n}\r\n\r\n// let CAN_CLOSE_MODAL = false;\r\n\r\nconst JDmodal: React.SFC<IProps> = ({\r\n  info,\r\n  center,\r\n  className,\r\n  isUnderHeader,\r\n  isOpen,\r\n  minContentsWidth,\r\n  minWidth,\r\n  closeModal,\r\n  isAlert,\r\n  children,\r\n  confirm,\r\n  paddingSize,\r\n  confirmCallBackFn,\r\n  visibleOverflow,\r\n  trueMessage,\r\n  noAnimation = true,\r\n  falseMessage,\r\n  appElement = document.getElementById(\"root\") || undefined,\r\n  ...props\r\n}) => {\r\n  const [shouldAnimation, setShouldAnimation] = useState(!noAnimation);\r\n\r\n  // 여기에서 info로 들어온것과 openModal 명렁으로 들어온것들 조합함\r\n  const inInfo = (() => {\r\n    let inInInfo: any = {};\r\n\r\n    if (info && info.trueBtns) {\r\n      inInInfo.trueMessage = info.trueBtns || trueMessage;\r\n    }\r\n    if (info && info.falseBtns) {\r\n      inInInfo.falseMessage = info.falseBtns || falseMessage;\r\n    }\r\n\r\n    return inInInfo;\r\n  })();\r\n\r\n  // 👿 curtton => overlay\r\n\r\n  const overlayClassNames = classNames(\"JDmodal-overlay\", undefined, {\r\n    \"JDmodal-overlay--noAnimation\": !shouldAnimation,\r\n    \"JDmodal-overlay--underHeader\": isUnderHeader\r\n  });\r\n\r\n  const classes = classNames(\"Modal JDmodal\", className, {\r\n    \"JDmodal--center\": center,\r\n    \"JDmodal--visibleOverflow\": visibleOverflow,\r\n    \"JDmodal--alert\": isAlert || confirm,\r\n    \"JDmodal--alertWaring\": info && info.thema === \"warn\",\r\n    \"JDmodal--noAnimation\": !shouldAnimation,\r\n    \"JDmodal--paddingLarge\": paddingSize === \"large\"\r\n  });\r\n\r\n  const defualtJDmodalProps = {\r\n    className: `Modal ${classes}`,\r\n    overlayClassName: \"Overlay\"\r\n  };\r\n\r\n  const hanldeClickBtn = (flag: boolean, key?: string) => {\r\n    confirmCallBackFn && confirmCallBackFn(flag, key);\r\n    info.callBack && info.callBack(flag, key);\r\n    closeModal();\r\n  };\r\n\r\n  const sharedTrueBtnProp: any = {\r\n    thema: \"primary\",\r\n    mode: \"flat\",\r\n    onClick: () => {\r\n      hanldeClickBtn(true);\r\n    },\r\n    label: trueMessage || LANG(\"confirm\")\r\n  };\r\n\r\n  const sharedFalseBtnProp: any = {\r\n    mode: \"flat\",\r\n    thema: \"warn\",\r\n    onClick: () => {\r\n      hanldeClickBtn(false);\r\n    },\r\n    label: falseMessage || LANG(\"cancel\")\r\n  };\r\n\r\n  const misClickPreventCloseModal = () => {\r\n    // if (CAN_CLOSE_MODAL) {\r\n    closeModal();\r\n    // }\r\n  };\r\n\r\n  const modalStyle = {\r\n    minWidth\r\n  };\r\n\r\n  const modalContentsStyle = {\r\n    minWidth: minContentsWidth\r\n  };\r\n\r\n  const getChildren = () => (\r\n    <div style={modalContentsStyle}>\r\n      {children}\r\n      {info && info.children}\r\n      {typeof info === \"string\" && info}\r\n      {info && info.txt}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <JDanimation animation={[Animation.zoomIn, Animation.zoomOut]}>\r\n      <ReactModal\r\n        isOpen={isOpen}\r\n        onRequestClose={misClickPreventCloseModal}\r\n        appElement={appElement}\r\n        {...props}\r\n        {...defualtJDmodalProps}\r\n        style={{ content: { ...modalStyle } }}\r\n        overlayClassName={overlayClassNames}\r\n      >\r\n        {getChildren()}\r\n        {confirm && (\r\n          <Fragment>\r\n            <div className=\"JDmodal__endSection JDmodal__endSection--confirm\">\r\n              {inInfo.trueMessage instanceof Array ? (\r\n                inInfo.trueMessage.map((message: any) => (\r\n                  <Button\r\n                    key={s4()}\r\n                    {...sharedTrueBtnProp}\r\n                    label={`${message.msg}`}\r\n                    onClick={() => {\r\n                      hanldeClickBtn(true, message.callBackKey);\r\n                    }}\r\n                  />\r\n                ))\r\n              ) : (\r\n                <Button {...sharedTrueBtnProp} />\r\n              )}\r\n              {inInfo.falseMessage instanceof Array ? (\r\n                inInfo.falseMessage.map((message: any) => (\r\n                  <Button\r\n                    key={s4()}\r\n                    {...sharedFalseBtnProp}\r\n                    label={`${message}`}\r\n                    onClick={() => {\r\n                      hanldeClickBtn(false, message.callBackKey);\r\n                    }}\r\n                  />\r\n                ))\r\n              ) : (\r\n                <Button {...sharedFalseBtnProp} />\r\n              )}\r\n            </div>\r\n          </Fragment>\r\n        )}\r\n      </ReactModal>\r\n    </JDanimation>\r\n  );\r\n};\r\n\r\nJDmodal.defaultProps = {\r\n  center: false\r\n};\r\n\r\nexport default JDmodal;\r\n\r\nconst JDtoastModal = JDmodal;\r\nexport { JDtoastModal };\r\n"]},"metadata":{},"sourceType":"module"}