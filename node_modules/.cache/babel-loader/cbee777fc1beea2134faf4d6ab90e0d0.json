{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\middleServer\\\\assig\\\\AssigTimelineWrap.tsx\";\n\n/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useState } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport moment from \"moment-timezone\";\nimport _ from \"lodash\";\nimport assigDefaultProps from \"./timelineConfig\";\nimport { useDayPicker, LANG } from \"../../../hooks/hook\";\nimport { setMidNight, queryDataFormater, onCompletedMessage, s4 } from \"../../../utils/utils\";\nimport EerrorProtect from \"../../../utils/errProtect\";\nimport { BookingStatus } from \"../../../types/enum\";\nimport { ALLOCATE_GUEST_TO_ROOM, UPDATE_BOOKING, DELETE_GUEST, DELETE_BLOCK, GET_ALL_ROOMTYPES_WITH_GUESTS_WITH_ITEM, CREATE_BLOCK, DELETE_BOOKING, UPDATE_BLOCK_OPTION } from \"../../../queries\";\nimport AssigTimeline from \"./AssigTimeline\";\nimport { to4YMMDD } from \"../../../utils/setMidNight\";\nimport { roomDataManufacturer } from \"./components/groupDataMenufacture\";\nimport reactWindowSize from \"react-window-size\";\nimport { guestsDataManufacturer } from \"./components/guestsDataManufacturer\";\nimport { blockDataManufacturer } from \"./components/blockDataManufacturer\";\nmoment.tz.setDefault(\"UTC\");\n\nvar UpdateBookingMu =\n/*#__PURE__*/\nfunction (_Mutation) {\n  _inherits(UpdateBookingMu, _Mutation);\n\n  function UpdateBookingMu() {\n    _classCallCheck(this, UpdateBookingMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UpdateBookingMu).apply(this, arguments));\n  }\n\n  return UpdateBookingMu;\n}(Mutation);\n\nvar CreateBlockMu =\n/*#__PURE__*/\nfunction (_Mutation2) {\n  _inherits(CreateBlockMu, _Mutation2);\n\n  function CreateBlockMu() {\n    _classCallCheck(this, CreateBlockMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CreateBlockMu).apply(this, arguments));\n  }\n\n  return CreateBlockMu;\n}(Mutation);\n\nvar DeleteBookingMu =\n/*#__PURE__*/\nfunction (_Mutation3) {\n  _inherits(DeleteBookingMu, _Mutation3);\n\n  function DeleteBookingMu() {\n    _classCallCheck(this, DeleteBookingMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DeleteBookingMu).apply(this, arguments));\n  }\n\n  return DeleteBookingMu;\n}(Mutation);\n\nvar UpdateBlockOpMu =\n/*#__PURE__*/\nfunction (_Mutation4) {\n  _inherits(UpdateBlockOpMu, _Mutation4);\n\n  function UpdateBlockOpMu() {\n    _classCallCheck(this, UpdateBlockOpMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UpdateBlockOpMu).apply(this, arguments));\n  }\n\n  return UpdateBlockOpMu;\n}(Mutation);\n\nvar GetAllRoomTypeWithGuestQuery =\n/*#__PURE__*/\nfunction (_Query) {\n  _inherits(GetAllRoomTypeWithGuestQuery, _Query);\n\n  function GetAllRoomTypeWithGuestQuery() {\n    _classCallCheck(this, GetAllRoomTypeWithGuestQuery);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GetAllRoomTypeWithGuestQuery).apply(this, arguments));\n  }\n\n  return GetAllRoomTypeWithGuestQuery;\n}(Query);\n\nvar AllocateGuestToRoomMu =\n/*#__PURE__*/\nfunction (_Mutation5) {\n  _inherits(AllocateGuestToRoomMu, _Mutation5);\n\n  function AllocateGuestToRoomMu() {\n    _classCallCheck(this, AllocateGuestToRoomMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AllocateGuestToRoomMu).apply(this, arguments));\n  }\n\n  return AllocateGuestToRoomMu;\n}(Mutation);\n\nvar DeleteGuestMu =\n/*#__PURE__*/\nfunction (_Mutation6) {\n  _inherits(DeleteGuestMu, _Mutation6);\n\n  function DeleteGuestMu() {\n    _classCallCheck(this, DeleteGuestMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DeleteGuestMu).apply(this, arguments));\n  }\n\n  return DeleteGuestMu;\n}(Mutation);\n\nvar DeleteBlockMu =\n/*#__PURE__*/\nfunction (_Mutation7) {\n  _inherits(DeleteBlockMu, _Mutation7);\n\n  function DeleteBlockMu() {\n    _classCallCheck(this, DeleteBlockMu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DeleteBlockMu).apply(this, arguments));\n  }\n\n  return DeleteBlockMu;\n}(Mutation);\n\nvar AssigTimelineWrap = function AssigTimelineWrap(_ref) {\n  var context = _ref.context,\n      windowHeight = _ref.windowHeight,\n      windowWidth = _ref.windowWidth;\n  var houseConfig = context.houseConfig,\n      house = context.house;\n  var dayPickerHook = useDayPicker(new Date(), new Date());\n\n  var _useState = useState(s4()),\n      _useState2 = _slicedToArray(_useState, 2),\n      reloadKey = _useState2[0],\n      setReloadKey = _useState2[1];\n\n  var defaultStartDate = dayPickerHook.from ? dayPickerHook.from : moment().local().toDate();\n  var defaultEndDate = dayPickerHook.from ? moment(dayPickerHook.from).local().add(10, \"days\").toDate() : moment().local().add(10, \"days\").toDate();\n\n  var _useState3 = useState({\n    start: setMidNight(moment().subtract(5, \"days\").valueOf()),\n    end: setMidNight(moment().add(14, \"days\").valueOf())\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataTime = _useState4[0],\n      setDataTime = _useState4[1];\n\n  var reloadTimeline = function reloadTimeline() {\n    setReloadKey(s4());\n  };\n\n  var updateVariables = {\n    houseId: house._id,\n    checkIn: to4YMMDD(moment(dataTime.start)),\n    checkOut: to4YMMDD(moment(dataTime.end))\n  };\n  moment.tz.setDefault(\"UTC\");\n  return React.createElement(GetAllRoomTypeWithGuestQuery, {\n    fetchPolicy: \"network-only\",\n    notifyOnNetworkStatusChange: true,\n    pollInterval: houseConfig.pollingPeriod ? houseConfig.pollingPeriod.period : undefined,\n    query: GET_ALL_ROOMTYPES_WITH_GUESTS_WITH_ITEM,\n    variables: _objectSpread({}, updateVariables, {\n      bookingStatuses: [BookingStatus.COMPLETE, BookingStatus.PROGRESSING]\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, function (_ref2) {\n    var data = _ref2.data,\n        loading = _ref2.loading,\n        refetch = _ref2.refetch,\n        stopPolling = _ref2.stopPolling,\n        startPolling = _ref2.startPolling,\n        networkStatus = _ref2.networkStatus;\n    var roomTypesData = queryDataFormater(data, \"GetAllRoomType\", \"roomTypes\", undefined); // 원본데이터\n\n    var guestsData = queryDataFormater(data, \"GetGuests\", \"guests\", []) || [];\n    var blocks = queryDataFormater(data, \"GetBlocks\", \"blocks\", []) || [];\n    var formatedRoomData = roomDataManufacturer(roomTypesData); // 타임라인을 위해 가공된 데이터\n\n    var formatedGuestsData = guestsDataManufacturer(guestsData); // 타임라인을 위해 가공된 데이터\n\n    var formatedBlockData = blockDataManufacturer(blocks); // 타임라인을 위해 가공된 데이터\n\n    var formatedItemData = formatedGuestsData.concat(formatedBlockData).map(function (block, index) {\n      block.itemIndex = index;\n      return block;\n    });\n    return React.createElement(AllocateGuestToRoomMu, {\n      onCompleted: function onCompleted(_ref3) {\n        var AllocateGuestToRoom = _ref3.AllocateGuestToRoom;\n        onCompletedMessage(AllocateGuestToRoom, LANG(\"assig_completed\"), LANG(\"assig_failed\"));\n      },\n      update: function update(cache, _ref4) {\n        var inData = _ref4.data;\n        var cacheData = cache.readQuery({\n          query: GET_ALL_ROOMTYPES_WITH_GUESTS_WITH_ITEM,\n          variables: updateVariables\n        });\n\n        if (cacheData && inData) {\n          var result = _.unionBy([inData.AllocateGuestToRoom.guest], cacheData.GetGuests.guests, \"_id\");\n\n          cache.writeQuery({\n            query: GET_ALL_ROOMTYPES_WITH_GUESTS_WITH_ITEM,\n            data: {\n              GetAllRoomType: cacheData.GetAllRoomType,\n              GetGuests: _objectSpread({}, cacheData.GetGuests, {\n                guests: result\n              })\n            }\n          });\n        }\n      },\n      mutation: ALLOCATE_GUEST_TO_ROOM,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, function (allocateMu) {\n      return React.createElement(UpdateBookingMu, {\n        mutation: UPDATE_BOOKING,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, function (updateBookingMu, _ref5) {\n        var updateBookingLoading = _ref5.loading;\n        return React.createElement(DeleteGuestMu, {\n          onCompleted: function onCompleted(_ref6) {\n            var DeleteGuests = _ref6.DeleteGuests;\n            onCompletedMessage(DeleteGuests, LANG(\"delete_completed\"), LANG(\"delete_failed\"));\n          },\n          mutation: DELETE_GUEST,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, function (deleteGuestMu, _ref7) {\n          var deleteGuestLoading = _ref7.loading;\n          return React.createElement(CreateBlockMu, {\n            onCompleted: function onCompleted(_ref8) {\n              var CreateBlock = _ref8.CreateBlock;\n              onCompletedMessage(CreateBlock, LANG(\"block_room_completed\"), LANG(\"block_room_failed\"));\n            },\n            mutation: CREATE_BLOCK,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223\n            },\n            __self: this\n          }, function (createBlockMu, _ref9) {\n            var createBlockLoading = _ref9.loading;\n            return React.createElement(DeleteBlockMu, {\n              onCompleted: function onCompleted(_ref10) {\n                var DeleteBlock = _ref10.DeleteBlock;\n                onCompletedMessage(DeleteBlock, LANG(\"room_block_release\"), LANG(\"room_block_release_fail\"));\n              },\n              mutation: DELETE_BLOCK,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 234\n              },\n              __self: this\n            }, function (deleteBlockMu, _ref11) {\n              var deleteBlockLoading = _ref11.loading;\n              return React.createElement(DeleteBookingMu, {\n                mutation: DELETE_BOOKING,\n                onCompleted: function onCompleted(_ref12) {\n                  var DeleteBooking = _ref12.DeleteBooking;\n                  onCompletedMessage(DeleteBooking, LANG(\"reservation_delete_complete\"), LANG(\"reservation_delete_fail\"));\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 248\n                },\n                __self: this\n              }, function (deleteBookingMu, _ref13) {\n                var deleteBookingLoading = _ref13.loading;\n                return React.createElement(UpdateBlockOpMu, {\n                  mutation: UPDATE_BLOCK_OPTION,\n                  onCompleted: function onCompleted(_ref14) {\n                    var UpdateBlockOption = _ref14.UpdateBlockOption;\n                    onCompletedMessage(UpdateBlockOption, LANG(\"change_complited\"), LANG(\"change_failed\"));\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 262\n                  },\n                  __self: this\n                }, function (updateBlockOpMu, _ref15) {\n                  var updateBlockLoading = _ref15.loading;\n                  var totalMuLoading = updateBlockLoading || createBlockLoading || deleteBlockLoading || deleteGuestLoading || deleteBookingLoading || updateBookingLoading;\n                  var mutationLoadings = {\n                    updateBlockLoading: updateBlockLoading,\n                    createBlockLoading: createBlockLoading,\n                    deleteBlockLoading: deleteBlockLoading,\n                    deleteGuestLoading: deleteGuestLoading,\n                    deleteBookingLoading: deleteBookingLoading,\n                    updateBookingLoading: updateBookingLoading\n                  };\n                  var assigDataControl = {\n                    updateBookingMu: updateBookingMu,\n                    deleteBookingMu: deleteBookingMu,\n                    deleteGuestsMu: deleteGuestMu,\n                    createBlockMu: createBlockMu,\n                    deleteBlockMu: deleteBlockMu,\n                    updateBlockOpMu: updateBlockOpMu,\n                    allocateMu: allocateMu,\n                    refetch: refetch,\n                    stopPolling: stopPolling,\n                    startPolling: startPolling.bind(startPolling, houseConfig.pollingPeriod.period),\n                    totalMuLoading: totalMuLoading,\n                    mutationLoadings: mutationLoadings,\n                    networkStatus: networkStatus\n                  };\n                  return React.createElement(AssigTimeline, {\n                    context: context,\n                    loading: loading,\n                    groupData: formatedRoomData,\n                    deafultGuestsData: formatedItemData || [],\n                    dayPickerHook: dayPickerHook,\n                    defaultProps: assigDefaultProps,\n                    roomTypesData: roomTypesData || [],\n                    defaultTimeStart: defaultStartDate,\n                    defaultTimeEnd: defaultEndDate,\n                    assigDataControl: assigDataControl,\n                    setDataTime: setDataTime,\n                    windowHeight: windowHeight,\n                    windowWidth: windowWidth,\n                    reloadTimeline: reloadTimeline,\n                    dataTime: dataTime,\n                    key: \"timeline\".concat(moment(dayPickerHook.from || new Date()).format(\"YYMMDD\")).concat(networkStatus !== 1).concat(reloadKey),\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 313\n                    },\n                    __self: this\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n};\n\nexport default reactWindowSize(EerrorProtect(AssigTimelineWrap));","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/middleServer/assig/AssigTimelineWrap.tsx"],"names":["React","useState","Query","Mutation","moment","_","assigDefaultProps","useDayPicker","LANG","setMidNight","queryDataFormater","onCompletedMessage","s4","EerrorProtect","BookingStatus","ALLOCATE_GUEST_TO_ROOM","UPDATE_BOOKING","DELETE_GUEST","DELETE_BLOCK","GET_ALL_ROOMTYPES_WITH_GUESTS_WITH_ITEM","CREATE_BLOCK","DELETE_BOOKING","UPDATE_BLOCK_OPTION","AssigTimeline","to4YMMDD","roomDataManufacturer","reactWindowSize","guestsDataManufacturer","blockDataManufacturer","tz","setDefault","UpdateBookingMu","CreateBlockMu","DeleteBookingMu","UpdateBlockOpMu","GetAllRoomTypeWithGuestQuery","AllocateGuestToRoomMu","DeleteGuestMu","DeleteBlockMu","AssigTimelineWrap","context","windowHeight","windowWidth","houseConfig","house","dayPickerHook","Date","reloadKey","setReloadKey","defaultStartDate","from","local","toDate","defaultEndDate","add","start","subtract","valueOf","end","dataTime","setDataTime","reloadTimeline","updateVariables","houseId","_id","checkIn","checkOut","pollingPeriod","period","undefined","bookingStatuses","COMPLETE","PROGRESSING","data","loading","refetch","stopPolling","startPolling","networkStatus","roomTypesData","guestsData","blocks","formatedRoomData","formatedGuestsData","formatedBlockData","formatedItemData","concat","map","block","index","itemIndex","AllocateGuestToRoom","cache","inData","cacheData","readQuery","query","variables","result","unionBy","guest","GetGuests","guests","writeQuery","GetAllRoomType","allocateMu","updateBookingMu","updateBookingLoading","DeleteGuests","deleteGuestMu","deleteGuestLoading","CreateBlock","createBlockMu","createBlockLoading","DeleteBlock","deleteBlockMu","deleteBlockLoading","DeleteBooking","deleteBookingMu","deleteBookingLoading","UpdateBlockOption","updateBlockOpMu","updateBlockLoading","totalMuLoading","mutationLoadings","assigDataControl","deleteGuestsMu","bind","format"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React, { useState, useCallback, useMemo, Fragment } from \"react\";\r\nimport { Query, Mutation } from \"react-apollo\";\r\nimport moment from \"moment-timezone\";\r\nimport _ from \"lodash\";\r\nimport assigDefaultProps from \"./timelineConfig\";\r\nimport {\r\n  getAllRoomTypeWithGuest,\r\n  getAllRoomTypeWithGuestVariables,\r\n  allocateGuestToRoom,\r\n  allocateGuestToRoomVariables,\r\n  updateBooking,\r\n  updateBookingVariables,\r\n  deleteBooking,\r\n  deleteBookingVariables,\r\n  deleteGuests,\r\n  deleteGuestsVariables,\r\n  deleteBlock,\r\n  deleteBlockVariables,\r\n  createBlock,\r\n  createBlockVariables,\r\n  updateBlockOption,\r\n  updateBlockOptionVariables\r\n} from \"../../../types/api\";\r\nimport { useDayPicker, LANG, useModal } from \"../../../hooks/hook\";\r\nimport {\r\n  setMidNight,\r\n  queryDataFormater,\r\n  onCompletedMessage,\r\n  s4\r\n} from \"../../../utils/utils\";\r\nimport EerrorProtect from \"../../../utils/errProtect\";\r\nimport { BookingStatus } from \"../../../types/enum\";\r\nimport {\r\n  ALLOCATE_GUEST_TO_ROOM,\r\n  UPDATE_BOOKING,\r\n  DELETE_GUEST,\r\n  DELETE_BLOCK,\r\n  GET_ALL_ROOMTYPES_WITH_GUESTS_WITH_ITEM,\r\n  CREATE_BLOCK,\r\n  DELETE_BOOKING,\r\n  UPDATE_BLOCK_OPTION\r\n} from \"../../../queries\";\r\nimport AssigTimeline from \"./AssigTimeline\";\r\nimport { to4YMMDD } from \"../../../utils/setMidNight\";\r\nimport { roomDataManufacturer } from \"./components/groupDataMenufacture\";\r\nimport reactWindowSize, { WindowSizeProps } from \"react-window-size\";\r\nimport {\r\n  IAssigDataControl,\r\n  IAssigMutationLoading\r\n} from \"./components/assigIntrerface\";\r\nimport { IContext } from \"../../MiddleServerRouter\";\r\nimport { guestsDataManufacturer } from \"./components/guestsDataManufacturer\";\r\nimport { blockDataManufacturer } from \"./components/blockDataManufacturer\";\r\nimport DayPickerModal from \"../../../components/dayPickerModal/DayPickerModal\";\r\n\r\nmoment.tz.setDefault(\"UTC\");\r\n\r\nclass UpdateBookingMu extends Mutation<updateBooking, updateBookingVariables> {}\r\nclass CreateBlockMu extends Mutation<createBlock, createBlockVariables> {}\r\nclass DeleteBookingMu extends Mutation<deleteBooking, deleteBookingVariables> {}\r\nclass UpdateBlockOpMu extends Mutation<\r\n  updateBlockOption,\r\n  updateBlockOptionVariables\r\n> {}\r\n\r\ninterface IProps {\r\n  context: IContext;\r\n}\r\n\r\nclass GetAllRoomTypeWithGuestQuery extends Query<\r\n  getAllRoomTypeWithGuest,\r\n  getAllRoomTypeWithGuestVariables\r\n> {}\r\nclass AllocateGuestToRoomMu extends Mutation<\r\n  allocateGuestToRoom,\r\n  allocateGuestToRoomVariables\r\n> {}\r\nclass DeleteGuestMu extends Mutation<deleteGuests, deleteGuestsVariables> {}\r\nclass DeleteBlockMu extends Mutation<deleteBlock, deleteBlockVariables> {}\r\n\r\nconst AssigTimelineWrap: React.FC<IProps & WindowSizeProps> = ({\r\n  context,\r\n  windowHeight,\r\n  windowWidth\r\n}) => {\r\n  const { houseConfig, house } = context;\r\n  const dayPickerHook = useDayPicker(new Date(), new Date());\r\n  const [reloadKey, setReloadKey] = useState(s4());\r\n  const defaultStartDate = dayPickerHook.from\r\n    ? dayPickerHook.from\r\n    : moment()\r\n        .local()\r\n        .toDate();\r\n\r\n  const defaultEndDate = dayPickerHook.from\r\n    ? moment(dayPickerHook.from)\r\n        .local()\r\n        .add(10, \"days\")\r\n        .toDate()\r\n    : moment()\r\n        .local()\r\n        .add(10, \"days\")\r\n        .toDate();\r\n\r\n  const [dataTime, setDataTime] = useState({\r\n    start: setMidNight(\r\n      moment()\r\n        .subtract(5, \"days\")\r\n        .valueOf()\r\n    ),\r\n    end: setMidNight(\r\n      moment()\r\n        .add(14, \"days\")\r\n        .valueOf()\r\n    )\r\n  });\r\n\r\n  const reloadTimeline = () => {\r\n    setReloadKey(s4());\r\n  };\r\n\r\n  const updateVariables = {\r\n    houseId: house._id,\r\n    checkIn: to4YMMDD(moment(dataTime.start)),\r\n    checkOut: to4YMMDD(moment(dataTime.end))\r\n  };\r\n\r\n  moment.tz.setDefault(\"UTC\");\r\n\r\n  return (\r\n    <GetAllRoomTypeWithGuestQuery\r\n      fetchPolicy=\"network-only\"\r\n      notifyOnNetworkStatusChange={true}\r\n      pollInterval={\r\n        houseConfig.pollingPeriod ? houseConfig.pollingPeriod.period : undefined\r\n      }\r\n      query={GET_ALL_ROOMTYPES_WITH_GUESTS_WITH_ITEM}\r\n      variables={{\r\n        ...updateVariables,\r\n        bookingStatuses: [BookingStatus.COMPLETE, BookingStatus.PROGRESSING]\r\n      }}\r\n    >\r\n      {({\r\n        data,\r\n        loading,\r\n        refetch,\r\n        stopPolling,\r\n        startPolling,\r\n        networkStatus\r\n      }) => {\r\n        const roomTypesData = queryDataFormater(\r\n          data,\r\n          \"GetAllRoomType\",\r\n          \"roomTypes\",\r\n          undefined\r\n        ); // 원본데이터\r\n\r\n        const guestsData =\r\n          queryDataFormater(data, \"GetGuests\", \"guests\", []) || [];\r\n        const blocks = queryDataFormater(data, \"GetBlocks\", \"blocks\", []) || [];\r\n        const formatedRoomData = roomDataManufacturer(roomTypesData); // 타임라인을 위해 가공된 데이터\r\n        const formatedGuestsData = guestsDataManufacturer(guestsData); // 타임라인을 위해 가공된 데이터\r\n        const formatedBlockData = blockDataManufacturer(blocks); // 타임라인을 위해 가공된 데이터\r\n        const formatedItemData = formatedGuestsData\r\n          .concat(formatedBlockData)\r\n          .map((block, index) => {\r\n            block.itemIndex = index;\r\n            return block;\r\n          });\r\n\r\n        return (\r\n          <AllocateGuestToRoomMu\r\n            onCompleted={({ AllocateGuestToRoom }) => {\r\n              onCompletedMessage(\r\n                AllocateGuestToRoom,\r\n                LANG(\"assig_completed\"),\r\n                LANG(\"assig_failed\")\r\n              );\r\n            }}\r\n            update={(cache, { data: inData }) => {\r\n              const cacheData: getAllRoomTypeWithGuest | null = cache.readQuery(\r\n                {\r\n                  query: GET_ALL_ROOMTYPES_WITH_GUESTS_WITH_ITEM,\r\n                  variables: updateVariables\r\n                }\r\n              );\r\n              if (cacheData && inData) {\r\n                const result = _.unionBy(\r\n                  [inData.AllocateGuestToRoom.guest],\r\n                  cacheData.GetGuests.guests,\r\n                  \"_id\"\r\n                );\r\n\r\n                cache.writeQuery({\r\n                  query: GET_ALL_ROOMTYPES_WITH_GUESTS_WITH_ITEM,\r\n                  data: {\r\n                    GetAllRoomType: cacheData.GetAllRoomType,\r\n                    GetGuests: {\r\n                      ...cacheData.GetGuests,\r\n                      guests: result\r\n                    }\r\n                  }\r\n                });\r\n              }\r\n            }}\r\n            mutation={ALLOCATE_GUEST_TO_ROOM}\r\n          >\r\n            {allocateMu => (\r\n              <UpdateBookingMu mutation={UPDATE_BOOKING}>\r\n                {(updateBookingMu, { loading: updateBookingLoading }) => (\r\n                  <DeleteGuestMu\r\n                    onCompleted={({ DeleteGuests }) => {\r\n                      onCompletedMessage(\r\n                        DeleteGuests,\r\n                        LANG(\"delete_completed\"),\r\n                        LANG(\"delete_failed\")\r\n                      );\r\n                    }}\r\n                    mutation={DELETE_GUEST}\r\n                  >\r\n                    {(deleteGuestMu, { loading: deleteGuestLoading }) => (\r\n                      <CreateBlockMu\r\n                        onCompleted={({ CreateBlock }) => {\r\n                          onCompletedMessage(\r\n                            CreateBlock,\r\n                            LANG(\"block_room_completed\"),\r\n                            LANG(\"block_room_failed\")\r\n                          );\r\n                        }}\r\n                        mutation={CREATE_BLOCK}\r\n                      >\r\n                        {(createBlockMu, { loading: createBlockLoading }) => (\r\n                          <DeleteBlockMu\r\n                            onCompleted={({ DeleteBlock }) => {\r\n                              onCompletedMessage(\r\n                                DeleteBlock,\r\n                                LANG(\"room_block_release\"),\r\n                                LANG(\"room_block_release_fail\")\r\n                              );\r\n                            }}\r\n                            mutation={DELETE_BLOCK}\r\n                          >\r\n                            {(\r\n                              deleteBlockMu,\r\n                              { loading: deleteBlockLoading }\r\n                            ) => (\r\n                              <DeleteBookingMu\r\n                                mutation={DELETE_BOOKING}\r\n                                onCompleted={({ DeleteBooking }) => {\r\n                                  onCompletedMessage(\r\n                                    DeleteBooking,\r\n                                    LANG(\"reservation_delete_complete\"),\r\n                                    LANG(\"reservation_delete_fail\")\r\n                                  );\r\n                                }}\r\n                              >\r\n                                {(\r\n                                  deleteBookingMu,\r\n                                  { loading: deleteBookingLoading }\r\n                                ) => (\r\n                                  <UpdateBlockOpMu\r\n                                    mutation={UPDATE_BLOCK_OPTION}\r\n                                    onCompleted={({ UpdateBlockOption }) => {\r\n                                      onCompletedMessage(\r\n                                        UpdateBlockOption,\r\n                                        LANG(\"change_complited\"),\r\n                                        LANG(\"change_failed\")\r\n                                      );\r\n                                    }}\r\n                                  >\r\n                                    {(\r\n                                      updateBlockOpMu,\r\n                                      { loading: updateBlockLoading }\r\n                                    ) => {\r\n                                      const totalMuLoading =\r\n                                        updateBlockLoading ||\r\n                                        createBlockLoading ||\r\n                                        deleteBlockLoading ||\r\n                                        deleteGuestLoading ||\r\n                                        deleteBookingLoading ||\r\n                                        updateBookingLoading;\r\n\r\n                                      const mutationLoadings: IAssigMutationLoading = {\r\n                                        updateBlockLoading,\r\n                                        createBlockLoading,\r\n                                        deleteBlockLoading,\r\n                                        deleteGuestLoading,\r\n                                        deleteBookingLoading,\r\n                                        updateBookingLoading\r\n                                      };\r\n\r\n                                      const assigDataControl: IAssigDataControl = {\r\n                                        updateBookingMu,\r\n                                        deleteBookingMu,\r\n                                        deleteGuestsMu: deleteGuestMu,\r\n                                        createBlockMu,\r\n                                        deleteBlockMu,\r\n                                        updateBlockOpMu,\r\n                                        allocateMu,\r\n                                        refetch,\r\n                                        stopPolling,\r\n                                        startPolling: startPolling.bind(\r\n                                          startPolling,\r\n                                          houseConfig.pollingPeriod.period\r\n                                        ),\r\n                                        totalMuLoading,\r\n                                        mutationLoadings,\r\n                                        networkStatus\r\n                                      };\r\n\r\n                                      return (\r\n                                        <AssigTimeline\r\n                                          context={context}\r\n                                          loading={loading}\r\n                                          groupData={formatedRoomData}\r\n                                          deafultGuestsData={\r\n                                            formatedItemData || []\r\n                                          }\r\n                                          dayPickerHook={dayPickerHook}\r\n                                          defaultProps={assigDefaultProps}\r\n                                          roomTypesData={roomTypesData || []}\r\n                                          defaultTimeStart={defaultStartDate}\r\n                                          defaultTimeEnd={defaultEndDate}\r\n                                          assigDataControl={assigDataControl}\r\n                                          setDataTime={setDataTime}\r\n                                          windowHeight={windowHeight}\r\n                                          windowWidth={windowWidth}\r\n                                          reloadTimeline={reloadTimeline}\r\n                                          dataTime={dataTime}\r\n                                          key={`timeline${moment(\r\n                                            dayPickerHook.from || new Date()\r\n                                          ).format(\"YYMMDD\")}${networkStatus !==\r\n                                            1}${reloadKey}`}\r\n                                        />\r\n                                      );\r\n                                    }}\r\n                                  </UpdateBlockOpMu>\r\n                                )}\r\n                              </DeleteBookingMu>\r\n                            )}\r\n                          </DeleteBlockMu>\r\n                        )}\r\n                      </CreateBlockMu>\r\n                    )}\r\n                  </DeleteGuestMu>\r\n                )}\r\n              </UpdateBookingMu>\r\n            )}\r\n          </AllocateGuestToRoomMu>\r\n        );\r\n      }}\r\n    </GetAllRoomTypeWithGuestQuery>\r\n  );\r\n};\r\n\r\nexport default reactWindowSize<IProps>(EerrorProtect(AssigTimelineWrap));\r\n"]},"metadata":{},"sourceType":"module"}