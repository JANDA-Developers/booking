{"ast":null,"code":"import { SmsReplaceKeyEnumKeys, SmsReplaceKeyEnumValues } from \"../types/enum\";\nimport { LANG } from \"../hooks/hook\"; // 메세지를 [언어] => %템플릿% 으로 변경\n\nexport var smsMessageFormatter = function smsMessageFormatter(msg) {\n  var formatMsg = msg;\n  SmsReplaceKeyEnumKeys.forEach(function (key, index) {\n    formatMsg = formatMsg.replace(LANG(\"SmsReplaceKey\")[key], SmsReplaceKeyEnumValues[index]);\n  });\n  return formatMsg;\n}; // 메세지를 %템플릿% => [언어] 로 변경\n// 파서에 키값에 해당하는 값을 직접적으로 넣어서 화면에 표시할수도 있음\n\nexport var smsMsgParser = function smsMsgParser(msg, parser) {\n  var formatMsg = msg;\n  SmsReplaceKeyEnumValues.forEach(function (key) {\n    if (!parser) {\n      formatMsg = formatMsg.replace(key, // @ts-ignore\n      LANG(\"SmsReplaceKey\")[key.replace(/%/gi, \"\")]);\n    } else {\n      formatMsg = formatMsg.replace(key, // @ts-ignore\n      parser[key.replace(/%/gi, \"\")]);\n    }\n  });\n  return formatMsg;\n}; // 템플릿 셀렉트 옵션 만들어주는 함수\n\nexport var templateOpCreater = function templateOpCreater(templates) {\n  return templates.map(function (template) {\n    return {\n      value: template._id,\n      label: template.formatName\n    };\n  });\n};","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/utils/smsUtils.tsx"],"names":["SmsReplaceKeyEnumKeys","SmsReplaceKeyEnumValues","LANG","smsMessageFormatter","msg","formatMsg","forEach","key","index","replace","smsMsgParser","parser","templateOpCreater","templates","map","template","value","_id","label","formatName"],"mappings":"AAAA,SAAQA,qBAAR,EAA+BC,uBAA/B,QAA6D,eAA7D;AAGA,SAAQC,IAAR,QAAmB,eAAnB,C,CAEA;;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,GAAD,EAAyB;AAC1D,MAAIC,SAAS,GAAGD,GAAhB;AACAJ,EAAAA,qBAAqB,CAACM,OAAtB,CAA8B,UAACC,GAAD,EAAWC,KAAX,EAAqB;AACjDH,IAAAA,SAAS,GAAGA,SAAS,CAACI,OAAV,CACVP,IAAI,CAAC,eAAD,CAAJ,CAAsBK,GAAtB,CADU,EAEVN,uBAAuB,CAACO,KAAD,CAFb,CAAZ;AAID,GALD;AAOA,SAAOH,SAAP;AACD,CAVM,C,CAYP;AACA;;AACA,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACN,GAAD,EAAcO,MAAd,EAAuC;AACjE,MAAIN,SAAS,GAAGD,GAAhB;AAEAH,EAAAA,uBAAuB,CAACK,OAAxB,CAAgC,UAACC,GAAD,EAAc;AAC5C,QAAI,CAACI,MAAL,EAAa;AACXN,MAAAA,SAAS,GAAGA,SAAS,CAACI,OAAV,CACVF,GADU,EAEV;AACAL,MAAAA,IAAI,CAAC,eAAD,CAAJ,CAAsBK,GAAG,CAACE,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAtB,CAHU,CAAZ;AAKD,KAND,MAMO;AACLJ,MAAAA,SAAS,GAAGA,SAAS,CAACI,OAAV,CACVF,GADU,EAEV;AACAI,MAAAA,MAAM,CAACJ,GAAG,CAACE,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAD,CAHI,CAAZ;AAKD;AACF,GAdD;AAgBA,SAAOJ,SAAP;AACD,CApBM,C,CAsBP;;AACA,OAAO,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAC/BC,SAD+B;AAAA,SAG/BA,SAAS,CAACC,GAAV,CAAc,UAAAC,QAAQ;AAAA,WAAK;AACzBC,MAAAA,KAAK,EAAED,QAAQ,CAACE,GADS;AAEzBC,MAAAA,KAAK,EAAEH,QAAQ,CAACI;AAFS,KAAL;AAAA,GAAtB,CAH+B;AAAA,CAA1B","sourcesContent":["import {SmsReplaceKeyEnumKeys, SmsReplaceKeyEnumValues} from \"../types/enum\";\r\nimport {getSmsInfo_GetSmsInfo_smsInfo_smsTemplates} from \"../types/api\";\r\nimport {IselectedOption} from \"../atoms/forms/selectBox/SelectBox\";\r\nimport {LANG} from \"../hooks/hook\";\r\n\r\n// 메세지를 [언어] => %템플릿% 으로 변경\r\nexport const smsMessageFormatter = (msg: string): string => {\r\n  let formatMsg = msg;\r\n  SmsReplaceKeyEnumKeys.forEach((key: any, index) => {\r\n    formatMsg = formatMsg.replace(\r\n      LANG(\"SmsReplaceKey\")[key],\r\n      SmsReplaceKeyEnumValues[index]\r\n    );\r\n  });\r\n\r\n  return formatMsg;\r\n};\r\n\r\n// 메세지를 %템플릿% => [언어] 로 변경\r\n// 파서에 키값에 해당하는 값을 직접적으로 넣어서 화면에 표시할수도 있음\r\nexport const smsMsgParser = (msg: string, parser?: any): string => {\r\n  let formatMsg = msg;\r\n\r\n  SmsReplaceKeyEnumValues.forEach((key: any) => {\r\n    if (!parser) {\r\n      formatMsg = formatMsg.replace(\r\n        key,\r\n        // @ts-ignore\r\n        LANG(\"SmsReplaceKey\")[key.replace(/%/gi, \"\")]\r\n      );\r\n    } else {\r\n      formatMsg = formatMsg.replace(\r\n        key,\r\n        // @ts-ignore\r\n        parser[key.replace(/%/gi, \"\")]\r\n      );\r\n    }\r\n  });\r\n\r\n  return formatMsg;\r\n};\r\n\r\n// 템플릿 셀렉트 옵션 만들어주는 함수\r\nexport const templateOpCreater = (\r\n  templates: getSmsInfo_GetSmsInfo_smsInfo_smsTemplates[]\r\n): IselectedOption[] =>\r\n  templates.map(template => ({\r\n    value: template._id,\r\n    label: template.formatName\r\n  }));\r\n"]},"metadata":{},"sourceType":"module"}