{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uBBFC\\uC7AC\\\\Desktop\\\\projects\\\\jd-api-server-client\\\\src\\\\pages\\\\outPages\\\\reservation\\\\components\\\\roomTypeCards\\\\roomTypeCard.tsx\";\nimport classNames from \"classnames\";\nimport React, { Fragment, useState, useMemo } from \"react\";\nimport JDselect from \"../../../../../atoms/forms/selectBox/SelectBox\";\nimport Button from \"../../../../../atoms/button/Button\";\nimport Preloader from \"../../../../../atoms/preloader/Preloader\";\nimport { isEmpty, autoComma } from \"../../../../../utils/utils\";\nimport { useModal, LANG } from \"../../../../../hooks/hook\";\nimport { Gender, PricingType, RoomGender } from \"../../../../../types/enum\";\nimport JDmodal from \"../../../../../atoms/modal/Modal\";\nimport moment from \"moment\";\nimport selectOpCreater from \"../../../../../utils/selectOptionCreater\";\nimport JDbadge from \"../../../../../atoms/badge/Badge\";\nimport { PortalPreloader } from \"../../../../../utils/portalTo\";\n\nvar RoomTypeCard = function RoomTypeCard(_ref) {\n  var className = _ref.className,\n      roomTypeData = _ref.roomTypeData,\n      priceLoading = _ref.priceLoading,\n      windowWidth = _ref.windowWidth,\n      setGuestCount = _ref.setGuestCount,\n      guestCountValue = _ref.guestCountValue,\n      reservationHooks = _ref.reservationHooks,\n      countLoading = _ref.countLoading,\n      truePrice = _ref.truePrice,\n      availableCount = _ref.availableCount,\n      lastCard = _ref.lastCard;\n  var dayPickerHook = reservationHooks.dayPickerHook,\n      priceHook = reservationHooks.priceHook,\n      roomSelectInfo = reservationHooks.roomSelectInfo,\n      roomInfoHook = reservationHooks.roomInfoHook,\n      setRoomSelectInfo = reservationHooks.setRoomSelectInfo,\n      toastModalHook = reservationHooks.toastModalHook;\n  var roomImgModalHook = useModal(false);\n\n  var _useState = useState({\n    female: false,\n    male: false,\n    count: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      disabled = _useState2[0],\n      setDisabled = _useState2[1];\n\n  var classes = classNames(\"roomTypeCard\", className, {\n    \"roomTypeCard--last\": lastCard\n  }); //  방 선택수 셀렉트옵션을 리턴합니다.\n  //  count =  availableCount(FROM API) +  guestCountValue(이미 선택된)\n\n  var countSelectOpFn = useMemo(function () {\n    return function (key) {\n      var genderKey = \"\"; // 남성 SelectOp 리턴\n\n      if (key === \"maleCount\") {\n        genderKey = \" \".concat(LANG(\"male\"));\n\n        if (availableCount.maleCount || guestCountValue.male) {\n          return selectOpCreater({\n            count: availableCount.maleCount + 1 + guestCountValue.male,\n            labelAdd: genderKey\n          });\n        }\n      } // 여성 SelectOp 리턴\n\n\n      if (key === \"femaleCount\") {\n        genderKey = \" \".concat(LANG(\"female\"));\n\n        if (availableCount.femaleCount || guestCountValue.female) {\n          return selectOpCreater({\n            count: availableCount.femaleCount + 1 + guestCountValue.female,\n            labelAdd: genderKey\n          });\n        }\n      } // 방타입 SelectOp 리턴\n\n\n      if (key === \"roomCount\") {\n        genderKey = \" \";\n\n        if (availableCount.roomCount) {\n          return selectOpCreater({\n            count: availableCount.roomCount + 1 + guestCountValue.room,\n            labelAdd: genderKey\n          });\n        }\n      }\n\n      return selectOpCreater({\n        count: 1,\n        labelAdd: genderKey\n      });\n    };\n  }, [availableCount.maleCount, availableCount.roomCount, availableCount.femaleCount]);\n  var maleSeleteOption = countSelectOpFn(\"maleCount\");\n  var femaleSeleteOption = countSelectOpFn(\"femaleCount\");\n  var roomSeleteOption = countSelectOpFn(\"roomCount\");\n  var totalCan = maleSeleteOption.length + femaleSeleteOption.length + roomSeleteOption.length; // 이미 선택한 방인지 체크1\n\n  var isSelectedRoom = function () {\n    var temp = roomSelectInfo.filter(function (resvRoom) {\n      return resvRoom.roomTypeId === roomTypeData._id;\n    });\n    if (isEmpty(temp)) return false;\n    return true;\n  }(); // const maxSelectCount = ((): IselectedOption[] => {})();\n\n\n  var roomTypeIndex = roomSelectInfo.findIndex(function (resvRoom) {\n    return resvRoom.roomTypeId === roomTypeData._id;\n  });\n  var totalSelectCount = guestCountValue.female + guestCountValue.male + guestCountValue.room; // 방 인원 선택시 선택가능 인원을 다시가져오게함\n\n  var guestCountSelect = function guestCountSelect(selectedValue, flag) {\n    setGuestCount({\n      male: flag === Gender.MALE ? selectedValue : guestCountValue.male,\n      female: flag === Gender.FEMALE ? selectedValue : guestCountValue.female,\n      room: flag === \"room\" ? selectedValue : guestCountValue.room,\n      get: flag !== \"room\" ? flag : Gender.FEMALE\n    });\n  }; // 방선택하기 클릭시\n\n\n  var handleRoomSelectClick = function handleRoomSelectClick() {\n    var roomSelectInfoCopy = roomSelectInfo.slice();\n    var dayDiff = moment(dayPickerHook.to).diff(dayPickerHook.from, \"days\") || 1;\n    var totalRoomTypePrice = totalSelectCount * truePrice * dayDiff; // 이미 선택된방 제거\n\n    if (isSelectedRoom) {\n      roomSelectInfoCopy.splice(roomTypeIndex, 1);\n      setRoomSelectInfo(roomSelectInfoCopy);\n      setDisabled({\n        female: false,\n        male: false,\n        count: false\n      });\n      priceHook.onChange(priceHook.value - totalRoomTypePrice);\n      return;\n    } // 선택된인원이 없는경우에\n\n\n    if (totalSelectCount === 0) {\n      toastModalHook.openModal(LANG(\"please_select_the_number_of_people\"));\n      return;\n    } // 선택된방이 아닐경우에\n\n\n    roomSelectInfoCopy.push({\n      roomTypeId: roomTypeData._id,\n      pricingType: roomTypeData.pricingType,\n      roomTypeName: roomTypeData.name,\n      count: {\n        female: guestCountValue.female,\n        male: guestCountValue.male,\n        roomCount: guestCountValue.room\n      }\n    });\n    setRoomSelectInfo(roomSelectInfoCopy);\n    setDisabled({\n      female: true,\n      male: true,\n      count: true\n    });\n    priceHook.onChange(priceHook.value + totalRoomTypePrice);\n    roomInfoHook[1]([].concat(_toConsumableArray(roomInfoHook[0]), [roomTypeData]));\n  }; // 방배경사진\n\n\n  var roomStyle = {\n    // TODO :사진정보 여기에\n    backgroundImage: \"url(\".concat(roomTypeData.img ? roomTypeData.img.url : \"\", \")\")\n  };\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"flex-grid-grow flex-grid-grow--margin0 \".concat(classes),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"flex-grid__col col--grow-2 roomTypeCard__imgSection\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: roomImgModalHook.openModal,\n    style: roomStyle,\n    className: \"roomTypeCard__img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"flex-grid__col col--grow-2 roomTypeCard__middleSection\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"roomTypeCard__middleTopSection\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    className: \"roomTypeCard__roomTypeTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, roomTypeData.name, \" \", totalCan === 0 && !countLoading && React.createElement(JDbadge, {\n    thema: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, LANG(\"fullRoom\")))), React.createElement(\"div\", {\n    className: \"roomTypeCard__middleBottomSection\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, roomTypeData.pricingType === PricingType.DOMITORY ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, roomTypeData.roomGender === RoomGender.FEMALE || React.createElement(JDselect, {\n    menuItemCenterlize: true,\n    borderColor: \"primary\",\n    options: maleSeleteOption,\n    autoSize: true,\n    onChange: function onChange(selectedOp) {\n      return guestCountSelect(selectedOp.value, Gender.MALE);\n    },\n    displayArrow: false,\n    disabled: disabled.male,\n    textOverflow: \"visible\",\n    selectedOption: maleSeleteOption[guestCountValue.male],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }), roomTypeData.roomGender === RoomGender.MALE || React.createElement(JDselect, {\n    menuItemCenterlize: true,\n    borderColor: \"primary\",\n    options: femaleSeleteOption,\n    autoSize: true,\n    textOverflow: \"visible\",\n    displayArrow: false,\n    disabled: disabled.female,\n    onChange: function onChange(selectedOp) {\n      return guestCountSelect(selectedOp.value, Gender.FEMALE);\n    },\n    selectedOption: femaleSeleteOption[guestCountValue.female],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }), React.createElement(PortalPreloader, {\n    loading: countLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  })) : React.createElement(JDselect, {\n    menuItemCenterlize: true,\n    borderColor: \"primary\",\n    options: roomSeleteOption,\n    autoSize: true,\n    displayArrow: false,\n    disabled: disabled.count,\n    textOverflow: \"visible\",\n    onChange: function onChange(selectedOp) {\n      return guestCountSelect(selectedOp.value, \"room\");\n    },\n    selectedOption: roomSeleteOption[guestCountValue.room],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"flex-grid__col col--grow-1 roomTypeCard__lastSection\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"roomTypeCard__lastTopSection\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, priceLoading ? React.createElement(Preloader, {\n    loading: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }) : React.createElement(\"span\", {\n    className: \"roomTypeCard__price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, autoComma(truePrice))), React.createElement(Button, {\n    onClick: handleRoomSelectClick,\n    className: \"roomTypeCard__selectButton\",\n    size: \"small\",\n    thema: isSelectedRoom ? \"warn\" : \"primary\",\n    label: isSelectedRoom ? LANG(\"cancel\") : LANG(\"select\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }))), React.createElement(JDmodal, Object.assign({\n    className: \"roomImgPop\"\n  }, roomImgModalHook, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    className: \"roomImgPop__img\",\n    src: roomTypeData.img ? roomTypeData.img.url : \"\",\n    alt: \"\\uBC29 \\uC774\\uBBF8\\uC9C0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"roomImgPop__description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, roomTypeData.description)));\n};\n\nexport default RoomTypeCard;","map":{"version":3,"sources":["C:/Users/김민재/Desktop/projects/jd-api-server-client/src/pages/outPages/reservation/components/roomTypeCards/roomTypeCard.tsx"],"names":["classNames","React","Fragment","useState","useMemo","JDselect","Button","Preloader","isEmpty","autoComma","useModal","LANG","Gender","PricingType","RoomGender","JDmodal","moment","selectOpCreater","JDbadge","PortalPreloader","RoomTypeCard","className","roomTypeData","priceLoading","windowWidth","setGuestCount","guestCountValue","reservationHooks","countLoading","truePrice","availableCount","lastCard","dayPickerHook","priceHook","roomSelectInfo","roomInfoHook","setRoomSelectInfo","toastModalHook","roomImgModalHook","female","male","count","disabled","setDisabled","classes","countSelectOpFn","key","genderKey","maleCount","labelAdd","femaleCount","roomCount","room","maleSeleteOption","femaleSeleteOption","roomSeleteOption","totalCan","length","isSelectedRoom","temp","filter","resvRoom","roomTypeId","_id","roomTypeIndex","findIndex","totalSelectCount","guestCountSelect","selectedValue","flag","MALE","FEMALE","get","handleRoomSelectClick","roomSelectInfoCopy","slice","dayDiff","to","diff","from","totalRoomTypePrice","splice","onChange","value","openModal","push","pricingType","roomTypeName","name","roomStyle","backgroundImage","img","url","DOMITORY","roomGender","selectedOp","description"],"mappings":"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","sourcesContent":["import classNames from \"classnames\";\r\nimport React, {Fragment, useState, useEffect, useMemo} from \"react\";\r\nimport JDselect, {\r\n  IselectedOption\r\n} from \"../../../../../atoms/forms/selectBox/SelectBox\";\r\nimport Button from \"../../../../../atoms/button/Button\";\r\nimport {IRoomType} from \"../../../../../types/interface\";\r\nimport Preloader from \"../../../../../atoms/preloader/Preloader\";\r\nimport {isEmpty, autoComma} from \"../../../../../utils/utils\";\r\nimport {useModal, LANG} from \"../../../../../hooks/hook\";\r\nimport {Gender, PricingType, RoomGender} from \"../../../../../types/enum\";\r\nimport {IGuestCount} from \"./roomTypeCardsWrap\";\r\nimport JDmodal from \"../../../../../atoms/modal/Modal\";\r\nimport moment from \"moment\";\r\nimport selectOpCreater from \"../../../../../utils/selectOptionCreater\";\r\nimport JDbadge from \"../../../../../atoms/badge/Badge\";\r\nimport {IReservationHooks} from \"../../Reservation\";\r\nimport {PortalPreloader} from \"../../../../../utils/portalTo\";\r\n\r\ninterface IProps {\r\n  className?: string;\r\n  roomTypeData: IRoomType;\r\n  windowWidth: any;\r\n  reservationHooks: IReservationHooks;\r\n  setGuestCount: React.Dispatch<React.SetStateAction<IGuestCount>>;\r\n  guestCountValue: IGuestCount;\r\n  truePrice: number;\r\n  countLoading: boolean;\r\n  priceLoading: boolean;\r\n  lastCard: boolean;\r\n  availableCount: {\r\n    maleCount: number;\r\n    femaleCount: number;\r\n    roomCount: number;\r\n  };\r\n}\r\n\r\nconst RoomTypeCard: React.SFC<IProps> = ({\r\n  className,\r\n  roomTypeData,\r\n  priceLoading,\r\n  windowWidth,\r\n  setGuestCount,\r\n  guestCountValue,\r\n  reservationHooks,\r\n  countLoading,\r\n  truePrice,\r\n  availableCount,\r\n  lastCard\r\n}) => {\r\n  const {\r\n    dayPickerHook,\r\n    priceHook,\r\n    roomSelectInfo,\r\n    roomInfoHook,\r\n    setRoomSelectInfo,\r\n    toastModalHook\r\n  } = reservationHooks;\r\n  const roomImgModalHook = useModal(false);\r\n  const [disabled, setDisabled] = useState({\r\n    female: false,\r\n    male: false,\r\n    count: false\r\n  });\r\n  const classes = classNames(\"roomTypeCard\", className, {\r\n    \"roomTypeCard--last\": lastCard\r\n  });\r\n\r\n  //  방 선택수 셀렉트옵션을 리턴합니다.\r\n  //  count =  availableCount(FROM API) +  guestCountValue(이미 선택된)\r\n  const countSelectOpFn = useMemo(\r\n    () => (\r\n      key: \"maleCount\" | \"femaleCount\" | \"roomCount\"\r\n    ): IselectedOption<number>[] => {\r\n      let genderKey = \"\";\r\n      // 남성 SelectOp 리턴\r\n      if (key === \"maleCount\") {\r\n        genderKey = ` ${LANG(\"male\")}`;\r\n        if (availableCount.maleCount || guestCountValue.male) {\r\n          return selectOpCreater({\r\n            count: availableCount.maleCount + 1 + guestCountValue.male,\r\n            labelAdd: genderKey\r\n          });\r\n        }\r\n      }\r\n      // 여성 SelectOp 리턴\r\n      if (key === \"femaleCount\") {\r\n        genderKey = ` ${LANG(\"female\")}`;\r\n        if (availableCount.femaleCount || guestCountValue.female) {\r\n          return selectOpCreater({\r\n            count: availableCount.femaleCount + 1 + guestCountValue.female,\r\n            labelAdd: genderKey\r\n          });\r\n        }\r\n      }\r\n      // 방타입 SelectOp 리턴\r\n      if (key === \"roomCount\") {\r\n        genderKey = \" \";\r\n        if (availableCount.roomCount) {\r\n          return selectOpCreater({\r\n            count: availableCount.roomCount + 1 + guestCountValue.room,\r\n            labelAdd: genderKey\r\n          });\r\n        }\r\n      }\r\n      return selectOpCreater({\r\n        count: 1,\r\n        labelAdd: genderKey\r\n      });\r\n    },\r\n    [\r\n      availableCount.maleCount,\r\n      availableCount.roomCount,\r\n      availableCount.femaleCount\r\n    ]\r\n  );\r\n\r\n  const maleSeleteOption = countSelectOpFn(\"maleCount\");\r\n  const femaleSeleteOption = countSelectOpFn(\"femaleCount\");\r\n  const roomSeleteOption = countSelectOpFn(\"roomCount\");\r\n\r\n  const totalCan =\r\n    maleSeleteOption.length +\r\n    femaleSeleteOption.length +\r\n    roomSeleteOption.length;\r\n\r\n  // 이미 선택한 방인지 체크1\r\n  const isSelectedRoom = ((): boolean => {\r\n    const temp = roomSelectInfo.filter(\r\n      resvRoom => resvRoom.roomTypeId === roomTypeData._id\r\n    );\r\n    if (isEmpty(temp)) return false;\r\n    return true;\r\n  })();\r\n\r\n  // const maxSelectCount = ((): IselectedOption[] => {})();\r\n  const roomTypeIndex = roomSelectInfo.findIndex(\r\n    resvRoom => resvRoom.roomTypeId === roomTypeData._id\r\n  );\r\n\r\n  const totalSelectCount =\r\n    guestCountValue.female + guestCountValue.male + guestCountValue.room;\r\n\r\n  // 방 인원 선택시 선택가능 인원을 다시가져오게함\r\n  const guestCountSelect = (selectedValue: number, flag: Gender | \"room\") => {\r\n    setGuestCount({\r\n      male: flag === Gender.MALE ? selectedValue : guestCountValue.male,\r\n      female: flag === Gender.FEMALE ? selectedValue : guestCountValue.female,\r\n      room: flag === \"room\" ? selectedValue : guestCountValue.room,\r\n      get: flag !== \"room\" ? flag : Gender.FEMALE\r\n    });\r\n  };\r\n\r\n  // 방선택하기 클릭시\r\n  const handleRoomSelectClick = () => {\r\n    const roomSelectInfoCopy = roomSelectInfo.slice();\r\n\r\n    const dayDiff =\r\n      moment(dayPickerHook.to!).diff(dayPickerHook.from!, \"days\") || 1;\r\n    const totalRoomTypePrice = totalSelectCount * truePrice * dayDiff;\r\n\r\n    // 이미 선택된방 제거\r\n    if (isSelectedRoom) {\r\n      roomSelectInfoCopy.splice(roomTypeIndex, 1);\r\n      setRoomSelectInfo(roomSelectInfoCopy);\r\n      setDisabled({female: false, male: false, count: false});\r\n\r\n      priceHook.onChange(priceHook.value - totalRoomTypePrice);\r\n      return;\r\n    }\r\n\r\n    // 선택된인원이 없는경우에\r\n    if (totalSelectCount === 0) {\r\n      toastModalHook.openModal(LANG(\"please_select_the_number_of_people\"));\r\n      return;\r\n    }\r\n\r\n    // 선택된방이 아닐경우에\r\n    roomSelectInfoCopy.push({\r\n      roomTypeId: roomTypeData._id,\r\n      pricingType: roomTypeData.pricingType,\r\n      roomTypeName: roomTypeData.name,\r\n      count: {\r\n        female: guestCountValue.female,\r\n        male: guestCountValue.male,\r\n        roomCount: guestCountValue.room\r\n      }\r\n    });\r\n\r\n    setRoomSelectInfo(roomSelectInfoCopy);\r\n    setDisabled({female: true, male: true, count: true});\r\n    priceHook.onChange(priceHook.value + totalRoomTypePrice);\r\n\r\n    roomInfoHook[1]([...roomInfoHook[0], roomTypeData]);\r\n  };\r\n\r\n  // 방배경사진\r\n  const roomStyle = {\r\n    // TODO :사진정보 여기에\r\n    backgroundImage: `url(${roomTypeData.img ? roomTypeData.img.url : \"\"})`\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={`flex-grid-grow flex-grid-grow--margin0 ${classes}`}>\r\n        <div className=\"flex-grid__col col--grow-2 roomTypeCard__imgSection\">\r\n          <div\r\n            onClick={roomImgModalHook.openModal}\r\n            style={roomStyle}\r\n            className=\"roomTypeCard__img\"\r\n          />\r\n        </div>\r\n        <div className=\"flex-grid__col col--grow-2 roomTypeCard__middleSection\">\r\n          <div className=\"roomTypeCard__middleTopSection\">\r\n            <h6 className=\"roomTypeCard__roomTypeTitle\">\r\n              {roomTypeData.name}{\" \"}\r\n              {totalCan === 0 && !countLoading && (\r\n                <JDbadge thema=\"error\">{LANG(\"fullRoom\")}</JDbadge>\r\n              )}\r\n            </h6>\r\n          </div>\r\n          <div className=\"roomTypeCard__middleBottomSection\">\r\n            {/* 여기서나온 값을 state 에 저장하는거임 */}\r\n            {roomTypeData.pricingType === PricingType.DOMITORY ? (\r\n              <Fragment>\r\n                {roomTypeData.roomGender === RoomGender.FEMALE || (\r\n                  <JDselect\r\n                    menuItemCenterlize\r\n                    borderColor=\"primary\"\r\n                    options={maleSeleteOption}\r\n                    autoSize\r\n                    onChange={selectedOp =>\r\n                      guestCountSelect(selectedOp.value, Gender.MALE)\r\n                    }\r\n                    displayArrow={false}\r\n                    disabled={disabled.male}\r\n                    textOverflow=\"visible\"\r\n                    selectedOption={maleSeleteOption[guestCountValue.male]}\r\n                  />\r\n                )}\r\n                {roomTypeData.roomGender === RoomGender.MALE || (\r\n                  <JDselect\r\n                    menuItemCenterlize\r\n                    borderColor=\"primary\"\r\n                    options={femaleSeleteOption}\r\n                    autoSize\r\n                    textOverflow=\"visible\"\r\n                    displayArrow={false}\r\n                    disabled={disabled.female}\r\n                    onChange={selectedOp =>\r\n                      guestCountSelect(selectedOp.value, Gender.FEMALE)\r\n                    }\r\n                    selectedOption={femaleSeleteOption[guestCountValue.female]}\r\n                  />\r\n                )}\r\n                <PortalPreloader loading={countLoading} />\r\n              </Fragment>\r\n            ) : (\r\n              <JDselect\r\n                menuItemCenterlize\r\n                borderColor=\"primary\"\r\n                options={roomSeleteOption}\r\n                autoSize\r\n                displayArrow={false}\r\n                disabled={disabled.count}\r\n                textOverflow=\"visible\"\r\n                onChange={selectedOp =>\r\n                  guestCountSelect(selectedOp.value, \"room\")\r\n                }\r\n                selectedOption={roomSeleteOption[guestCountValue.room]}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"flex-grid__col col--grow-1 roomTypeCard__lastSection\">\r\n          <div className=\"roomTypeCard__lastTopSection\">\r\n            {priceLoading ? (\r\n              <Preloader loading />\r\n            ) : (\r\n              <span className=\"roomTypeCard__price\">\r\n                {autoComma(truePrice)}\r\n              </span>\r\n            )}\r\n          </div>\r\n          <Button\r\n            onClick={handleRoomSelectClick}\r\n            className=\"roomTypeCard__selectButton\"\r\n            size={\"small\"}\r\n            thema={isSelectedRoom ? \"warn\" : \"primary\"}\r\n            label={isSelectedRoom ? LANG(\"cancel\") : LANG(\"select\")}\r\n          />\r\n        </div>\r\n      </div>\r\n      <JDmodal className=\"roomImgPop\" {...roomImgModalHook}>\r\n        <img\r\n          className=\"roomImgPop__img\"\r\n          src={roomTypeData.img ? roomTypeData.img.url : \"\"}\r\n          alt=\"방 이미지\"\r\n        />\r\n        <div className=\"roomImgPop__description\">\r\n          {roomTypeData.description}\r\n        </div>\r\n      </JDmodal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default RoomTypeCard;\r\n"]},"metadata":{},"sourceType":"module"}